
Remora-STM32H7xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001161c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  080118bc  080118bc  000128bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011de0  08011de0  00012de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08011de8  08011de8  00012de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08011df0  08011df0  00012df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000bc  24000000  08011df8  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000cc0  240000c0  08011eb4  000130c0  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24000d80  08011eb4  00013d80  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000130bc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002fef0  00000000  00000000  000130ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004fec  00000000  00000000  00042fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001890  00000000  00000000  00047fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000012f9  00000000  00000000  00049858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003f6ac  00000000  00000000  0004ab51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00025b98  00000000  00000000  0008a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00177e94  00000000  00000000  000afd95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00227c29  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008634  00000000  00000000  00227c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  002302a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000c0 	.word	0x240000c0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080118a4 	.word	0x080118a4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000c4 	.word	0x240000c4
 80002dc:	080118a4 	.word	0x080118a4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_uldivmod>:
 80006f8:	b953      	cbnz	r3, 8000710 <__aeabi_uldivmod+0x18>
 80006fa:	b94a      	cbnz	r2, 8000710 <__aeabi_uldivmod+0x18>
 80006fc:	2900      	cmp	r1, #0
 80006fe:	bf08      	it	eq
 8000700:	2800      	cmpeq	r0, #0
 8000702:	bf1c      	itt	ne
 8000704:	f04f 31ff 	movne.w	r1, #4294967295
 8000708:	f04f 30ff 	movne.w	r0, #4294967295
 800070c:	f000 b96a 	b.w	80009e4 <__aeabi_idiv0>
 8000710:	f1ad 0c08 	sub.w	ip, sp, #8
 8000714:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000718:	f000 f806 	bl	8000728 <__udivmoddi4>
 800071c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000720:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000724:	b004      	add	sp, #16
 8000726:	4770      	bx	lr

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9d08      	ldr	r5, [sp, #32]
 800072e:	460c      	mov	r4, r1
 8000730:	2b00      	cmp	r3, #0
 8000732:	d14e      	bne.n	80007d2 <__udivmoddi4+0xaa>
 8000734:	4694      	mov	ip, r2
 8000736:	458c      	cmp	ip, r1
 8000738:	4686      	mov	lr, r0
 800073a:	fab2 f282 	clz	r2, r2
 800073e:	d962      	bls.n	8000806 <__udivmoddi4+0xde>
 8000740:	b14a      	cbz	r2, 8000756 <__udivmoddi4+0x2e>
 8000742:	f1c2 0320 	rsb	r3, r2, #32
 8000746:	4091      	lsls	r1, r2
 8000748:	fa20 f303 	lsr.w	r3, r0, r3
 800074c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000750:	4319      	orrs	r1, r3
 8000752:	fa00 fe02 	lsl.w	lr, r0, r2
 8000756:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800075a:	fa1f f68c 	uxth.w	r6, ip
 800075e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000762:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000766:	fb07 1114 	mls	r1, r7, r4, r1
 800076a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800076e:	fb04 f106 	mul.w	r1, r4, r6
 8000772:	4299      	cmp	r1, r3
 8000774:	d90a      	bls.n	800078c <__udivmoddi4+0x64>
 8000776:	eb1c 0303 	adds.w	r3, ip, r3
 800077a:	f104 30ff 	add.w	r0, r4, #4294967295
 800077e:	f080 8112 	bcs.w	80009a6 <__udivmoddi4+0x27e>
 8000782:	4299      	cmp	r1, r3
 8000784:	f240 810f 	bls.w	80009a6 <__udivmoddi4+0x27e>
 8000788:	3c02      	subs	r4, #2
 800078a:	4463      	add	r3, ip
 800078c:	1a59      	subs	r1, r3, r1
 800078e:	fa1f f38e 	uxth.w	r3, lr
 8000792:	fbb1 f0f7 	udiv	r0, r1, r7
 8000796:	fb07 1110 	mls	r1, r7, r0, r1
 800079a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800079e:	fb00 f606 	mul.w	r6, r0, r6
 80007a2:	429e      	cmp	r6, r3
 80007a4:	d90a      	bls.n	80007bc <__udivmoddi4+0x94>
 80007a6:	eb1c 0303 	adds.w	r3, ip, r3
 80007aa:	f100 31ff 	add.w	r1, r0, #4294967295
 80007ae:	f080 80fc 	bcs.w	80009aa <__udivmoddi4+0x282>
 80007b2:	429e      	cmp	r6, r3
 80007b4:	f240 80f9 	bls.w	80009aa <__udivmoddi4+0x282>
 80007b8:	4463      	add	r3, ip
 80007ba:	3802      	subs	r0, #2
 80007bc:	1b9b      	subs	r3, r3, r6
 80007be:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007c2:	2100      	movs	r1, #0
 80007c4:	b11d      	cbz	r5, 80007ce <__udivmoddi4+0xa6>
 80007c6:	40d3      	lsrs	r3, r2
 80007c8:	2200      	movs	r2, #0
 80007ca:	e9c5 3200 	strd	r3, r2, [r5]
 80007ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d905      	bls.n	80007e2 <__udivmoddi4+0xba>
 80007d6:	b10d      	cbz	r5, 80007dc <__udivmoddi4+0xb4>
 80007d8:	e9c5 0100 	strd	r0, r1, [r5]
 80007dc:	2100      	movs	r1, #0
 80007de:	4608      	mov	r0, r1
 80007e0:	e7f5      	b.n	80007ce <__udivmoddi4+0xa6>
 80007e2:	fab3 f183 	clz	r1, r3
 80007e6:	2900      	cmp	r1, #0
 80007e8:	d146      	bne.n	8000878 <__udivmoddi4+0x150>
 80007ea:	42a3      	cmp	r3, r4
 80007ec:	d302      	bcc.n	80007f4 <__udivmoddi4+0xcc>
 80007ee:	4290      	cmp	r0, r2
 80007f0:	f0c0 80f0 	bcc.w	80009d4 <__udivmoddi4+0x2ac>
 80007f4:	1a86      	subs	r6, r0, r2
 80007f6:	eb64 0303 	sbc.w	r3, r4, r3
 80007fa:	2001      	movs	r0, #1
 80007fc:	2d00      	cmp	r5, #0
 80007fe:	d0e6      	beq.n	80007ce <__udivmoddi4+0xa6>
 8000800:	e9c5 6300 	strd	r6, r3, [r5]
 8000804:	e7e3      	b.n	80007ce <__udivmoddi4+0xa6>
 8000806:	2a00      	cmp	r2, #0
 8000808:	f040 8090 	bne.w	800092c <__udivmoddi4+0x204>
 800080c:	eba1 040c 	sub.w	r4, r1, ip
 8000810:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000814:	fa1f f78c 	uxth.w	r7, ip
 8000818:	2101      	movs	r1, #1
 800081a:	fbb4 f6f8 	udiv	r6, r4, r8
 800081e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000822:	fb08 4416 	mls	r4, r8, r6, r4
 8000826:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800082a:	fb07 f006 	mul.w	r0, r7, r6
 800082e:	4298      	cmp	r0, r3
 8000830:	d908      	bls.n	8000844 <__udivmoddi4+0x11c>
 8000832:	eb1c 0303 	adds.w	r3, ip, r3
 8000836:	f106 34ff 	add.w	r4, r6, #4294967295
 800083a:	d202      	bcs.n	8000842 <__udivmoddi4+0x11a>
 800083c:	4298      	cmp	r0, r3
 800083e:	f200 80cd 	bhi.w	80009dc <__udivmoddi4+0x2b4>
 8000842:	4626      	mov	r6, r4
 8000844:	1a1c      	subs	r4, r3, r0
 8000846:	fa1f f38e 	uxth.w	r3, lr
 800084a:	fbb4 f0f8 	udiv	r0, r4, r8
 800084e:	fb08 4410 	mls	r4, r8, r0, r4
 8000852:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000856:	fb00 f707 	mul.w	r7, r0, r7
 800085a:	429f      	cmp	r7, r3
 800085c:	d908      	bls.n	8000870 <__udivmoddi4+0x148>
 800085e:	eb1c 0303 	adds.w	r3, ip, r3
 8000862:	f100 34ff 	add.w	r4, r0, #4294967295
 8000866:	d202      	bcs.n	800086e <__udivmoddi4+0x146>
 8000868:	429f      	cmp	r7, r3
 800086a:	f200 80b0 	bhi.w	80009ce <__udivmoddi4+0x2a6>
 800086e:	4620      	mov	r0, r4
 8000870:	1bdb      	subs	r3, r3, r7
 8000872:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000876:	e7a5      	b.n	80007c4 <__udivmoddi4+0x9c>
 8000878:	f1c1 0620 	rsb	r6, r1, #32
 800087c:	408b      	lsls	r3, r1
 800087e:	fa22 f706 	lsr.w	r7, r2, r6
 8000882:	431f      	orrs	r7, r3
 8000884:	fa20 fc06 	lsr.w	ip, r0, r6
 8000888:	fa04 f301 	lsl.w	r3, r4, r1
 800088c:	ea43 030c 	orr.w	r3, r3, ip
 8000890:	40f4      	lsrs	r4, r6
 8000892:	fa00 f801 	lsl.w	r8, r0, r1
 8000896:	0c38      	lsrs	r0, r7, #16
 8000898:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800089c:	fbb4 fef0 	udiv	lr, r4, r0
 80008a0:	fa1f fc87 	uxth.w	ip, r7
 80008a4:	fb00 441e 	mls	r4, r0, lr, r4
 80008a8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008ac:	fb0e f90c 	mul.w	r9, lr, ip
 80008b0:	45a1      	cmp	r9, r4
 80008b2:	fa02 f201 	lsl.w	r2, r2, r1
 80008b6:	d90a      	bls.n	80008ce <__udivmoddi4+0x1a6>
 80008b8:	193c      	adds	r4, r7, r4
 80008ba:	f10e 3aff 	add.w	sl, lr, #4294967295
 80008be:	f080 8084 	bcs.w	80009ca <__udivmoddi4+0x2a2>
 80008c2:	45a1      	cmp	r9, r4
 80008c4:	f240 8081 	bls.w	80009ca <__udivmoddi4+0x2a2>
 80008c8:	f1ae 0e02 	sub.w	lr, lr, #2
 80008cc:	443c      	add	r4, r7
 80008ce:	eba4 0409 	sub.w	r4, r4, r9
 80008d2:	fa1f f983 	uxth.w	r9, r3
 80008d6:	fbb4 f3f0 	udiv	r3, r4, r0
 80008da:	fb00 4413 	mls	r4, r0, r3, r4
 80008de:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008e2:	fb03 fc0c 	mul.w	ip, r3, ip
 80008e6:	45a4      	cmp	ip, r4
 80008e8:	d907      	bls.n	80008fa <__udivmoddi4+0x1d2>
 80008ea:	193c      	adds	r4, r7, r4
 80008ec:	f103 30ff 	add.w	r0, r3, #4294967295
 80008f0:	d267      	bcs.n	80009c2 <__udivmoddi4+0x29a>
 80008f2:	45a4      	cmp	ip, r4
 80008f4:	d965      	bls.n	80009c2 <__udivmoddi4+0x29a>
 80008f6:	3b02      	subs	r3, #2
 80008f8:	443c      	add	r4, r7
 80008fa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80008fe:	fba0 9302 	umull	r9, r3, r0, r2
 8000902:	eba4 040c 	sub.w	r4, r4, ip
 8000906:	429c      	cmp	r4, r3
 8000908:	46ce      	mov	lr, r9
 800090a:	469c      	mov	ip, r3
 800090c:	d351      	bcc.n	80009b2 <__udivmoddi4+0x28a>
 800090e:	d04e      	beq.n	80009ae <__udivmoddi4+0x286>
 8000910:	b155      	cbz	r5, 8000928 <__udivmoddi4+0x200>
 8000912:	ebb8 030e 	subs.w	r3, r8, lr
 8000916:	eb64 040c 	sbc.w	r4, r4, ip
 800091a:	fa04 f606 	lsl.w	r6, r4, r6
 800091e:	40cb      	lsrs	r3, r1
 8000920:	431e      	orrs	r6, r3
 8000922:	40cc      	lsrs	r4, r1
 8000924:	e9c5 6400 	strd	r6, r4, [r5]
 8000928:	2100      	movs	r1, #0
 800092a:	e750      	b.n	80007ce <__udivmoddi4+0xa6>
 800092c:	f1c2 0320 	rsb	r3, r2, #32
 8000930:	fa20 f103 	lsr.w	r1, r0, r3
 8000934:	fa0c fc02 	lsl.w	ip, ip, r2
 8000938:	fa24 f303 	lsr.w	r3, r4, r3
 800093c:	4094      	lsls	r4, r2
 800093e:	430c      	orrs	r4, r1
 8000940:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000944:	fa00 fe02 	lsl.w	lr, r0, r2
 8000948:	fa1f f78c 	uxth.w	r7, ip
 800094c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000950:	fb08 3110 	mls	r1, r8, r0, r3
 8000954:	0c23      	lsrs	r3, r4, #16
 8000956:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800095a:	fb00 f107 	mul.w	r1, r0, r7
 800095e:	4299      	cmp	r1, r3
 8000960:	d908      	bls.n	8000974 <__udivmoddi4+0x24c>
 8000962:	eb1c 0303 	adds.w	r3, ip, r3
 8000966:	f100 36ff 	add.w	r6, r0, #4294967295
 800096a:	d22c      	bcs.n	80009c6 <__udivmoddi4+0x29e>
 800096c:	4299      	cmp	r1, r3
 800096e:	d92a      	bls.n	80009c6 <__udivmoddi4+0x29e>
 8000970:	3802      	subs	r0, #2
 8000972:	4463      	add	r3, ip
 8000974:	1a5b      	subs	r3, r3, r1
 8000976:	b2a4      	uxth	r4, r4
 8000978:	fbb3 f1f8 	udiv	r1, r3, r8
 800097c:	fb08 3311 	mls	r3, r8, r1, r3
 8000980:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000984:	fb01 f307 	mul.w	r3, r1, r7
 8000988:	42a3      	cmp	r3, r4
 800098a:	d908      	bls.n	800099e <__udivmoddi4+0x276>
 800098c:	eb1c 0404 	adds.w	r4, ip, r4
 8000990:	f101 36ff 	add.w	r6, r1, #4294967295
 8000994:	d213      	bcs.n	80009be <__udivmoddi4+0x296>
 8000996:	42a3      	cmp	r3, r4
 8000998:	d911      	bls.n	80009be <__udivmoddi4+0x296>
 800099a:	3902      	subs	r1, #2
 800099c:	4464      	add	r4, ip
 800099e:	1ae4      	subs	r4, r4, r3
 80009a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009a4:	e739      	b.n	800081a <__udivmoddi4+0xf2>
 80009a6:	4604      	mov	r4, r0
 80009a8:	e6f0      	b.n	800078c <__udivmoddi4+0x64>
 80009aa:	4608      	mov	r0, r1
 80009ac:	e706      	b.n	80007bc <__udivmoddi4+0x94>
 80009ae:	45c8      	cmp	r8, r9
 80009b0:	d2ae      	bcs.n	8000910 <__udivmoddi4+0x1e8>
 80009b2:	ebb9 0e02 	subs.w	lr, r9, r2
 80009b6:	eb63 0c07 	sbc.w	ip, r3, r7
 80009ba:	3801      	subs	r0, #1
 80009bc:	e7a8      	b.n	8000910 <__udivmoddi4+0x1e8>
 80009be:	4631      	mov	r1, r6
 80009c0:	e7ed      	b.n	800099e <__udivmoddi4+0x276>
 80009c2:	4603      	mov	r3, r0
 80009c4:	e799      	b.n	80008fa <__udivmoddi4+0x1d2>
 80009c6:	4630      	mov	r0, r6
 80009c8:	e7d4      	b.n	8000974 <__udivmoddi4+0x24c>
 80009ca:	46d6      	mov	lr, sl
 80009cc:	e77f      	b.n	80008ce <__udivmoddi4+0x1a6>
 80009ce:	4463      	add	r3, ip
 80009d0:	3802      	subs	r0, #2
 80009d2:	e74d      	b.n	8000870 <__udivmoddi4+0x148>
 80009d4:	4606      	mov	r6, r0
 80009d6:	4623      	mov	r3, r4
 80009d8:	4608      	mov	r0, r1
 80009da:	e70f      	b.n	80007fc <__udivmoddi4+0xd4>
 80009dc:	3e02      	subs	r6, #2
 80009de:	4463      	add	r3, ip
 80009e0:	e730      	b.n	8000844 <__udivmoddi4+0x11c>
 80009e2:	bf00      	nop

080009e4 <__aeabi_idiv0>:
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <_ZN9InterruptC1Ev>:

// Define the vector table, it is only declared in the class declaration
Interrupt* Interrupt::ISRVectorTable[] = {0};

// Constructor
Interrupt::Interrupt(void){}
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	4a04      	ldr	r2, [pc, #16]	@ (8000a04 <_ZN9InterruptC1Ev+0x1c>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4618      	mov	r0, r3
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	08011c4c 	.word	0x08011c4c

08000a08 <_ZN9Interrupt8RegisterEiPS_>:


// Methods

void Interrupt::Register(int interruptNumber, Interrupt* intThisPtr)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
	printf("Registering interrupt for interrupt number = %d\n", interruptNumber);
 8000a12:	6879      	ldr	r1, [r7, #4]
 8000a14:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <_ZN9Interrupt8RegisterEiPS_+0x24>)
 8000a16:	f010 f87f 	bl	8010b18 <iprintf>
	ISRVectorTable[interruptNumber] = intThisPtr;
 8000a1a:	4905      	ldr	r1, [pc, #20]	@ (8000a30 <_ZN9Interrupt8RegisterEiPS_+0x28>)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	683a      	ldr	r2, [r7, #0]
 8000a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	080118bc 	.word	0x080118bc
 8000a30:	240000dc 	.word	0x240000dc

08000a34 <_ZN9Interrupt13EXTI4_WrapperEv>:

void Interrupt::EXTI4_Wrapper(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	ISRVectorTable[EXTI4_IRQn]->ISR_Handler();
 8000a38:	4b04      	ldr	r3, [pc, #16]	@ (8000a4c <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 8000a3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000a3c:	4b03      	ldr	r3, [pc, #12]	@ (8000a4c <_ZN9Interrupt13EXTI4_WrapperEv+0x18>)
 8000a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4610      	mov	r0, r2
 8000a46:	4798      	blx	r3
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	240000dc 	.word	0x240000dc

08000a50 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>:
  // - no constructor
  // - no destructor
  // - no virtual
  // - no inheritance

  VariantData* data() {
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<VariantData*>(&_content);
 8000a58:	687b      	ldr	r3, [r7, #4]
  }
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <_ZN19ArduinoJson6101_11011VariantSlot14setNextNotNullEPS0_>:

  void setNext(VariantSlot* slot) {
    _next = VariantSlotDiff(slot ? slot - this : 0);
  }

  void setNextNotNull(VariantSlot* slot) {
 8000a66:	b480      	push	{r7}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
 8000a6e:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(slot != 0);
    _next = VariantSlotDiff(slot - this);
 8000a70:	683a      	ldr	r2, [r7, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	111b      	asrs	r3, r3, #4
 8000a78:	b21a      	sxth	r2, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	815a      	strh	r2, [r3, #10]
  }
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <_ZN19ArduinoJson6101_11011VariantSlot11setOwnedKeyENS_8not_nullIPKcEE>:

  void setOwnedKey(not_null<const char*> k) {
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
 8000a92:	6039      	str	r1, [r7, #0]
    _flags |= KEY_IS_OWNED;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	7a1b      	ldrb	r3, [r3, #8]
 8000a98:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	721a      	strb	r2, [r3, #8]
    _key = k.get();
 8000aa2:	463b      	mov	r3, r7
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f001 f813 	bl	8001ad0 <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>
 8000aaa:	4602      	mov	r2, r0
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	60da      	str	r2, [r3, #12]
  }
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <_ZN19ArduinoJson6101_11011VariantSlot5clearEv>:

  bool ownsKey() const {
    return (_flags & KEY_IS_OWNED) != 0;
  }

  void clear() {
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
    _next = 0;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	815a      	strh	r2, [r3, #10]
    _flags = 0;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	721a      	strb	r2, [r3, #8]
    _key = 0;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  }
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <_ZN19ArduinoJson6101_11010addPaddingEj>:
  const size_t mask = sizeof(void *) - 1;
  size_t addr = reinterpret_cast<size_t>(ptr);
  return (addr & mask) == 0;
}

inline size_t addPadding(size_t bytes) {
 8000ade:	b480      	push	{r7}
 8000ae0:	b085      	sub	sp, #20
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
  const size_t mask = sizeof(void *) - 1;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	60fb      	str	r3, [r7, #12]
  return (bytes + mask) & ~mask;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	3303      	adds	r3, #3
 8000aee:	f023 0303 	bic.w	r3, r3, #3
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3714      	adds	r7, #20
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj>:
//               ^              ^
//             _left          _right

class MemoryPool {
 public:
  MemoryPool(char* buf, size_t capa)
 8000afe:	b480      	push	{r7}
 8000b00:	b085      	sub	sp, #20
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	60f8      	str	r0, [r7, #12]
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
      : _begin(buf),
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	68ba      	ldr	r2, [r7, #8]
 8000b0e:	601a      	str	r2, [r3, #0]
        _left(buf),
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	605a      	str	r2, [r3, #4]
        _right(buf ? buf + capa : 0),
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d003      	beq.n	8000b24 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x26>
 8000b1c:	68ba      	ldr	r2, [r7, #8]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	e000      	b.n	8000b26 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x28>
 8000b24:	2300      	movs	r3, #0
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	6093      	str	r3, [r2, #8]
        _end(buf ? buf + capa : 0) {
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d003      	beq.n	8000b38 <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x3a>
 8000b30:	68ba      	ldr	r2, [r7, #8]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	e000      	b.n	8000b3a <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj+0x3c>
 8000b38:	2300      	movs	r3, #0
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	60d3      	str	r3, [r2, #12]
    ARDUINOJSON_ASSERT(isAligned(_begin));
    ARDUINOJSON_ASSERT(isAligned(_right));
    ARDUINOJSON_ASSERT(isAligned(_end));
  }
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	4618      	mov	r0, r3
 8000b42:	3714      	adds	r7, #20
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <_ZN19ArduinoJson6101_11010MemoryPool6bufferEv>:

  void* buffer() {
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
    return _begin;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
  }
 8000b58:	4618      	mov	r0, r3
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <_ZN19ArduinoJson6101_11010MemoryPool12allocVariantEv>:

  size_t size() const {
    return size_t(_left - _begin + _end - _right);
  }

  VariantSlot* allocVariant() {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
    return allocRight<VariantSlot>();
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f000 ffbb 	bl	8001ae8 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightINS_11VariantSlotEEEPT_v>
 8000b72:	4603      	mov	r3, r0
  }
 8000b74:	4618      	mov	r0, r3
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <_ZN19ArduinoJson6101_11010MemoryPool21allocExpandableStringEv>:
    _left += n;
    checkInvariants();
    return s;
  }

  StringSlot allocExpandableString() {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
    StringSlot s;
    s.value = _left;
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685a      	ldr	r2, [r3, #4]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	601a      	str	r2, [r3, #0]
    s.size = size_t(_right - _left);
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	689a      	ldr	r2, [r3, #8]
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	1ad3      	subs	r3, r2, r3
 8000b98:	461a      	mov	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	605a      	str	r2, [r3, #4]
    _left = _right;
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	689a      	ldr	r2, [r3, #8]
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
    checkInvariants();
 8000ba6:	6838      	ldr	r0, [r7, #0]
 8000ba8:	f000 f864 	bl	8000c74 <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>
    return s;
 8000bac:	bf00      	nop
  }
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <_ZN19ArduinoJson6101_11010MemoryPool12freezeStringERNS_10StringSlotEj>:

  void freezeString(StringSlot& s, size_t newSize) {
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b084      	sub	sp, #16
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	60f8      	str	r0, [r7, #12]
 8000bbe:	60b9      	str	r1, [r7, #8]
 8000bc0:	607a      	str	r2, [r7, #4]
    _left -= (s.size - newSize);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	685a      	ldr	r2, [r3, #4]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	1acb      	subs	r3, r1, r3
 8000bce:	441a      	add	r2, r3
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	605a      	str	r2, [r3, #4]
    s.size = newSize;
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	605a      	str	r2, [r3, #4]
    checkInvariants();
 8000bda:	68f8      	ldr	r0, [r7, #12]
 8000bdc:	f000 f84a 	bl	8000c74 <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>
  }
 8000be0:	bf00      	nop
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <_ZN19ArduinoJson6101_11010MemoryPool5clearEv>:

  void clear() {
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
    _left = _begin;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	605a      	str	r2, [r3, #4]
    _right = _end;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	68da      	ldr	r2, [r3, #12]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
  }
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <_ZNK19ArduinoJson6101_11010MemoryPool8canAllocEj>:

  bool canAlloc(size_t bytes) const {
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
    return _left + bytes <= _right;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	685a      	ldr	r2, [r3, #4]
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	441a      	add	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	bf94      	ite	ls
 8000c26:	2301      	movls	r3, #1
 8000c28:	2300      	movhi	r3, #0
 8000c2a:	b2db      	uxtb	r3, r3
  }
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj>:
  template <typename T>
  T* allocRight() {
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
  }

  void* allocRight(size_t bytes) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
    if (!canAlloc(bytes)) return 0;
 8000c42:	6839      	ldr	r1, [r7, #0]
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff ffe1 	bl	8000c0c <_ZNK19ArduinoJson6101_11010MemoryPool8canAllocEj>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	f083 0301 	eor.w	r3, r3, #1
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj+0x22>
 8000c56:	2300      	movs	r3, #0
 8000c58:	e008      	b.n	8000c6c <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj+0x34>
    _right -= bytes;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	689a      	ldr	r2, [r3, #8]
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	425b      	negs	r3, r3
 8000c62:	441a      	add	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	609a      	str	r2, [r3, #8]
    return _right;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	689b      	ldr	r3, [r3, #8]
  }
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <_ZN19ArduinoJson6101_11010MemoryPool15checkInvariantsEv>:
 private:
  StringSlot* allocStringSlot() {
    return allocRight<StringSlot>();
  }

  void checkInvariants() {
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(_begin <= _left);
    ARDUINOJSON_ASSERT(_left <= _right);
    ARDUINOJSON_ASSERT(_right <= _end);
    ARDUINOJSON_ASSERT(isAligned(_right));
  }
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>:
  template <typename TAdaptedString>
  void remove(TAdaptedString key) {
    if (isObject()) _content.asCollection.remove(key);
  }

  void setBoolean(bool value) {
 8000c88:	b5b0      	push	{r4, r5, r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	70fb      	strb	r3, [r7, #3]
    setType(VALUE_IS_BOOLEAN);
 8000c94:	2105      	movs	r1, #5
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f000 f886 	bl	8000da8 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = static_cast<UInt>(value);
 8000c9c:	78fb      	ldrb	r3, [r7, #3]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	461c      	mov	r4, r3
 8000ca2:	4615      	mov	r5, r2
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	e9c3 4500 	strd	r4, r5, [r3]
  }
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bdb0      	pop	{r4, r5, r7, pc}

08000cb2 <_ZN19ArduinoJson6101_11011VariantData8setFloatEd>:

  void setFloat(Float value) {
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b084      	sub	sp, #16
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	60f8      	str	r0, [r7, #12]
 8000cba:	ed87 0b00 	vstr	d0, [r7]
    setType(VALUE_IS_FLOAT);
 8000cbe:	2108      	movs	r1, #8
 8000cc0:	68f8      	ldr	r0, [r7, #12]
 8000cc2:	f000 f871 	bl	8000da8 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asFloat = value;
 8000cc6:	68f9      	ldr	r1, [r7, #12]
 8000cc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ccc:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8000cd0:	bf00      	nop
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <_ZN19ArduinoJson6101_11011VariantData18setPositiveIntegerEy>:
    } else {
      setNegativeInteger(~static_cast<UInt>(value) + 1);
    }
  }

  void setPositiveInteger(UInt value) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	e9c7 2300 	strd	r2, r3, [r7]
    setType(VALUE_IS_POSITIVE_INTEGER);
 8000ce4:	2106      	movs	r1, #6
 8000ce6:	68f8      	ldr	r0, [r7, #12]
 8000ce8:	f000 f85e 	bl	8000da8 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = value;
 8000cec:	68f9      	ldr	r1, [r7, #12]
 8000cee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cf2:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8000cf6:	bf00      	nop
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <_ZN19ArduinoJson6101_11011VariantData18setNegativeIntegerEy>:

  void setNegativeInteger(UInt value) {
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b084      	sub	sp, #16
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	60f8      	str	r0, [r7, #12]
 8000d06:	e9c7 2300 	strd	r2, r3, [r7]
    setType(VALUE_IS_NEGATIVE_INTEGER);
 8000d0a:	2107      	movs	r1, #7
 8000d0c:	68f8      	ldr	r0, [r7, #12]
 8000d0e:	f000 f84b 	bl	8000da8 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asInteger = value;
 8000d12:	68f9      	ldr	r1, [r7, #12]
 8000d14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d18:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <_ZN19ArduinoJson6101_11011VariantData7setNullEv>:
    } else {
      setType(VALUE_IS_NULL);
    }
  }

  void setNull() {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_NULL);
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f000 f83a 	bl	8000da8 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
  }
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <_ZN19ArduinoJson6101_11011VariantData14setOwnedStringENS_8not_nullIPKcEE>:

  void setOwnedString(not_null<const char *> s) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
    setType(VALUE_IS_OWNED_STRING);
 8000d46:	2104      	movs	r1, #4
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f000 f82d 	bl	8000da8 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asString = s.get();
 8000d4e:	463b      	mov	r3, r7
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 febd 	bl	8001ad0 <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>
 8000d56:	4602      	mov	r2, r0
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	601a      	str	r2, [r3, #0]
  }
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <_ZN19ArduinoJson6101_11011VariantData7toArrayEv>:
  void setUnsignedInteger(UInt value) {
    setType(VALUE_IS_POSITIVE_INTEGER);
    _content.asInteger = static_cast<UInt>(value);
  }

  CollectionData &toArray() {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_ARRAY);
 8000d6c:	2140      	movs	r1, #64	@ 0x40
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f000 f81a 	bl	8000da8 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asCollection.clear();
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f8d5 	bl	8000f26 <_ZN19ArduinoJson6101_11014CollectionData5clearEv>
    return _content.asCollection;
 8000d7c:	687b      	ldr	r3, [r7, #4]
  }
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <_ZN19ArduinoJson6101_11011VariantData8toObjectEv>:

  CollectionData &toObject() {
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_OBJECT);
 8000d8e:	2120      	movs	r1, #32
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f000 f809 	bl	8000da8 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>
    _content.asCollection.clear();
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f000 f8c4 	bl	8000f26 <_ZN19ArduinoJson6101_11014CollectionData5clearEv>
    return _content.asCollection;
 8000d9e:	687b      	ldr	r3, [r7, #4]
  }
 8000da0:	4618      	mov	r0, r3
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <_ZN19ArduinoJson6101_11011VariantData7setTypeEh>:
 private:
  uint8_t type() const {
    return _flags & VALUE_MASK;
  }

  void setType(uint8_t t) {
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	460b      	mov	r3, r1
 8000db2:	70fb      	strb	r3, [r7, #3]
    _flags &= KEY_IS_OWNED;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	7a1b      	ldrb	r3, [r3, #8]
 8000db8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	721a      	strb	r2, [r3, #8]
    _flags |= t;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	7a1a      	ldrb	r2, [r3, #8]
 8000dc6:	78fb      	ldrb	r3, [r7, #3]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	721a      	strb	r2, [r3, #8]
  }
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <_ZN19ArduinoJson6101_1108slotDataEPNS_11VariantSlotE>:
    var = var->next();
  }
  return n;
}

inline VariantData* slotData(VariantSlot* slot) {
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<VariantData*>(slot);
 8000de4:	687b      	ldr	r3, [r7, #4]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <_ZN19ArduinoJson6101_11012JsonDocument5clearEv>:
  template <typename T>
  typename VariantConstAs<T>::type as() const {
    return getVariant().template as<T>();
  }

  void clear() {
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
    _pool.clear();
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fef3 	bl	8000be8 <_ZN19ArduinoJson6101_11010MemoryPool5clearEv>
    _data.setNull();
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3310      	adds	r3, #16
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ff8c 	bl	8000d24 <_ZN19ArduinoJson6101_11011VariantData7setNullEv>
  }
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>:
    clear();
    return getVariant().template to<T>();
  }

  // for internal use only
  MemoryPool& memoryPool() {
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
    return _pool;
 8000e1c:	687b      	ldr	r3, [r7, #4]
  }
 8000e1e:	4618      	mov	r0, r3
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <_ZN19ArduinoJson6101_11012JsonDocument4dataEv>:

  VariantData& data() {
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
    return _data;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	3310      	adds	r3, #16
  }
 8000e36:	4618      	mov	r0, r3
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <_ZN19ArduinoJson6101_11012JsonDocumentC1ENS_10MemoryPoolE>:
      const TString& key) {
    _data.remove(adaptString(key));
  }

 protected:
  JsonDocument(MemoryPool pool) : _pool(pool) {
 8000e42:	b084      	sub	sp, #16
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	f107 001c 	add.w	r0, r7, #28
 8000e50:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	461c      	mov	r4, r3
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    _data.setNull();
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3310      	adds	r3, #16
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff5c 	bl	8000d24 <_ZN19ArduinoJson6101_11011VariantData7setNullEv>
  }
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000e78:	b004      	add	sp, #16
 8000e7a:	4770      	bx	lr

08000e7c <_ZN19ArduinoJson6101_11016DefaultAllocator8allocateEj>:
#include <stdlib.h>  // malloc, free

namespace ARDUINOJSON_NAMESPACE {

struct DefaultAllocator {
  void* allocate(size_t n) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
    return malloc(n);
 8000e86:	6838      	ldr	r0, [r7, #0]
 8000e88:	f00f fcc6 	bl	8010818 <malloc>
 8000e8c:	4603      	mov	r3, r0
  }
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <_ZN19ArduinoJson6101_11016DefaultAllocator10deallocateEPv>:

  void deallocate(void* p) {
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	6039      	str	r1, [r7, #0]
    free(p);
 8000ea0:	6838      	ldr	r0, [r7, #0]
 8000ea2:	f00f fcc1 	bl	8010828 <free>
  }
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>:
#include "../Variant/VariantData.hpp"
#include "CollectionData.hpp"

namespace ARDUINOJSON_NAMESPACE {

inline VariantSlot* CollectionData::addSlot(MemoryPool* pool) {
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b084      	sub	sp, #16
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = pool->allocVariant();
 8000eb8:	6838      	ldr	r0, [r7, #0]
 8000eba:	f7ff fe53 	bl	8000b64 <_ZN19ArduinoJson6101_11010MemoryPool12allocVariantEv>
 8000ebe:	60f8      	str	r0, [r7, #12]
  if (!slot) return 0;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d101      	bne.n	8000eca <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x1c>
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e017      	b.n	8000efa <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x4c>

  if (_tail) {
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d009      	beq.n	8000ee6 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x38>
    _tail->setNextNotNull(slot);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	68f9      	ldr	r1, [r7, #12]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fdc4 	bl	8000a66 <_ZN19ArduinoJson6101_11011VariantSlot14setNextNotNullEPS0_>
    _tail = slot;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	68fa      	ldr	r2, [r7, #12]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	e005      	b.n	8000ef2 <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE+0x44>
  } else {
    _head = slot;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	68fa      	ldr	r2, [r7, #12]
 8000eea:	601a      	str	r2, [r3, #0]
    _tail = slot;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	605a      	str	r2, [r3, #4]
  }

  slot->clear();
 8000ef2:	68f8      	ldr	r0, [r7, #12]
 8000ef4:	f7ff fde0 	bl	8000ab8 <_ZN19ArduinoJson6101_11011VariantSlot5clearEv>
  return slot;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <_ZN19ArduinoJson6101_11014CollectionData3addEPNS_10MemoryPoolE>:

inline VariantData* CollectionData::add(MemoryPool* pool) {
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
 8000f0a:	6039      	str	r1, [r7, #0]
  return slotData(addSlot(pool));
 8000f0c:	6839      	ldr	r1, [r7, #0]
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ffcd 	bl	8000eae <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>
 8000f14:	4603      	mov	r3, r0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ff60 	bl	8000ddc <_ZN19ArduinoJson6101_1108slotDataEPNS_11VariantSlotE>
 8000f1c:	4603      	mov	r3, r0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <_ZN19ArduinoJson6101_11014CollectionData5clearEv>:
  VariantSlot* slot = addSlot(pool);
  if (!slotSetKey(slot, key, pool)) return 0;
  return slot->data();
}

inline void CollectionData::clear() {
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  _head = 0;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
  _tail = 0;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	605a      	str	r2, [r3, #4]
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <_ZN19ArduinoJson6101_1107isdigitEc>:

#pragma once

namespace ARDUINOJSON_NAMESPACE {

inline bool isdigit(char c) {
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	71fb      	strb	r3, [r7, #7]
  return '0' <= c && c <= '9';
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	2b2f      	cmp	r3, #47	@ 0x2f
 8000f54:	d904      	bls.n	8000f60 <_ZN19ArduinoJson6101_1107isdigitEc+0x1a>
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	2b39      	cmp	r3, #57	@ 0x39
 8000f5a:	d801      	bhi.n	8000f60 <_ZN19ArduinoJson6101_1107isdigitEc+0x1a>
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e000      	b.n	8000f62 <_ZN19ArduinoJson6101_1107isdigitEc+0x1c>
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <_ZN19ArduinoJson6101_11013StringBuilderC1EPNS_10MemoryPoolE>:

namespace ARDUINOJSON_NAMESPACE {

class StringBuilder {
 public:
  explicit StringBuilder(MemoryPool* parent) : _parent(parent), _size(0) {
 8000f6e:	b590      	push	{r4, r7, lr}
 8000f70:	b085      	sub	sp, #20
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	60f8      	str	r0, [r7, #12]
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2200      	movs	r2, #0
 8000f82:	605a      	str	r2, [r3, #4]
    _slot = _parent->allocExpandableString();
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	68fc      	ldr	r4, [r7, #12]
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fdf4 	bl	8000b7c <_ZN19ArduinoJson6101_11010MemoryPool21allocExpandableStringEv>
 8000f94:	f104 0308 	add.w	r3, r4, #8
 8000f98:	463a      	mov	r2, r7
 8000f9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f9e:	e883 0003 	stmia.w	r3, {r0, r1}
  }
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd90      	pop	{r4, r7, pc}

08000fac <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>:

  void append(const char* s, size_t n) {
    while (n-- > 0) append(*s++);
  }

  void append(char c) {
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	70fb      	strb	r3, [r7, #3]
    if (!_slot.value) return;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d014      	beq.n	8000fea <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x3e>

    if (_size >= _slot.size) {
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685a      	ldr	r2, [r3, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d303      	bcc.n	8000fd4 <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x28>
      _slot.value = 0;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
      return;
 8000fd2:	e00b      	b.n	8000fec <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x40>
    }

    _slot.value[_size++] = c;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689a      	ldr	r2, [r3, #8]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	1c58      	adds	r0, r3, #1
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	6048      	str	r0, [r1, #4]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	78fa      	ldrb	r2, [r7, #3]
 8000fe6:	701a      	strb	r2, [r3, #0]
 8000fe8:	e000      	b.n	8000fec <_ZN19ArduinoJson6101_11013StringBuilder6appendEc+0x40>
    if (!_slot.value) return;
 8000fea:	bf00      	nop
  }
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>:

  char* complete() {
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
    append('\0');
 8000ffe:	2100      	movs	r1, #0
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff ffd3 	bl	8000fac <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
    if (_slot.value) {
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d009      	beq.n	8001022 <_ZN19ArduinoJson6101_11013StringBuilder8completeEv+0x2c>
      _parent->freezeString(_slot, _size);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6818      	ldr	r0, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f103 0108 	add.w	r1, r3, #8
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	461a      	mov	r2, r3
 800101e:	f7ff fdca 	bl	8000bb6 <_ZN19ArduinoJson6101_11010MemoryPool12freezeStringERNS_10StringSlotEj>
    }
    return _slot.value;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689b      	ldr	r3, [r3, #8]
  }
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <_ZN19ArduinoJson6101_11012StringCopierC1EPNS_10MemoryPoolE>:

class StringCopier {
 public:
  typedef ARDUINOJSON_NAMESPACE::StringBuilder StringBuilder;

  StringCopier(MemoryPool* pool) : _pool(pool) {}
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	6039      	str	r1, [r7, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>:

  StringBuilder startString() {
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
    return StringBuilder(_pool);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4619      	mov	r1, r3
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff ff86 	bl	8000f6e <_ZN19ArduinoJson6101_11013StringBuilderC1EPNS_10MemoryPoolE>
  }
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc>:

class UnsafeCharPointerReader {
  const char* _ptr;

 public:
  explicit UnsafeCharPointerReader(const char* ptr)
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
      : _ptr(ptr ? ptr : reinterpret_cast<const char*>("")) {}
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x14>
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	e000      	b.n	8001082 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x16>
 8001080:	4b04      	ldr	r3, [pc, #16]	@ (8001094 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc+0x28>)
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4618      	mov	r0, r3
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	080118f0 	.word	0x080118f0

08001098 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReader4readEv>:

  char read() {
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
    return static_cast<char>(*_ptr++);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	1c59      	adds	r1, r3, #1
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	6011      	str	r1, [r2, #0]
 80010aa:	781b      	ldrb	r3, [r3, #0]
  }
 80010ac:	4618      	mov	r0, r3
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <_ZNK19ArduinoJson6101_11023UnsafeCharPointerReader5endedEv>:

  bool ended() const {
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
    // we cannot know, that's why it's unsafe
    return false;
 80010c0:	2300      	movs	r3, #0
  }
 80010c2:	4618      	mov	r0, r3
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <_ZNK19ArduinoJson6101_11020DeserializationError14safeBoolHelperEv>:
namespace ARDUINOJSON_NAMESPACE {

class DeserializationError {
  // safe bool idiom
  typedef void (DeserializationError::*bool_type)() const;
  void safeBoolHelper() const {}
 80010ce:	b480      	push	{r7}
 80010d0:	b083      	sub	sp, #12
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>:
    NotSupported,
    TooDeep
  };

  DeserializationError() {}
  DeserializationError(Code c) : _code(c) {}
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	460b      	mov	r3, r1
 80010ec:	70fb      	strb	r3, [r7, #3]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	78fa      	ldrb	r2, [r7, #3]
 80010f2:	701a      	strb	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4618      	mov	r0, r3
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>:
  friend bool operator!=(Code lhs, const DeserializationError& rhs) {
    return lhs != rhs._code;
  }

  // Behaves like a bool
  operator bool_type() const {
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
    return _code != Ok ? &DeserializationError::safeBoolHelper : 0;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d106      	bne.n	8001124 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x20>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	e005      	b.n	8001130 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x2c>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a05      	ldr	r2, [pc, #20]	@ (800113c <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv+0x38>)
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	605a      	str	r2, [r3, #4]
  }
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	080010cf 	.word	0x080010cf

08001140 <_ZNK19ArduinoJson6101_11020DeserializationError4codeEv>:
  friend bool operator!=(const DeserializationError& err, bool value) {
    return static_cast<bool>(err) != value;
  }

  // Returns internal enum, useful for switch statement
  Code code() const {
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
    return _code;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	781b      	ldrb	r3, [r3, #0]
  }
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv>:

  const char* c_str() const {
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
    switch (_code) {
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b05      	cmp	r3, #5
 8001166:	d81b      	bhi.n	80011a0 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x48>
 8001168:	a201      	add	r2, pc, #4	@ (adr r2, 8001170 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x18>)
 800116a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800116e:	bf00      	nop
 8001170:	08001189 	.word	0x08001189
 8001174:	08001199 	.word	0x08001199
 8001178:	08001195 	.word	0x08001195
 800117c:	08001191 	.word	0x08001191
 8001180:	0800119d 	.word	0x0800119d
 8001184:	0800118d 	.word	0x0800118d
      case Ok:
        return "Ok";
 8001188:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x58>)
 800118a:	e00a      	b.n	80011a2 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case TooDeep:
        return "TooDeep";
 800118c:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x5c>)
 800118e:	e008      	b.n	80011a2 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case NoMemory:
        return "NoMemory";
 8001190:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x60>)
 8001192:	e006      	b.n	80011a2 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case InvalidInput:
        return "InvalidInput";
 8001194:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x64>)
 8001196:	e004      	b.n	80011a2 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case IncompleteInput:
        return "IncompleteInput";
 8001198:	4b09      	ldr	r3, [pc, #36]	@ (80011c0 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x68>)
 800119a:	e002      	b.n	80011a2 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      case NotSupported:
        return "NotSupported";
 800119c:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x6c>)
 800119e:	e000      	b.n	80011a2 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x4a>
      default:
        return "???";
 80011a0:	4b09      	ldr	r3, [pc, #36]	@ (80011c8 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv+0x70>)
    }
  }
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	080118f4 	.word	0x080118f4
 80011b4:	080118f8 	.word	0x080118f8
 80011b8:	08011900 	.word	0x08011900
 80011bc:	0801190c 	.word	0x0801190c
 80011c0:	0801191c 	.word	0x0801191c
 80011c4:	0801192c 	.word	0x0801192c
 80011c8:	0801193c 	.word	0x0801193c

080011cc <_ZN19ArduinoJson6101_11012NestingLimitC1Ev>:
#include "../Configuration.hpp"

namespace ARDUINOJSON_NAMESPACE {

struct NestingLimit {
  NestingLimit() : value(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2232      	movs	r2, #50	@ 0x32
 80011d8:	701a      	strb	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4618      	mov	r0, r3
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc>:
    }
    return p[0];
  }

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
    const char *p = escapeTable(true);
 80011f2:	2001      	movs	r0, #1
 80011f4:	f000 f818 	bl	8001228 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb>
 80011f8:	60f8      	str	r0, [r7, #12]
    for (;;) {
      if (p[0] == '\0') return c;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x1e>
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	e00c      	b.n	8001220 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x38>
      if (p[0] == c) return p[1];
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	79fa      	ldrb	r2, [r7, #7]
 800120c:	429a      	cmp	r2, r3
 800120e:	d103      	bne.n	8001218 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x30>
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	3301      	adds	r3, #1
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	e003      	b.n	8001220 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x38>
      p += 2;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	3302      	adds	r3, #2
 800121c:	60fb      	str	r3, [r7, #12]
      if (p[0] == '\0') return c;
 800121e:	e7ec      	b.n	80011fa <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc+0x12>
    }
  }
 8001220:	4618      	mov	r0, r3
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb>:

 private:
  static const char *escapeTable(bool excludeIdenticals) {
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
    return &"\"\"\\\\b\bf\fn\nr\rt\t"[excludeIdenticals ? 4 : 0];
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x14>
 8001238:	2304      	movs	r3, #4
 800123a:	e000      	b.n	800123e <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x16>
 800123c:	2300      	movs	r3, #0
 800123e:	4a04      	ldr	r2, [pc, #16]	@ (8001250 <_ZN19ArduinoJson6101_11014EscapeSequence11escapeTableEb+0x28>)
 8001240:	4413      	add	r3, r2
  }
 8001242:	4618      	mov	r0, r3
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	08011940 	.word	0x08011940

08001254 <EXTI4_IRQHandler>:
#include "interrupt.h"

extern "C" {

	void EXTI4_IRQHandler()
	{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
		// Chip select pin is PC_4 (EXTI4 PIN 4)
		if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 8001258:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800125c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001260:	f003 0310 	and.w	r3, r3, #16
 8001264:	2b00      	cmp	r3, #0
 8001266:	bf14      	ite	ne
 8001268:	2301      	movne	r3, #1
 800126a:	2300      	moveq	r3, #0
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d006      	beq.n	8001280 <EXTI4_IRQHandler+0x2c>
		{
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8001272:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001276:	2210      	movs	r2, #16
 8001278:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
		Interrupt::EXTI4_Wrapper();
 800127c:	f7ff fbda 	bl	8000a34 <_ZN9Interrupt13EXTI4_WrapperEv>
		}
	}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}

08001284 <__io_putchar>:


// re-target printf to UART1 by redeclaring week function in syscalls.c
extern "C" {
	int __io_putchar(int ch)
	{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800128c:	1d39      	adds	r1, r7, #4
 800128e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001292:	2201      	movs	r2, #1
 8001294:	4803      	ldr	r0, [pc, #12]	@ (80012a4 <__io_putchar+0x20>)
 8001296:	f00a fe06 	bl	800bea6 <HAL_UART_Transmit>
	  return ch;
 800129a:	687b      	ldr	r3, [r7, #4]
	}
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	2400049c 	.word	0x2400049c

080012a8 <_Z14readJsonConfigv>:
}



void readJsonConfig()
{
 80012a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012ac:	b08d      	sub	sp, #52	@ 0x34
 80012ae:	af00      	add	r7, sp, #0
	uint32_t bytesread; // bytes read count


    printf("\n1. Reading JSON configuration file\n");
 80012b0:	4852      	ldr	r0, [pc, #328]	@ (80013fc <_Z14readJsonConfigv+0x154>)
 80012b2:	f00f fca1 	bl	8010bf8 <puts>

    // Try to mount the file system
    printf("	Mounting the file system... \n");
 80012b6:	4852      	ldr	r0, [pc, #328]	@ (8001400 <_Z14readJsonConfigv+0x158>)
 80012b8:	f00f fc9e 	bl	8010bf8 <puts>
    if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 80012bc:	2200      	movs	r2, #0
 80012be:	4951      	ldr	r1, [pc, #324]	@ (8001404 <_Z14readJsonConfigv+0x15c>)
 80012c0:	4851      	ldr	r0, [pc, #324]	@ (8001408 <_Z14readJsonConfigv+0x160>)
 80012c2:	f00e fcaf 	bl	800fc24 <f_mount>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	bf14      	ite	ne
 80012cc:	2301      	movne	r3, #1
 80012ce:	2300      	moveq	r3, #0
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d005      	beq.n	80012e2 <_Z14readJsonConfigv+0x3a>
	{
    	printf("	Failed to mount SD card\n\r");
 80012d6:	484d      	ldr	r0, [pc, #308]	@ (800140c <_Z14readJsonConfigv+0x164>)
 80012d8:	f00f fc1e 	bl	8010b18 <iprintf>
    	Error_Handler();
 80012dc:	f000 fbec 	bl	8001ab8 <Error_Handler>
			}

			f_close(&SDFile);
		}
    }
}
 80012e0:	e087      	b.n	80013f2 <_Z14readJsonConfigv+0x14a>
		if(f_open(&SDFile, "config.txt", FA_READ) != FR_OK)
 80012e2:	2201      	movs	r2, #1
 80012e4:	494a      	ldr	r1, [pc, #296]	@ (8001410 <_Z14readJsonConfigv+0x168>)
 80012e6:	484b      	ldr	r0, [pc, #300]	@ (8001414 <_Z14readJsonConfigv+0x16c>)
 80012e8:	f00e fce2 	bl	800fcb0 <f_open>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	bf14      	ite	ne
 80012f2:	2301      	movne	r3, #1
 80012f4:	2300      	moveq	r3, #0
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d005      	beq.n	8001308 <_Z14readJsonConfigv+0x60>
			printf("	Failed to open JSON config file\n");
 80012fc:	4846      	ldr	r0, [pc, #280]	@ (8001418 <_Z14readJsonConfigv+0x170>)
 80012fe:	f00f fc7b 	bl	8010bf8 <puts>
			Error_Handler();
 8001302:	f000 fbd9 	bl	8001ab8 <Error_Handler>
}
 8001306:	e074      	b.n	80013f2 <_Z14readJsonConfigv+0x14a>
		}
 8001308:	466b      	mov	r3, sp
 800130a:	461e      	mov	r6, r3
			int32_t length = f_size(&SDFile);
 800130c:	4b41      	ldr	r3, [pc, #260]	@ (8001414 <_Z14readJsonConfigv+0x16c>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	62bb      	str	r3, [r7, #40]	@ 0x28
			printf("	JSON config file lenght = %2ld\n", length);
 8001312:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001314:	4841      	ldr	r0, [pc, #260]	@ (800141c <_Z14readJsonConfigv+0x174>)
 8001316:	f00f fbff 	bl	8010b18 <iprintf>
			char rtext[length];
 800131a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800131c:	1e4b      	subs	r3, r1, #1
 800131e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001320:	460a      	mov	r2, r1
 8001322:	2300      	movs	r3, #0
 8001324:	4690      	mov	r8, r2
 8001326:	4699      	mov	r9, r3
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	f04f 0300 	mov.w	r3, #0
 8001330:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001334:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001338:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800133c:	460a      	mov	r2, r1
 800133e:	2300      	movs	r3, #0
 8001340:	4614      	mov	r4, r2
 8001342:	461d      	mov	r5, r3
 8001344:	f04f 0200 	mov.w	r2, #0
 8001348:	f04f 0300 	mov.w	r3, #0
 800134c:	00eb      	lsls	r3, r5, #3
 800134e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001352:	00e2      	lsls	r2, r4, #3
 8001354:	460b      	mov	r3, r1
 8001356:	3307      	adds	r3, #7
 8001358:	08db      	lsrs	r3, r3, #3
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	ebad 0d03 	sub.w	sp, sp, r3
 8001360:	466b      	mov	r3, sp
 8001362:	3300      	adds	r3, #0
 8001364:	623b      	str	r3, [r7, #32]
			if(f_read(&SDFile, rtext, length, (UINT *)&bytesread) != FR_OK)
 8001366:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	6a39      	ldr	r1, [r7, #32]
 800136c:	4829      	ldr	r0, [pc, #164]	@ (8001414 <_Z14readJsonConfigv+0x16c>)
 800136e:	f00e fe59 	bl	8010024 <f_read>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	bf14      	ite	ne
 8001378:	2301      	movne	r3, #1
 800137a:	2300      	moveq	r3, #0
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <_Z14readJsonConfigv+0xe2>
				printf("	JSON config file read FAILURE\n");
 8001382:	4827      	ldr	r0, [pc, #156]	@ (8001420 <_Z14readJsonConfigv+0x178>)
 8001384:	f00f fc38 	bl	8010bf8 <puts>
 8001388:	e02f      	b.n	80013ea <_Z14readJsonConfigv+0x142>
				printf("	JSON config file read SUCCESS!\n");
 800138a:	4826      	ldr	r0, [pc, #152]	@ (8001424 <_Z14readJsonConfigv+0x17c>)
 800138c:	f00f fc34 	bl	8010bf8 <puts>
				strJson.reserve(length + 1);
 8001390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001392:	3301      	adds	r3, #1
 8001394:	4619      	mov	r1, r3
 8001396:	4824      	ldr	r0, [pc, #144]	@ (8001428 <_Z14readJsonConfigv+0x180>)
 8001398:	f00f f997 	bl	80106ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
			    for (int i = 0; i < length; i++) {
 800139c:	2300      	movs	r3, #0
 800139e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013a0:	e017      	b.n	80013d2 <_Z14readJsonConfigv+0x12a>
			    	strJson = strJson + rtext[i];
 80013a2:	6a3a      	ldr	r2, [r7, #32]
 80013a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013a6:	4413      	add	r3, r2
 80013a8:	781a      	ldrb	r2, [r3, #0]
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	491e      	ldr	r1, [pc, #120]	@ (8001428 <_Z14readJsonConfigv+0x180>)
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 fbe6 	bl	8001b82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>
 80013b6:	f107 0308 	add.w	r3, r7, #8
 80013ba:	4619      	mov	r1, r3
 80013bc:	481a      	ldr	r0, [pc, #104]	@ (8001428 <_Z14readJsonConfigv+0x180>)
 80013be:	f00f f915 	bl	80105ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	4618      	mov	r0, r3
 80013c8:	f00f f90a 	bl	80105e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			    for (int i = 0; i < length; i++) {
 80013cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013ce:	3301      	adds	r3, #1
 80013d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013d6:	429a      	cmp	r2, r3
 80013d8:	dbe3      	blt.n	80013a2 <_Z14readJsonConfigv+0xfa>
			    printf("\n%s\n", strJson.c_str());
 80013da:	4813      	ldr	r0, [pc, #76]	@ (8001428 <_Z14readJsonConfigv+0x180>)
 80013dc:	f00f f9d8 	bl	8010790 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80013e0:	4603      	mov	r3, r0
 80013e2:	4619      	mov	r1, r3
 80013e4:	4811      	ldr	r0, [pc, #68]	@ (800142c <_Z14readJsonConfigv+0x184>)
 80013e6:	f00f fb97 	bl	8010b18 <iprintf>
			f_close(&SDFile);
 80013ea:	480a      	ldr	r0, [pc, #40]	@ (8001414 <_Z14readJsonConfigv+0x16c>)
 80013ec:	f00e ffd7 	bl	801039e <f_close>
 80013f0:	46b5      	mov	sp, r6
}
 80013f2:	bf00      	nop
 80013f4:	3734      	adds	r7, #52	@ 0x34
 80013f6:	46bd      	mov	sp, r7
 80013f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013fc:	08011950 	.word	0x08011950
 8001400:	08011974 	.word	0x08011974
 8001404:	24000590 	.word	0x24000590
 8001408:	24000594 	.word	0x24000594
 800140c:	08011994 	.word	0x08011994
 8001410:	080119b0 	.word	0x080119b0
 8001414:	240007c4 	.word	0x240007c4
 8001418:	080119bc 	.word	0x080119bc
 800141c:	080119e0 	.word	0x080119e0
 8001420:	08011a04 	.word	0x08011a04
 8001424:	08011a24 	.word	0x08011a24
 8001428:	24000330 	.word	0x24000330
 800142c:	08011a44 	.word	0x08011a44

08001430 <_Z15deserialiseJSONv>:


void deserialiseJSON()
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
    printf("\n3. Parsing json configuration file\n");
 8001436:	4826      	ldr	r0, [pc, #152]	@ (80014d0 <_Z15deserialiseJSONv+0xa0>)
 8001438:	f00f fbde 	bl	8010bf8 <puts>

    const char *json = strJson.c_str();
 800143c:	4825      	ldr	r0, [pc, #148]	@ (80014d4 <_Z15deserialiseJSONv+0xa4>)
 800143e:	f00f f9a7 	bl	8010790 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001442:	60f8      	str	r0, [r7, #12]

    // parse the json configuration file
    DeserializationError error = deserializeJson(doc, json);
 8001444:	f107 0308 	add.w	r3, r7, #8
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff febf 	bl	80011cc <_ZN19ArduinoJson6101_11012NestingLimitC1Ev>
 800144e:	7a3a      	ldrb	r2, [r7, #8]
 8001450:	68f9      	ldr	r1, [r7, #12]
 8001452:	4821      	ldr	r0, [pc, #132]	@ (80014d8 <_Z15deserialiseJSONv+0xa8>)
 8001454:	f000 fbab 	bl	8001bae <_ZN19ArduinoJson6101_11015deserializeJsonIKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT_NS_12NestingLimitE>
 8001458:	4603      	mov	r3, r0
 800145a:	713b      	strb	r3, [r7, #4]

    printf("	Config deserialisation - ");
 800145c:	481f      	ldr	r0, [pc, #124]	@ (80014dc <_Z15deserialiseJSONv+0xac>)
 800145e:	f00f fb5b 	bl	8010b18 <iprintf>

    switch (error.code())
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fe6b 	bl	8001140 <_ZNK19ArduinoJson6101_11020DeserializationError4codeEv>
 800146a:	4603      	mov	r3, r0
 800146c:	2b03      	cmp	r3, #3
 800146e:	d011      	beq.n	8001494 <_Z15deserialiseJSONv+0x64>
 8001470:	2b03      	cmp	r3, #3
 8001472:	dc16      	bgt.n	80014a2 <_Z15deserialiseJSONv+0x72>
 8001474:	2b00      	cmp	r3, #0
 8001476:	d002      	beq.n	800147e <_Z15deserialiseJSONv+0x4e>
 8001478:	2b02      	cmp	r3, #2
 800147a:	d004      	beq.n	8001486 <_Z15deserialiseJSONv+0x56>
 800147c:	e011      	b.n	80014a2 <_Z15deserialiseJSONv+0x72>
    {
        case DeserializationError::Ok:
            printf("Deserialization succeeded\n");
 800147e:	4818      	ldr	r0, [pc, #96]	@ (80014e0 <_Z15deserialiseJSONv+0xb0>)
 8001480:	f00f fbba 	bl	8010bf8 <puts>
            break;
 8001484:	e01f      	b.n	80014c6 <_Z15deserialiseJSONv+0x96>
        case DeserializationError::InvalidInput:
            printf("Invalid input!\n");
 8001486:	4817      	ldr	r0, [pc, #92]	@ (80014e4 <_Z15deserialiseJSONv+0xb4>)
 8001488:	f00f fbb6 	bl	8010bf8 <puts>
            configError = true;
 800148c:	4b16      	ldr	r3, [pc, #88]	@ (80014e8 <_Z15deserialiseJSONv+0xb8>)
 800148e:	2201      	movs	r2, #1
 8001490:	701a      	strb	r2, [r3, #0]
            break;
 8001492:	e018      	b.n	80014c6 <_Z15deserialiseJSONv+0x96>
        case DeserializationError::NoMemory:
            printf("Not enough memory\n");
 8001494:	4815      	ldr	r0, [pc, #84]	@ (80014ec <_Z15deserialiseJSONv+0xbc>)
 8001496:	f00f fbaf 	bl	8010bf8 <puts>
            configError = true;
 800149a:	4b13      	ldr	r3, [pc, #76]	@ (80014e8 <_Z15deserialiseJSONv+0xb8>)
 800149c:	2201      	movs	r2, #1
 800149e:	701a      	strb	r2, [r3, #0]
            break;
 80014a0:	e011      	b.n	80014c6 <_Z15deserialiseJSONv+0x96>
        default:
            printf("Deserialization failed: ");
 80014a2:	4813      	ldr	r0, [pc, #76]	@ (80014f0 <_Z15deserialiseJSONv+0xc0>)
 80014a4:	f00f fb38 	bl	8010b18 <iprintf>
            printf(error.c_str());
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fe54 	bl	8001158 <_ZNK19ArduinoJson6101_11020DeserializationError5c_strEv>
 80014b0:	4603      	mov	r3, r0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f00f fb30 	bl	8010b18 <iprintf>
            printf("\n");
 80014b8:	200a      	movs	r0, #10
 80014ba:	f00f fb3f 	bl	8010b3c <putchar>
            configError = true;
 80014be:	4b0a      	ldr	r3, [pc, #40]	@ (80014e8 <_Z15deserialiseJSONv+0xb8>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	701a      	strb	r2, [r3, #0]
            break;
 80014c4:	bf00      	nop
    }
}
 80014c6:	bf00      	nop
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	08011a4c 	.word	0x08011a4c
 80014d4:	24000330 	.word	0x24000330
 80014d8:	24000350 	.word	0x24000350
 80014dc:	08011a70 	.word	0x08011a70
 80014e0:	08011a8c 	.word	0x08011a8c
 80014e4:	08011aa8 	.word	0x08011aa8
 80014e8:	24000380 	.word	0x24000380
 80014ec:	08011ab8 	.word	0x08011ab8
 80014f0:	08011acc 	.word	0x08011acc

080014f4 <_Z5setupv>:

void setup()
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
    printf("\n2. Setting up SPI DMA and threads\n");
 80014f8:	4807      	ldr	r0, [pc, #28]	@ (8001518 <_Z5setupv+0x24>)
 80014fa:	f00f fb7d 	bl	8010bf8 <puts>

     // initialise the Remora comms
    comms->init();
 80014fe:	4b07      	ldr	r3, [pc, #28]	@ (800151c <_Z5setupv+0x28>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f002 fb56 	bl	8003bb4 <_ZN11RemoraComms4initEv>
    comms->start();
 8001508:	4b04      	ldr	r3, [pc, #16]	@ (800151c <_Z5setupv+0x28>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f002 fca9 	bl	8003e64 <_ZN11RemoraComms5startEv>
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	08011ae8 	.word	0x08011ae8
 800151c:	24000530 	.word	0x24000530

08001520 <main>:


int main(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af02      	add	r7, sp, #8
	MPU_Config();
 8001526:	f000 fa9b 	bl	8001a60 <_ZL10MPU_Configv>
	SCB->VTOR = 0x08000000;
 800152a:	4b54      	ldr	r3, [pc, #336]	@ (800167c <main+0x15c>)
 800152c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001530:	609a      	str	r2, [r3, #8]
	HAL_Init();
 8001532:	f002 fe13 	bl	800415c <HAL_Init>
	SystemClock_Config();
 8001536:	f000 f8a9 	bl	800168c <_Z18SystemClock_Configv>
	PeriphCommonClock_Config();
 800153a:	f000 f971 	bl	8001820 <_Z24PeriphCommonClock_Configv>

	/* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 800153e:	4b50      	ldr	r3, [pc, #320]	@ (8001680 <main+0x160>)
 8001540:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001544:	4a4e      	ldr	r2, [pc, #312]	@ (8001680 <main+0x160>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800154e:	4b4c      	ldr	r3, [pc, #304]	@ (8001680 <main+0x160>)
 8001550:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	603b      	str	r3, [r7, #0]
 800155a:	683b      	ldr	r3, [r7, #0]

	MX_GPIO_Init(); // used for SD card detect
 800155c:	f000 fa24 	bl	80019a8 <_ZL12MX_GPIO_Initv>
	MX_USART1_UART_Init();
 8001560:	f000 f9c2 	bl	80018e8 <_ZL19MX_USART1_UART_Initv>
	MX_SDMMC1_SD_Init();
 8001564:	f000 f994 	bl	8001890 <_ZL17MX_SDMMC1_SD_Initv>
	MX_FATFS_Init();
 8001568:	f00c fb82 	bl	800dc70 <MX_FATFS_Init>

	printf("\nRemora version %d.%d.%d for %s starting\n\n", MAJOR_VERSION, MINOR_VERSION, PATCH, BOARD);
 800156c:	4b45      	ldr	r3, [pc, #276]	@ (8001684 <main+0x164>)
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	2300      	movs	r3, #0
 8001572:	2201      	movs	r2, #1
 8001574:	2100      	movs	r1, #0
 8001576:	4844      	ldr	r0, [pc, #272]	@ (8001688 <main+0x168>)
 8001578:	f00f face 	bl	8010b18 <iprintf>

	readJsonConfig();	// FatFS fales to work if chche is enabled
 800157c:	f7ff fe94 	bl	80012a8 <_Z14readJsonConfigv>
	deserialiseJSON();
 8001580:	f7ff ff56 	bl	8001430 <_Z15deserialiseJSONv>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001584:	4b3d      	ldr	r3, [pc, #244]	@ (800167c <main+0x15c>)
 8001586:	695b      	ldr	r3, [r3, #20]
 8001588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800158c:	2b00      	cmp	r3, #0
 800158e:	bf14      	ite	ne
 8001590:	2301      	movne	r3, #1
 8001592:	2300      	moveq	r3, #0
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d11b      	bne.n	80015d2 <main+0xb2>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800159a:	f3bf 8f4f 	dsb	sy
}
 800159e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015a0:	f3bf 8f6f 	isb	sy
}
 80015a4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80015a6:	4b35      	ldr	r3, [pc, #212]	@ (800167c <main+0x15c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80015ae:	f3bf 8f4f 	dsb	sy
}
 80015b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015b4:	f3bf 8f6f 	isb	sy
}
 80015b8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80015ba:	4b30      	ldr	r3, [pc, #192]	@ (800167c <main+0x15c>)
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	4a2f      	ldr	r2, [pc, #188]	@ (800167c <main+0x15c>)
 80015c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015c4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80015c6:	f3bf 8f4f 	dsb	sy
}
 80015ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015cc:	f3bf 8f6f 	isb	sy
}
 80015d0:	e000      	b.n	80015d4 <main+0xb4>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80015d2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80015d4:	4b29      	ldr	r3, [pc, #164]	@ (800167c <main+0x15c>)
 80015d6:	695b      	ldr	r3, [r3, #20]
 80015d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	bf14      	ite	ne
 80015e0:	2301      	movne	r3, #1
 80015e2:	2300      	moveq	r3, #0
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d142      	bne.n	8001670 <main+0x150>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80015ea:	4b24      	ldr	r3, [pc, #144]	@ (800167c <main+0x15c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80015f2:	f3bf 8f4f 	dsb	sy
}
 80015f6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80015f8:	4b20      	ldr	r3, [pc, #128]	@ (800167c <main+0x15c>)
 80015fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015fe:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	0b5b      	lsrs	r3, r3, #13
 8001604:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001608:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	08db      	lsrs	r3, r3, #3
 800160e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001612:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	015a      	lsls	r2, r3, #5
 8001618:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800161c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001622:	4916      	ldr	r1, [pc, #88]	@ (800167c <main+0x15c>)
 8001624:	4313      	orrs	r3, r2
 8001626:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	1e5a      	subs	r2, r3, #1
 800162e:	607a      	str	r2, [r7, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	bf14      	ite	ne
 8001634:	2301      	movne	r3, #1
 8001636:	2300      	moveq	r3, #0
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1ea      	bne.n	8001614 <main+0xf4>
    } while(sets-- != 0U);
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	1e5a      	subs	r2, r3, #1
 8001642:	60ba      	str	r2, [r7, #8]
 8001644:	2b00      	cmp	r3, #0
 8001646:	bf14      	ite	ne
 8001648:	2301      	movne	r3, #1
 800164a:	2300      	moveq	r3, #0
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1db      	bne.n	800160a <main+0xea>
  __ASM volatile ("dsb 0xF":::"memory");
 8001652:	f3bf 8f4f 	dsb	sy
}
 8001656:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001658:	4b08      	ldr	r3, [pc, #32]	@ (800167c <main+0x15c>)
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	4a07      	ldr	r2, [pc, #28]	@ (800167c <main+0x15c>)
 800165e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001662:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001664:	f3bf 8f4f 	dsb	sy
}
 8001668:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800166a:	f3bf 8f6f 	isb	sy
}
 800166e:	e000      	b.n	8001672 <main+0x152>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001670:	bf00      	nop

	SCB_EnableICache();
	SCB_EnableDCache();

	setup();
 8001672:	f7ff ff3f 	bl	80014f4 <_Z5setupv>

	while (1)
 8001676:	bf00      	nop
 8001678:	e7fd      	b.n	8001676 <main+0x156>
 800167a:	bf00      	nop
 800167c:	e000ed00 	.word	0xe000ed00
 8001680:	58024400 	.word	0x58024400
 8001684:	08011b38 	.word	0x08011b38
 8001688:	08011b0c 	.word	0x08011b0c

0800168c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b09e      	sub	sp, #120	@ 0x78
 8001690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001692:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001696:	224c      	movs	r2, #76	@ 0x4c
 8001698:	2100      	movs	r1, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f00f fba6 	bl	8010dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	2220      	movs	r2, #32
 80016a6:	2100      	movs	r1, #0
 80016a8:	4618      	mov	r0, r3
 80016aa:	f00f fb9f 	bl	8010dec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80016ae:	2002      	movs	r0, #2
 80016b0:	f004 fe26 	bl	8006300 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016b4:	2300      	movs	r3, #0
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	4b56      	ldr	r3, [pc, #344]	@ (8001814 <_Z18SystemClock_Configv+0x188>)
 80016ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016bc:	4a55      	ldr	r2, [pc, #340]	@ (8001814 <_Z18SystemClock_Configv+0x188>)
 80016be:	f023 0301 	bic.w	r3, r3, #1
 80016c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80016c4:	4b53      	ldr	r3, [pc, #332]	@ (8001814 <_Z18SystemClock_Configv+0x188>)
 80016c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	4b52      	ldr	r3, [pc, #328]	@ (8001818 <_Z18SystemClock_Configv+0x18c>)
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	4a51      	ldr	r2, [pc, #324]	@ (8001818 <_Z18SystemClock_Configv+0x18c>)
 80016d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016d8:	6193      	str	r3, [r2, #24]
 80016da:	4b4f      	ldr	r3, [pc, #316]	@ (8001818 <_Z18SystemClock_Configv+0x18c>)
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80016e6:	bf00      	nop
 80016e8:	4b4b      	ldr	r3, [pc, #300]	@ (8001818 <_Z18SystemClock_Configv+0x18c>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80016f4:	bf14      	ite	ne
 80016f6:	2301      	movne	r3, #1
 80016f8:	2300      	moveq	r3, #0
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1f3      	bne.n	80016e8 <_Z18SystemClock_Configv+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001700:	4b46      	ldr	r3, [pc, #280]	@ (800181c <_Z18SystemClock_Configv+0x190>)
 8001702:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001706:	4a45      	ldr	r2, [pc, #276]	@ (800181c <_Z18SystemClock_Configv+0x190>)
 8001708:	f043 0302 	orr.w	r3, r3, #2
 800170c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001710:	4b42      	ldr	r3, [pc, #264]	@ (800181c <_Z18SystemClock_Configv+0x190>)
 8001712:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800171e:	2300      	movs	r3, #0
 8001720:	603b      	str	r3, [r7, #0]
 8001722:	4b3d      	ldr	r3, [pc, #244]	@ (8001818 <_Z18SystemClock_Configv+0x18c>)
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	4a3c      	ldr	r2, [pc, #240]	@ (8001818 <_Z18SystemClock_Configv+0x18c>)
 8001728:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800172c:	6193      	str	r3, [r2, #24]
 800172e:	4b3a      	ldr	r3, [pc, #232]	@ (8001818 <_Z18SystemClock_Configv+0x18c>)
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	4b36      	ldr	r3, [pc, #216]	@ (8001814 <_Z18SystemClock_Configv+0x188>)
 800173a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800173c:	4a35      	ldr	r2, [pc, #212]	@ (8001814 <_Z18SystemClock_Configv+0x188>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001744:	4b33      	ldr	r3, [pc, #204]	@ (8001814 <_Z18SystemClock_Configv+0x188>)
 8001746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	603b      	str	r3, [r7, #0]
 800174e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001750:	bf00      	nop
 8001752:	4b31      	ldr	r3, [pc, #196]	@ (8001818 <_Z18SystemClock_Configv+0x18c>)
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800175a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800175e:	bf14      	ite	ne
 8001760:	2301      	movne	r3, #1
 8001762:	2300      	moveq	r3, #0
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1f3      	bne.n	8001752 <_Z18SystemClock_Configv+0xc6>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800176a:	4b2c      	ldr	r3, [pc, #176]	@ (800181c <_Z18SystemClock_Configv+0x190>)
 800176c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800176e:	f023 0303 	bic.w	r3, r3, #3
 8001772:	4a2a      	ldr	r2, [pc, #168]	@ (800181c <_Z18SystemClock_Configv+0x190>)
 8001774:	f043 0302 	orr.w	r3, r3, #2
 8001778:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800177a:	2301      	movs	r3, #1
 800177c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800177e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001782:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001784:	2302      	movs	r3, #2
 8001786:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001788:	2302      	movs	r3, #2
 800178a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 800178c:	2305      	movs	r3, #5
 800178e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001790:	23c0      	movs	r3, #192	@ 0xc0
 8001792:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001794:	2302      	movs	r3, #2
 8001796:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001798:	2304      	movs	r3, #4
 800179a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800179c:	2302      	movs	r3, #2
 800179e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80017a0:	2308      	movs	r3, #8
 80017a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80017a4:	2300      	movs	r3, #0
 80017a6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017b0:	4618      	mov	r0, r3
 80017b2:	f004 fddf 	bl	8006374 <HAL_RCC_OscConfig>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	bf14      	ite	ne
 80017bc:	2301      	movne	r3, #1
 80017be:	2300      	moveq	r3, #0
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <_Z18SystemClock_Configv+0x13e>
  {
    Error_Handler();
 80017c6:	f000 f977 	bl	8001ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ca:	233f      	movs	r3, #63	@ 0x3f
 80017cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017ce:	2303      	movs	r3, #3
 80017d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80017d6:	2308      	movs	r3, #8
 80017d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80017da:	2340      	movs	r3, #64	@ 0x40
 80017dc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80017de:	2340      	movs	r3, #64	@ 0x40
 80017e0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80017e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017e6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80017e8:	2340      	movs	r3, #64	@ 0x40
 80017ea:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017ec:	f107 030c 	add.w	r3, r7, #12
 80017f0:	2104      	movs	r1, #4
 80017f2:	4618      	mov	r0, r3
 80017f4:	f005 fa18 	bl	8006c28 <HAL_RCC_ClockConfig>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	bf14      	ite	ne
 80017fe:	2301      	movne	r3, #1
 8001800:	2300      	moveq	r3, #0
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <_Z18SystemClock_Configv+0x180>
  {
    Error_Handler();
 8001808:	f000 f956 	bl	8001ab8 <Error_Handler>
  }
}
 800180c:	bf00      	nop
 800180e:	3778      	adds	r7, #120	@ 0x78
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	58000400 	.word	0x58000400
 8001818:	58024800 	.word	0x58024800
 800181c:	58024400 	.word	0x58024400

08001820 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b0b0      	sub	sp, #192	@ 0xc0
 8001824:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001826:	463b      	mov	r3, r7
 8001828:	22c0      	movs	r2, #192	@ 0xc0
 800182a:	2100      	movs	r1, #0
 800182c:	4618      	mov	r0, r3
 800182e:	f00f fadd 	bl	8010dec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SPI1;
 8001832:	f44f 3288 	mov.w	r2, #69632	@ 0x11000
 8001836:	f04f 0300 	mov.w	r3, #0
 800183a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800183e:	2302      	movs	r3, #2
 8001840:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001842:	230c      	movs	r3, #12
 8001844:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 8001846:	2301      	movs	r3, #1
 8001848:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 10;
 800184a:	230a      	movs	r3, #10
 800184c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800184e:	2302      	movs	r3, #2
 8001850:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001852:	23c0      	movs	r3, #192	@ 0xc0
 8001854:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001856:	2320      	movs	r3, #32
 8001858:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800185e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001862:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001864:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001868:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800186a:	463b      	mov	r3, r7
 800186c:	4618      	mov	r0, r3
 800186e:	f005 fd67 	bl	8007340 <HAL_RCCEx_PeriphCLKConfig>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	bf14      	ite	ne
 8001878:	2301      	movne	r3, #1
 800187a:	2300      	moveq	r3, #0
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <_Z24PeriphCommonClock_Configv+0x66>
  {
    Error_Handler();
 8001882:	f000 f919 	bl	8001ab8 <Error_Handler>
  }
}
 8001886:	bf00      	nop
 8001888:	37c0      	adds	r7, #192	@ 0xc0
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001894:	4b11      	ldr	r3, [pc, #68]	@ (80018dc <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8001896:	4a12      	ldr	r2, [pc, #72]	@ (80018e0 <_ZL17MX_SDMMC1_SD_Initv+0x50>)
 8001898:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800189a:	4b10      	ldr	r3, [pc, #64]	@ (80018dc <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 800189c:	2200      	movs	r2, #0
 800189e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_ENABLE;
 80018a0:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 80018a2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80018a6:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80018a8:	4b0c      	ldr	r3, [pc, #48]	@ (80018dc <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 80018aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80018ae:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80018b0:	4b0a      	ldr	r3, [pc, #40]	@ (80018dc <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 80018b6:	4b09      	ldr	r3, [pc, #36]	@ (80018dc <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 80018b8:	2208      	movs	r2, #8
 80018ba:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80018bc:	4807      	ldr	r0, [pc, #28]	@ (80018dc <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 80018be:	f008 fa3d 	bl	8009d3c <HAL_SD_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	bf14      	ite	ne
 80018c8:	2301      	movne	r3, #1
 80018ca:	2300      	moveq	r3, #0
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d002      	beq.n	80018d8 <_ZL17MX_SDMMC1_SD_Initv+0x48>
  {
      printf("SD_Init error\n");
 80018d2:	4804      	ldr	r0, [pc, #16]	@ (80018e4 <_ZL17MX_SDMMC1_SD_Initv+0x54>)
 80018d4:	f00f f990 	bl	8010bf8 <puts>
  }
  /* USER CODE END SDMMC1_Init 2 */

}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	24000420 	.word	0x24000420
 80018e0:	52007000 	.word	0x52007000
 80018e4:	08011b40 	.word	0x08011b40

080018e8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018ec:	4b2c      	ldr	r3, [pc, #176]	@ (80019a0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80018ee:	4a2d      	ldr	r2, [pc, #180]	@ (80019a4 <_ZL19MX_USART1_UART_Initv+0xbc>)
 80018f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = PC_BAUD;
 80018f2:	4b2b      	ldr	r3, [pc, #172]	@ (80019a0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80018f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018fa:	4b29      	ldr	r3, [pc, #164]	@ (80019a0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001900:	4b27      	ldr	r3, [pc, #156]	@ (80019a0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001906:	4b26      	ldr	r3, [pc, #152]	@ (80019a0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001908:	2200      	movs	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800190c:	4b24      	ldr	r3, [pc, #144]	@ (80019a0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800190e:	220c      	movs	r2, #12
 8001910:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001912:	4b23      	ldr	r3, [pc, #140]	@ (80019a0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001914:	2200      	movs	r2, #0
 8001916:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001918:	4b21      	ldr	r3, [pc, #132]	@ (80019a0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800191a:	2200      	movs	r2, #0
 800191c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800191e:	4b20      	ldr	r3, [pc, #128]	@ (80019a0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001920:	2200      	movs	r2, #0
 8001922:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001924:	4b1e      	ldr	r3, [pc, #120]	@ (80019a0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001926:	2200      	movs	r2, #0
 8001928:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800192a:	4b1d      	ldr	r3, [pc, #116]	@ (80019a0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800192c:	2200      	movs	r2, #0
 800192e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001930:	481b      	ldr	r0, [pc, #108]	@ (80019a0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001932:	f00a fa68 	bl	800be06 <HAL_UART_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	bf14      	ite	ne
 800193c:	2301      	movne	r3, #1
 800193e:	2300      	moveq	r3, #0
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8001946:	f000 f8b7 	bl	8001ab8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800194a:	2100      	movs	r1, #0
 800194c:	4814      	ldr	r0, [pc, #80]	@ (80019a0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800194e:	f00b fafa 	bl	800cf46 <HAL_UARTEx_SetTxFifoThreshold>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	bf14      	ite	ne
 8001958:	2301      	movne	r3, #1
 800195a:	2300      	moveq	r3, #0
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8001962:	f000 f8a9 	bl	8001ab8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001966:	2100      	movs	r1, #0
 8001968:	480d      	ldr	r0, [pc, #52]	@ (80019a0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800196a:	f00b fb2a 	bl	800cfc2 <HAL_UARTEx_SetRxFifoThreshold>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	bf14      	ite	ne
 8001974:	2301      	movne	r3, #1
 8001976:	2300      	moveq	r3, #0
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 800197e:	f000 f89b 	bl	8001ab8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001982:	4807      	ldr	r0, [pc, #28]	@ (80019a0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8001984:	f00b faa6 	bl	800ced4 <HAL_UARTEx_DisableFifoMode>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	bf14      	ite	ne
 800198e:	2301      	movne	r3, #1
 8001990:	2300      	moveq	r3, #0
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8001998:	f000 f88e 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	2400049c 	.word	0x2400049c
 80019a4:	40011000 	.word	0x40011000

080019a8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08a      	sub	sp, #40	@ 0x28
 80019ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ae:	f107 0314 	add.w	r3, r7, #20
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	609a      	str	r2, [r3, #8]
 80019ba:	60da      	str	r2, [r3, #12]
 80019bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019be:	4b26      	ldr	r3, [pc, #152]	@ (8001a58 <_ZL12MX_GPIO_Initv+0xb0>)
 80019c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019c4:	4a24      	ldr	r2, [pc, #144]	@ (8001a58 <_ZL12MX_GPIO_Initv+0xb0>)
 80019c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019ce:	4b22      	ldr	r3, [pc, #136]	@ (8001a58 <_ZL12MX_GPIO_Initv+0xb0>)
 80019d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001a58 <_ZL12MX_GPIO_Initv+0xb0>)
 80019de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001a58 <_ZL12MX_GPIO_Initv+0xb0>)
 80019e4:	f043 0304 	orr.w	r3, r3, #4
 80019e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001a58 <_ZL12MX_GPIO_Initv+0xb0>)
 80019ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fa:	4b17      	ldr	r3, [pc, #92]	@ (8001a58 <_ZL12MX_GPIO_Initv+0xb0>)
 80019fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a00:	4a15      	ldr	r2, [pc, #84]	@ (8001a58 <_ZL12MX_GPIO_Initv+0xb0>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a0a:	4b13      	ldr	r3, [pc, #76]	@ (8001a58 <_ZL12MX_GPIO_Initv+0xb0>)
 8001a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a18:	4b0f      	ldr	r3, [pc, #60]	@ (8001a58 <_ZL12MX_GPIO_Initv+0xb0>)
 8001a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a1e:	4a0e      	ldr	r2, [pc, #56]	@ (8001a58 <_ZL12MX_GPIO_Initv+0xb0>)
 8001a20:	f043 0308 	orr.w	r3, r3, #8
 8001a24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a28:	4b0b      	ldr	r3, [pc, #44]	@ (8001a58 <_ZL12MX_GPIO_Initv+0xb0>)
 8001a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a36:	2310      	movs	r3, #16
 8001a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a42:	f107 0314 	add.w	r3, r7, #20
 8001a46:	4619      	mov	r1, r3
 8001a48:	4804      	ldr	r0, [pc, #16]	@ (8001a5c <_ZL12MX_GPIO_Initv+0xb4>)
 8001a4a:	f004 faa9 	bl	8005fa0 <HAL_GPIO_Init>

}
 8001a4e:	bf00      	nop
 8001a50:	3728      	adds	r7, #40	@ 0x28
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	58024400 	.word	0x58024400
 8001a5c:	58020800 	.word	0x58020800

08001a60 <_ZL10MPU_Configv>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void MPU_Config(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001a66:	463b      	mov	r3, r7
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001a72:	f002 fd45 	bl	8004500 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001a76:	2301      	movs	r3, #1
 8001a78:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001a82:	231f      	movs	r3, #31
 8001a84:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001a86:	2387      	movs	r3, #135	@ 0x87
 8001a88:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001a92:	2301      	movs	r3, #1
 8001a94:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001a96:	2301      	movs	r3, #1
 8001a98:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001aa2:	463b      	mov	r3, r7
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f002 fd63 	bl	8004570 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001aaa:	2004      	movs	r0, #4
 8001aac:	f002 fd40 	bl	8004530 <HAL_MPU_Enable>

}
 8001ab0:	bf00      	nop
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	printf("error\n\r");
 8001abc:	4803      	ldr	r0, [pc, #12]	@ (8001acc <Error_Handler+0x14>)
 8001abe:	f00f f82b 	bl	8010b18 <iprintf>
  __ASM volatile ("cpsid i" : : : "memory");
 8001ac2:	b672      	cpsid	i
}
 8001ac4:	bf00      	nop

  __disable_irq();
  while (1)
 8001ac6:	bf00      	nop
 8001ac8:	e7fd      	b.n	8001ac6 <Error_Handler+0xe>
 8001aca:	bf00      	nop
 8001acc:	08011b50 	.word	0x08011b50

08001ad0 <_ZNK19ArduinoJson6101_1108not_nullIPKcE3getEv>:
 public:
  explicit not_null(T ptr) : _ptr(ptr) {
    ARDUINOJSON_ASSERT(ptr != NULL);
  }

  T get() const {
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(_ptr != NULL);
    return _ptr;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
  }
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightINS_11VariantSlotEEEPT_v>:
  T* allocRight() {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
 8001af0:	2110      	movs	r1, #16
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff f8a0 	bl	8000c38 <_ZN19ArduinoJson6101_11010MemoryPool10allocRightEj>
 8001af8:	4603      	mov	r3, r0
  }
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>:
 private:
  T _ptr;
};

template <typename T>
not_null<T> make_not_null(T ptr) {
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b084      	sub	sp, #16
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  ARDUINOJSON_ASSERT(ptr != NULL);
  return not_null<T>(ptr);
 8001b0a:	f107 030c 	add.w	r3, r7, #12
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f000 f85c 	bl	8001bce <_ZN19ArduinoJson6101_1108not_nullIPKcEC1ES2_>
 8001b16:	68fb      	ldr	r3, [r7, #12]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>:
  FORCE_INLINE size_t size() const {
    return _data ? _data->size() : 0;
  }

 protected:
  ObjectRefBase(TData* data) : _data(data) {}
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_>:
};

template <typename TAllocator>
class BasicJsonDocument : AllocatorOwner<TAllocator>, public JsonDocument {
 public:
  explicit BasicJsonDocument(size_t capa, TAllocator allocator = TAllocator())
 8001b3e:	b590      	push	{r4, r7, lr}
 8001b40:	b08b      	sub	sp, #44	@ 0x2c
 8001b42:	af02      	add	r7, sp, #8
 8001b44:	60f8      	str	r0, [r7, #12]
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	713a      	strb	r2, [r7, #4]
      : AllocatorOwner<TAllocator>(allocator), JsonDocument(allocPool(capa)) {}
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	4621      	mov	r1, r4
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 f865 	bl	8001c1e <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEEC1ES1_>
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f103 0408 	add.w	r4, r3, #8
 8001b5a:	f107 0310 	add.w	r3, r7, #16
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	68f9      	ldr	r1, [r7, #12]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 f842 	bl	8001bec <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE9allocPoolEj>
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	f107 0310 	add.w	r3, r7, #16
 8001b70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b72:	4620      	mov	r0, r4
 8001b74:	f7ff f965 	bl	8000e42 <_ZN19ArduinoJson6101_11012JsonDocumentC1ENS_10MemoryPoolE>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3724      	adds	r7, #36	@ 0x24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd90      	pop	{r4, r7, pc}

08001b82 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>:
   *  @return  New string with @a __lhs followed by @a __rhs.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b084      	sub	sp, #16
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	60f8      	str	r0, [r7, #12]
 8001b8a:	60b9      	str	r1, [r7, #8]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	71fb      	strb	r3, [r7, #7]
    {
      typedef basic_string<_CharT, _Traits, _Alloc>	__string_type;
      typedef typename __string_type::size_type		__size_type;
      __string_type __str(__lhs);
 8001b90:	68b9      	ldr	r1, [r7, #8]
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f00e fe19 	bl	80107ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__size_type(1), __rhs);
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f00e fdec 	bl	801077c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>
      return __str;
 8001ba4:	bf00      	nop
    }
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <_ZN19ArduinoJson6101_11015deserializeJsonIKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT_NS_12NestingLimitE>:
    NestingLimit nestingLimit = NestingLimit()) {
  return deserialize<JsonDeserializer>(doc, input, nestingLimit);
}

template <typename TInput>
DeserializationError deserializeJson(
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b084      	sub	sp, #16
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	713a      	strb	r2, [r7, #4]
    JsonDocument &doc, TInput *input,
    NestingLimit nestingLimit = NestingLimit()) {
  return deserialize<JsonDeserializer>(doc, input, nestingLimit);
 8001bba:	793a      	ldrb	r2, [r7, #4]
 8001bbc:	68b9      	ldr	r1, [r7, #8]
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f000 f839 	bl	8001c36 <_ZN19ArduinoJson6101_11011deserializeINS_16JsonDeserializerEKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT0_NS_12NestingLimitE>
 8001bc4:	4603      	mov	r3, r0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <_ZN19ArduinoJson6101_1108not_nullIPKcEC1ES2_>:
  explicit not_null(T ptr) : _ptr(ptr) {
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	6039      	str	r1, [r7, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	601a      	str	r2, [r3, #0]
  }
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE9allocPoolEj>:
    set(src);
    return *this;
  }

 private:
  MemoryPool allocPool(size_t requiredSize) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
    size_t capa = addPadding(requiredSize);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7fe ff70 	bl	8000ade <_ZN19ArduinoJson6101_11010addPaddingEj>
 8001bfe:	6178      	str	r0, [r7, #20]
    return MemoryPool(reinterpret_cast<char*>(this->allocate(capa)), capa);
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	6979      	ldr	r1, [r7, #20]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f000 f848 	bl	8001c9a <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE8allocateEj>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	4619      	mov	r1, r3
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f7fe ff74 	bl	8000afe <_ZN19ArduinoJson6101_11010MemoryPoolC1EPcj>
  }
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEEC1ES1_>:
  AllocatorOwner(TAllocator allocator) : _allocator(allocator) {}
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	7039      	strb	r1, [r7, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <_ZN19ArduinoJson6101_11011deserializeINS_16JsonDeserializerEKcEENS_20DeserializationErrorERNS_12JsonDocumentEPT0_NS_12NestingLimitE>:
//
// deserialize(JsonDocument&, char*);
// deserialize(JsonDocument&, const char*);
// deserialize(JsonDocument&, const __FlashStringHelper*);
template <template <typename, typename> class TDeserializer, typename TChar>
DeserializationError deserialize(JsonDocument &doc, TChar *input,
 8001c36:	b5b0      	push	{r4, r5, r7, lr}
 8001c38:	b08a      	sub	sp, #40	@ 0x28
 8001c3a:	af02      	add	r7, sp, #8
 8001c3c:	60f8      	str	r0, [r7, #12]
 8001c3e:	60b9      	str	r1, [r7, #8]
 8001c40:	713a      	strb	r2, [r7, #4]
                                 NestingLimit nestingLimit) {
  doc.clear();
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f7ff f8d5 	bl	8000df2 <_ZN19ArduinoJson6101_11012JsonDocument5clearEv>
  return makeDeserializer<TDeserializer>(
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f7ff f8e3 	bl	8000e14 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 8001c4e:	4604      	mov	r4, r0
 8001c50:	68b8      	ldr	r0, [r7, #8]
 8001c52:	f000 f831 	bl	8001cb8 <_ZN19ArduinoJson6101_11010makeReaderIKcEENS_23UnsafeCharPointerReaderEPT_>
 8001c56:	4605      	mov	r5, r0
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	f7ff f8db 	bl	8000e14 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	68b9      	ldr	r1, [r7, #8]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 f837 	bl	8001cd6 <_ZN19ArduinoJson6101_11017makeStringStorageIKcEENS_13StringStorageIPT_vE4typeERNS_10MemoryPoolES4_>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	793b      	ldrb	r3, [r7, #4]
 8001c6c:	f107 0010 	add.w	r0, r7, #16
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	4613      	mov	r3, r2
 8001c74:	462a      	mov	r2, r5
 8001c76:	4621      	mov	r1, r4
 8001c78:	f000 f83c 	bl	8001cf4 <_ZN19ArduinoJson6101_11016makeDeserializerINS_16JsonDeserializerENS_23UnsafeCharPointerReaderENS_12StringCopierEEET_IT0_T1_ERNS_10MemoryPoolES5_S6_h>
             doc.memoryPool(), makeReader(input),
             makeStringStorage(doc.memoryPool(), input), nestingLimit.value)
      .parse(doc.data());
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f7ff f8d4 	bl	8000e2a <_ZN19ArduinoJson6101_11012JsonDocument4dataEv>
 8001c82:	4602      	mov	r2, r0
 8001c84:	f107 0310 	add.w	r3, r7, #16
 8001c88:	4611      	mov	r1, r2
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f000 f845 	bl	8001d1a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 8001c90:	4603      	mov	r3, r0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3720      	adds	r7, #32
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bdb0      	pop	{r4, r5, r7, pc}

08001c9a <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE8allocateEj>:
  void* allocate(size_t n) {
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	6039      	str	r1, [r7, #0]
    return _allocator.allocate(n);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6839      	ldr	r1, [r7, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff f8e7 	bl	8000e7c <_ZN19ArduinoJson6101_11016DefaultAllocator8allocateEj>
 8001cae:	4603      	mov	r3, r0
  }
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <_ZN19ArduinoJson6101_11010makeReaderIKcEENS_23UnsafeCharPointerReaderEPT_>:
    return _ptr == _end;
  }
};

template <typename TChar>
inline UnsafeCharPointerReader makeReader(TChar* input) {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  return UnsafeCharPointerReader(reinterpret_cast<const char*>(input));
 8001cc0:	f107 030c 	add.w	r3, r7, #12
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff f9d0 	bl	800106c <_ZN19ArduinoJson6101_11023UnsafeCharPointerReaderC1EPKc>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <_ZN19ArduinoJson6101_11017makeStringStorageIKcEENS_13StringStorageIPT_vE4typeERNS_10MemoryPoolES4_>:
                                                       TInput& input) {
  return StringStorage<TInput>::create(pool, input);
}

template <typename TChar>
typename StringStorage<TChar*>::type makeStringStorage(MemoryPool& pool,
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	6039      	str	r1, [r7, #0]
                                                       TChar* input) {
  return StringStorage<TChar*>::create(pool, input);
 8001ce0:	463b      	mov	r3, r7
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f863 	bl	8001db0 <_ZN19ArduinoJson6101_11013StringStorageIPKcvE6createERNS_10MemoryPoolERS2_>
 8001cea:	4603      	mov	r3, r0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <_ZN19ArduinoJson6101_11016makeDeserializerINS_16JsonDeserializerENS_23UnsafeCharPointerReaderENS_12StringCopierEEET_IT0_T1_ERNS_10MemoryPoolES5_S6_h>:
TDeserializer<TReader, TWriter> makeDeserializer(MemoryPool &pool,
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af02      	add	r7, sp, #8
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
 8001d00:	603b      	str	r3, [r7, #0]
  return TDeserializer<TReader, TWriter>(pool, reader, writer, nestingLimit);
 8001d02:	7e3b      	ldrb	r3, [r7, #24]
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	68b9      	ldr	r1, [r7, #8]
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f000 f85f 	bl	8001dd0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEEC1ERNS_10MemoryPoolES1_S2_h>
}
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>:
  DeserializationError parse(VariantData &variant) {
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b086      	sub	sp, #24
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	6039      	str	r1, [r7, #0]
    DeserializationError err = skipSpacesAndComments();
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f871 	bl	8001e0c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 8001d2e:	f107 0310 	add.w	r3, r7, #16
 8001d32:	f107 020c 	add.w	r2, r7, #12
 8001d36:	4611      	mov	r1, r2
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff f9e3 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d106      	bne.n	8001d52 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x38>
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x38>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x3a>
 8001d52:	2300      	movs	r3, #0
 8001d54:	f083 0301 	eor.w	r3, r3, #1
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x48>
 8001d5e:	7b3b      	ldrb	r3, [r7, #12]
 8001d60:	e022      	b.n	8001da8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8e>
    switch (current()) {
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f932 	bl	8001fcc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b5b      	cmp	r3, #91	@ 0x5b
 8001d6c:	d002      	beq.n	8001d74 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x5a>
 8001d6e:	2b7b      	cmp	r3, #123	@ 0x7b
 8001d70:	d00a      	beq.n	8001d88 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x6e>
 8001d72:	e013      	b.n	8001d9c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x82>
        return parseArray(variant.toArray());
 8001d74:	6838      	ldr	r0, [r7, #0]
 8001d76:	f7fe fff5 	bl	8000d64 <_ZN19ArduinoJson6101_11011VariantData7toArrayEv>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f94d 	bl	800201e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE>
 8001d84:	4603      	mov	r3, r0
 8001d86:	e00f      	b.n	8001da8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8e>
        return parseObject(variant.toObject());
 8001d88:	6838      	ldr	r0, [r7, #0]
 8001d8a:	f7fe fffc 	bl	8000d86 <_ZN19ArduinoJson6101_11011VariantData8toObjectEv>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	4619      	mov	r1, r3
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 fa6a 	bl	800226c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	e005      	b.n	8001da8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE+0x8e>
        return parseValue(variant);
 8001d9c:	6839      	ldr	r1, [r7, #0]
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 fc27 	bl	80025f2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE>
 8001da4:	4603      	mov	r3, r0
 8001da6:	bf00      	nop
  }
 8001da8:	4618      	mov	r0, r3
 8001daa:	3718      	adds	r7, #24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <_ZN19ArduinoJson6101_11013StringStorageIPKcvE6createERNS_10MemoryPoolERS2_>:
  static type create(MemoryPool& pool, TInput&) {
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
    return type(&pool);
 8001dba:	f107 030c 	add.w	r3, r7, #12
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff f934 	bl	800102e <_ZN19ArduinoJson6101_11012StringCopierC1EPNS_10MemoryPoolE>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
  }
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEEC1ERNS_10MemoryPoolES1_S2_h>:
  JsonDeserializer(MemoryPool &pool, TReader reader,
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
 8001ddc:	603b      	str	r3, [r7, #0]
      : _pool(&pool),
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	68ba      	ldr	r2, [r7, #8]
 8001de2:	601a      	str	r2, [r3, #0]
        _reader(reader),
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	605a      	str	r2, [r3, #4]
        _stringStorage(stringStorage),
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	609a      	str	r2, [r3, #8]
        _nestingLimit(nestingLimit),
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	7e3a      	ldrb	r2, [r7, #24]
 8001df4:	731a      	strb	r2, [r3, #12]
        _loaded(false) {}
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	739a      	strb	r2, [r3, #14]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
	...

08001e0c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>:
  DeserializationError skipSpacesAndComments() {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
      switch (current()) {
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f8d9 	bl	8001fcc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b2f      	cmp	r3, #47	@ 0x2f
 8001e1e:	f200 80c7 	bhi.w	8001fb0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a4>
 8001e22:	a201      	add	r2, pc, #4	@ (adr r2, 8001e28 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1c>)
 8001e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e28:	08001ee9 	.word	0x08001ee9
 8001e2c:	08001fb1 	.word	0x08001fb1
 8001e30:	08001fb1 	.word	0x08001fb1
 8001e34:	08001fb1 	.word	0x08001fb1
 8001e38:	08001fb1 	.word	0x08001fb1
 8001e3c:	08001fb1 	.word	0x08001fb1
 8001e40:	08001fb1 	.word	0x08001fb1
 8001e44:	08001fb1 	.word	0x08001fb1
 8001e48:	08001fb1 	.word	0x08001fb1
 8001e4c:	08001ef9 	.word	0x08001ef9
 8001e50:	08001ef9 	.word	0x08001ef9
 8001e54:	08001fb1 	.word	0x08001fb1
 8001e58:	08001fb1 	.word	0x08001fb1
 8001e5c:	08001ef9 	.word	0x08001ef9
 8001e60:	08001fb1 	.word	0x08001fb1
 8001e64:	08001fb1 	.word	0x08001fb1
 8001e68:	08001fb1 	.word	0x08001fb1
 8001e6c:	08001fb1 	.word	0x08001fb1
 8001e70:	08001fb1 	.word	0x08001fb1
 8001e74:	08001fb1 	.word	0x08001fb1
 8001e78:	08001fb1 	.word	0x08001fb1
 8001e7c:	08001fb1 	.word	0x08001fb1
 8001e80:	08001fb1 	.word	0x08001fb1
 8001e84:	08001fb1 	.word	0x08001fb1
 8001e88:	08001fb1 	.word	0x08001fb1
 8001e8c:	08001fb1 	.word	0x08001fb1
 8001e90:	08001fb1 	.word	0x08001fb1
 8001e94:	08001fb1 	.word	0x08001fb1
 8001e98:	08001fb1 	.word	0x08001fb1
 8001e9c:	08001fb1 	.word	0x08001fb1
 8001ea0:	08001fb1 	.word	0x08001fb1
 8001ea4:	08001fb1 	.word	0x08001fb1
 8001ea8:	08001ef9 	.word	0x08001ef9
 8001eac:	08001fb1 	.word	0x08001fb1
 8001eb0:	08001fb1 	.word	0x08001fb1
 8001eb4:	08001fb1 	.word	0x08001fb1
 8001eb8:	08001fb1 	.word	0x08001fb1
 8001ebc:	08001fb1 	.word	0x08001fb1
 8001ec0:	08001fb1 	.word	0x08001fb1
 8001ec4:	08001fb1 	.word	0x08001fb1
 8001ec8:	08001fb1 	.word	0x08001fb1
 8001ecc:	08001fb1 	.word	0x08001fb1
 8001ed0:	08001fb1 	.word	0x08001fb1
 8001ed4:	08001fb1 	.word	0x08001fb1
 8001ed8:	08001fb1 	.word	0x08001fb1
 8001edc:	08001fb1 	.word	0x08001fb1
 8001ee0:	08001fb1 	.word	0x08001fb1
 8001ee4:	08001f01 	.word	0x08001f01
          return DeserializationError::IncompleteInput;
 8001ee8:	f107 030c 	add.w	r3, r7, #12
 8001eec:	2101      	movs	r1, #1
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff f8f7 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8001ef4:	7b3b      	ldrb	r3, [r7, #12]
 8001ef6:	e064      	b.n	8001fc2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
          move();
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 fb99 	bl	8002630 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
          continue;
 8001efe:	e05f      	b.n	8001fc0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b4>
          move();  // skip '/'
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 fb95 	bl	8002630 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
          switch (current()) {
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f860 	bl	8001fcc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f10:	d002      	beq.n	8001f18 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x10c>
 8001f12:	2b2f      	cmp	r3, #47	@ 0x2f
 8001f14:	d02a      	beq.n	8001f6c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x160>
 8001f16:	e042      	b.n	8001f9e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x192>
              move();  // skip '*'
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 fb89 	bl	8002630 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
              bool wasStar = false;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	77fb      	strb	r3, [r7, #31]
                char c = current();
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f852 	bl	8001fcc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	777b      	strb	r3, [r7, #29]
                if (c == '\0') return DeserializationError::IncompleteInput;
 8001f2c:	7f7b      	ldrb	r3, [r7, #29]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d107      	bne.n	8001f42 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x136>
 8001f32:	f107 0310 	add.w	r3, r7, #16
 8001f36:	2101      	movs	r1, #1
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff f8d2 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8001f3e:	7c3b      	ldrb	r3, [r7, #16]
 8001f40:	e03f      	b.n	8001fc2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
                if (c == '/' && wasStar) {
 8001f42:	7f7b      	ldrb	r3, [r7, #29]
 8001f44:	2b2f      	cmp	r3, #47	@ 0x2f
 8001f46:	d107      	bne.n	8001f58 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x14c>
 8001f48:	7ffb      	ldrb	r3, [r7, #31]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d004      	beq.n	8001f58 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x14c>
                  move();
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 fb6e 	bl	8002630 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
                  break;
 8001f54:	bf00      	nop
              break;
 8001f56:	e02a      	b.n	8001fae <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a2>
                wasStar = c == '*';
 8001f58:	7f7b      	ldrb	r3, [r7, #29]
 8001f5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f5c:	bf0c      	ite	eq
 8001f5e:	2301      	moveq	r3, #1
 8001f60:	2300      	movne	r3, #0
 8001f62:	77fb      	strb	r3, [r7, #31]
                move();
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 fb63 	bl	8002630 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
              for (;;) {
 8001f6a:	e7da      	b.n	8001f22 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x116>
                move();
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 fb5f 	bl	8002630 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
                char c = current();
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f82a 	bl	8001fcc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	77bb      	strb	r3, [r7, #30]
                if (c == '\0') return DeserializationError::IncompleteInput;
 8001f7c:	7fbb      	ldrb	r3, [r7, #30]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d107      	bne.n	8001f92 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x186>
 8001f82:	f107 0314 	add.w	r3, r7, #20
 8001f86:	2101      	movs	r1, #1
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff f8aa 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8001f8e:	7d3b      	ldrb	r3, [r7, #20]
 8001f90:	e017      	b.n	8001fc2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
                if (c == '\n') break;
 8001f92:	7fbb      	ldrb	r3, [r7, #30]
 8001f94:	2b0a      	cmp	r3, #10
 8001f96:	d000      	beq.n	8001f9a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x18e>
              for (;;) {
 8001f98:	e7e8      	b.n	8001f6c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x160>
                if (c == '\n') break;
 8001f9a:	bf00      	nop
              break;
 8001f9c:	e007      	b.n	8001fae <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1a2>
              return DeserializationError::InvalidInput;
 8001f9e:	f107 0318 	add.w	r3, r7, #24
 8001fa2:	2102      	movs	r1, #2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff f89c 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8001faa:	7e3b      	ldrb	r3, [r7, #24]
 8001fac:	e009      	b.n	8001fc2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
          break;
 8001fae:	e007      	b.n	8001fc0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b4>
          return DeserializationError::Ok;
 8001fb0:	f107 031c 	add.w	r3, r7, #28
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff f893 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8001fbc:	7f3b      	ldrb	r3, [r7, #28]
 8001fbe:	e000      	b.n	8001fc2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x1b6>
    for (;;) {
 8001fc0:	e728      	b.n	8001e14 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv+0x8>
  }
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3720      	adds	r7, #32
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop

08001fcc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>:
  char current() {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
    if (!_loaded) {
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	7b9b      	ldrb	r3, [r3, #14]
 8001fd8:	f083 0301 	eor.w	r3, r3, #1
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d017      	beq.n	8002012 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x46>
      if (_reader.ended())
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff f866 	bl	80010b8 <_ZNK19ArduinoJson6101_11023UnsafeCharPointerReader5endedEv>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x2e>
        _current = 0;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	735a      	strb	r2, [r3, #13]
 8001ff8:	e008      	b.n	800200c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv+0x40>
        _current = _reader.read();
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff f84a 	bl	8001098 <_ZN19ArduinoJson6101_11023UnsafeCharPointerReader4readEv>
 8002004:	4603      	mov	r3, r0
 8002006:	461a      	mov	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	735a      	strb	r2, [r3, #13]
      _loaded = true;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	739a      	strb	r2, [r3, #14]
    return _current;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	7b5b      	ldrb	r3, [r3, #13]
  }
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE>:
  DeserializationError parseArray(CollectionData &array) {
 800201e:	b580      	push	{r7, lr}
 8002020:	b098      	sub	sp, #96	@ 0x60
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	6039      	str	r1, [r7, #0]
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	7b1b      	ldrb	r3, [r3, #12]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d107      	bne.n	8002040 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x22>
 8002030:	f107 0310 	add.w	r3, r7, #16
 8002034:	2105      	movs	r1, #5
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff f853 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800203c:	7c3b      	ldrb	r3, [r7, #16]
 800203e:	e111      	b.n	8002264 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002044:	235b      	movs	r3, #91	@ 0x5b
 8002046:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (current() != charToSkip) return false;
 800204a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800204c:	f7ff ffbe 	bl	8001fcc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002050:	4603      	mov	r3, r0
 8002052:	461a      	mov	r2, r3
 8002054:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002058:	4293      	cmp	r3, r2
 800205a:	bf14      	ite	ne
 800205c:	2301      	movne	r3, #1
 800205e:	2300      	moveq	r3, #0
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x4c>
 8002066:	2300      	movs	r3, #0
 8002068:	e003      	b.n	8002072 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x54>
    move();
 800206a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800206c:	f000 fae0 	bl	8002630 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8002070:	2301      	movs	r3, #1
    if (!eat('[')) return DeserializationError::InvalidInput;
 8002072:	f083 0301 	eor.w	r3, r3, #1
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	d007      	beq.n	800208c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x6e>
 800207c:	f107 0314 	add.w	r3, r7, #20
 8002080:	2102      	movs	r1, #2
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff f82d 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002088:	7d3b      	ldrb	r3, [r7, #20]
 800208a:	e0eb      	b.n	8002264 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
    DeserializationError err = skipSpacesAndComments();
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7ff febd 	bl	8001e0c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8002092:	4603      	mov	r3, r0
 8002094:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 8002096:	f107 0318 	add.w	r3, r7, #24
 800209a:	f107 020c 	add.w	r2, r7, #12
 800209e:	4611      	mov	r1, r2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff f82f 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d106      	bne.n	80020ba <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9c>
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9c>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x9e>
 80020ba:	2300      	movs	r3, #0
 80020bc:	f083 0301 	eor.w	r3, r3, #1
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xac>
 80020c6:	7b3b      	ldrb	r3, [r7, #12]
 80020c8:	e0cc      	b.n	8002264 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80020ce:	235d      	movs	r3, #93	@ 0x5d
 80020d0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if (current() != charToSkip) return false;
 80020d4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80020d6:	f7ff ff79 	bl	8001fcc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80020da:	4603      	mov	r3, r0
 80020dc:	461a      	mov	r2, r3
 80020de:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80020e2:	4293      	cmp	r3, r2
 80020e4:	bf14      	ite	ne
 80020e6:	2301      	movne	r3, #1
 80020e8:	2300      	moveq	r3, #0
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xd6>
 80020f0:	2300      	movs	r3, #0
 80020f2:	e003      	b.n	80020fc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xde>
    move();
 80020f4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80020f6:	f000 fa9b 	bl	8002630 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 80020fa:	2301      	movs	r3, #1
    if (eat(']')) return DeserializationError::Ok;
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d008      	beq.n	8002112 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xf4>
 8002100:	f107 0320 	add.w	r3, r7, #32
 8002104:	2100      	movs	r1, #0
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe ffeb 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800210c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002110:	e0a8      	b.n	8002264 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      VariantData *value = array.add(_pool);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4619      	mov	r1, r3
 8002118:	6838      	ldr	r0, [r7, #0]
 800211a:	f7fe fef2 	bl	8000f02 <_ZN19ArduinoJson6101_11014CollectionData3addEPNS_10MemoryPoolE>
 800211e:	65f8      	str	r0, [r7, #92]	@ 0x5c
      if (!value) return DeserializationError::NoMemory;
 8002120:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002122:	2b00      	cmp	r3, #0
 8002124:	d108      	bne.n	8002138 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x11a>
 8002126:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800212a:	2103      	movs	r1, #3
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe ffd8 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002132:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002136:	e095      	b.n	8002264 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      _nestingLimit--;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	7b1b      	ldrb	r3, [r3, #12]
 800213c:	3b01      	subs	r3, #1
 800213e:	b2da      	uxtb	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	731a      	strb	r2, [r3, #12]
      err = parse(*value);
 8002144:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff fde7 	bl	8001d1a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 800214c:	4603      	mov	r3, r0
 800214e:	733b      	strb	r3, [r7, #12]
      _nestingLimit++;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	7b1b      	ldrb	r3, [r3, #12]
 8002154:	3301      	adds	r3, #1
 8002156:	b2da      	uxtb	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	731a      	strb	r2, [r3, #12]
      if (err) return err;
 800215c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002160:	f107 020c 	add.w	r2, r7, #12
 8002164:	4611      	mov	r1, r2
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe ffcc 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 800216c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800216e:	2b00      	cmp	r3, #0
 8002170:	d106      	bne.n	8002180 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x162>
 8002172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x162>
 800217c:	2301      	movs	r3, #1
 800217e:	e000      	b.n	8002182 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x164>
 8002180:	2300      	movs	r3, #0
 8002182:	f083 0301 	eor.w	r3, r3, #1
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x172>
 800218c:	7b3b      	ldrb	r3, [r7, #12]
 800218e:	e069      	b.n	8002264 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
      err = skipSpacesAndComments();
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff fe3b 	bl	8001e0c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 8002196:	4603      	mov	r3, r0
 8002198:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 800219a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800219e:	f107 020c 	add.w	r2, r7, #12
 80021a2:	4611      	mov	r1, r2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe ffad 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80021aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d106      	bne.n	80021be <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a0>
 80021b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a0>
 80021ba:	2301      	movs	r3, #1
 80021bc:	e000      	b.n	80021c0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1a2>
 80021be:	2300      	movs	r3, #0
 80021c0:	f083 0301 	eor.w	r3, r3, #1
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1b0>
 80021ca:	7b3b      	ldrb	r3, [r7, #12]
 80021cc:	e04a      	b.n	8002264 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80021d2:	235d      	movs	r3, #93	@ 0x5d
 80021d4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (current() != charToSkip) return false;
 80021d8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80021da:	f7ff fef7 	bl	8001fcc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80021de:	4603      	mov	r3, r0
 80021e0:	461a      	mov	r2, r3
 80021e2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80021e6:	4293      	cmp	r3, r2
 80021e8:	bf14      	ite	ne
 80021ea:	2301      	movne	r3, #1
 80021ec:	2300      	moveq	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1da>
 80021f4:	2300      	movs	r3, #0
 80021f6:	e003      	b.n	8002200 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1e2>
    move();
 80021f8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80021fa:	f000 fa19 	bl	8002630 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 80021fe:	2301      	movs	r3, #1
      if (eat(']')) return DeserializationError::Ok;
 8002200:	2b00      	cmp	r3, #0
 8002202:	d008      	beq.n	8002216 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x1f8>
 8002204:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002208:	2100      	movs	r1, #0
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe ff69 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002210:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002214:	e026      	b.n	8002264 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x246>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	643b      	str	r3, [r7, #64]	@ 0x40
 800221a:	232c      	movs	r3, #44	@ 0x2c
 800221c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (current() != charToSkip) return false;
 8002220:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002222:	f7ff fed3 	bl	8001fcc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002226:	4603      	mov	r3, r0
 8002228:	461a      	mov	r2, r3
 800222a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800222e:	4293      	cmp	r3, r2
 8002230:	bf14      	ite	ne
 8002232:	2301      	movne	r3, #1
 8002234:	2300      	moveq	r3, #0
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x222>
 800223c:	2300      	movs	r3, #0
 800223e:	e003      	b.n	8002248 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0x22a>
    move();
 8002240:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002242:	f000 f9f5 	bl	8002630 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8002246:	2301      	movs	r3, #1
      if (!eat(',')) return DeserializationError::InvalidInput;
 8002248:	f083 0301 	eor.w	r3, r3, #1
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	f43f af5f 	beq.w	8002112 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseArrayERNS_14CollectionDataE+0xf4>
 8002254:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002258:	2102      	movs	r1, #2
 800225a:	4618      	mov	r0, r3
 800225c:	f7fe ff41 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002260:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
  }
 8002264:	4618      	mov	r0, r3
 8002266:	3760      	adds	r7, #96	@ 0x60
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE>:
  DeserializationError parseObject(CollectionData &object) {
 800226c:	b590      	push	{r4, r7, lr}
 800226e:	b0a3      	sub	sp, #140	@ 0x8c
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	7b1b      	ldrb	r3, [r3, #12]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d107      	bne.n	800228e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x22>
 800227e:	f107 0310 	add.w	r3, r7, #16
 8002282:	2105      	movs	r1, #5
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe ff2c 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800228a:	7c3b      	ldrb	r3, [r7, #16]
 800228c:	e1ad      	b.n	80025ea <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002294:	237b      	movs	r3, #123	@ 0x7b
 8002296:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    if (current() != charToSkip) return false;
 800229a:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800229e:	f7ff fe95 	bl	8001fcc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80022a2:	4603      	mov	r3, r0
 80022a4:	461a      	mov	r2, r3
 80022a6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80022aa:	4293      	cmp	r3, r2
 80022ac:	bf14      	ite	ne
 80022ae:	2301      	movne	r3, #1
 80022b0:	2300      	moveq	r3, #0
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x50>
 80022b8:	2300      	movs	r3, #0
 80022ba:	e004      	b.n	80022c6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x5a>
    move();
 80022bc:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80022c0:	f000 f9b6 	bl	8002630 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 80022c4:	2301      	movs	r3, #1
    if (!eat('{')) return DeserializationError::InvalidInput;
 80022c6:	f083 0301 	eor.w	r3, r3, #1
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d007      	beq.n	80022e0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x74>
 80022d0:	f107 0314 	add.w	r3, r7, #20
 80022d4:	2102      	movs	r1, #2
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe ff03 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80022dc:	7d3b      	ldrb	r3, [r7, #20]
 80022de:	e184      	b.n	80025ea <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
    DeserializationError err = skipSpacesAndComments();
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f7ff fd93 	bl	8001e0c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 80022e6:	4603      	mov	r3, r0
 80022e8:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 80022ea:	f107 0318 	add.w	r3, r7, #24
 80022ee:	f107 020c 	add.w	r2, r7, #12
 80022f2:	4611      	mov	r1, r2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fe ff05 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d106      	bne.n	800230e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa2>
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa2>
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xa4>
 800230e:	2300      	movs	r3, #0
 8002310:	f083 0301 	eor.w	r3, r3, #1
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xb2>
 800231a:	7b3b      	ldrb	r3, [r7, #12]
 800231c:	e165      	b.n	80025ea <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002322:	237d      	movs	r3, #125	@ 0x7d
 8002324:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    if (current() != charToSkip) return false;
 8002328:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800232a:	f7ff fe4f 	bl	8001fcc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800232e:	4603      	mov	r3, r0
 8002330:	461a      	mov	r2, r3
 8002332:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002336:	4293      	cmp	r3, r2
 8002338:	bf14      	ite	ne
 800233a:	2301      	movne	r3, #1
 800233c:	2300      	moveq	r3, #0
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xdc>
 8002344:	2300      	movs	r3, #0
 8002346:	e003      	b.n	8002350 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xe4>
    move();
 8002348:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800234a:	f000 f971 	bl	8002630 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 800234e:	2301      	movs	r3, #1
    if (eat('}')) return DeserializationError::Ok;
 8002350:	2b00      	cmp	r3, #0
 8002352:	d008      	beq.n	8002366 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xfa>
 8002354:	f107 0320 	add.w	r3, r7, #32
 8002358:	2100      	movs	r1, #0
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe fec1 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002360:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002364:	e141      	b.n	80025ea <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      VariantSlot *slot = object.addSlot(_pool);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4619      	mov	r1, r3
 800236c:	6838      	ldr	r0, [r7, #0]
 800236e:	f7fe fd9e 	bl	8000eae <_ZN19ArduinoJson6101_11014CollectionData7addSlotEPNS_10MemoryPoolE>
 8002372:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
      if (!slot) return DeserializationError::NoMemory;
 8002376:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800237a:	2b00      	cmp	r3, #0
 800237c:	d108      	bne.n	8002390 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x124>
 800237e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002382:	2103      	movs	r1, #3
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe feac 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800238a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800238e:	e12c      	b.n	80025ea <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      err = parseKey(key);
 8002390:	f107 0308 	add.w	r3, r7, #8
 8002394:	4619      	mov	r1, r3
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f957 	bl	800264a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc>
 800239c:	4603      	mov	r3, r0
 800239e:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 80023a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023a4:	f107 020c 	add.w	r2, r7, #12
 80023a8:	4611      	mov	r1, r2
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe feaa 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80023b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d106      	bne.n	80023c4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x158>
 80023b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x158>
 80023c0:	2301      	movs	r3, #1
 80023c2:	e000      	b.n	80023c6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x15a>
 80023c4:	2300      	movs	r3, #0
 80023c6:	f083 0301 	eor.w	r3, r3, #1
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x168>
 80023d0:	7b3b      	ldrb	r3, [r7, #12]
 80023d2:	e10a      	b.n	80025ea <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      slot->setOwnedKey(make_not_null(key));
 80023d4:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fb91 	bl	8001b02 <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>
 80023e0:	4603      	mov	r3, r0
 80023e2:	4619      	mov	r1, r3
 80023e4:	4620      	mov	r0, r4
 80023e6:	f7fe fb50 	bl	8000a8a <_ZN19ArduinoJson6101_11011VariantSlot11setOwnedKeyENS_8not_nullIPKcEE>
      err = skipSpacesAndComments();
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff fd0e 	bl	8001e0c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 80023f0:	4603      	mov	r3, r0
 80023f2:	733b      	strb	r3, [r7, #12]
      if (err) return err;  // Colon
 80023f4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80023f8:	f107 020c 	add.w	r2, r7, #12
 80023fc:	4611      	mov	r1, r2
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe fe80 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 8002404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002406:	2b00      	cmp	r3, #0
 8002408:	d106      	bne.n	8002418 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ac>
 800240a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ac>
 8002414:	2301      	movs	r3, #1
 8002416:	e000      	b.n	800241a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ae>
 8002418:	2300      	movs	r3, #0
 800241a:	f083 0301 	eor.w	r3, r3, #1
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1bc>
 8002424:	7b3b      	ldrb	r3, [r7, #12]
 8002426:	e0e0      	b.n	80025ea <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	673b      	str	r3, [r7, #112]	@ 0x70
 800242c:	233a      	movs	r3, #58	@ 0x3a
 800242e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    if (current() != charToSkip) return false;
 8002432:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002434:	f7ff fdca 	bl	8001fcc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002438:	4603      	mov	r3, r0
 800243a:	461a      	mov	r2, r3
 800243c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8002440:	4293      	cmp	r3, r2
 8002442:	bf14      	ite	ne
 8002444:	2301      	movne	r3, #1
 8002446:	2300      	moveq	r3, #0
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1e6>
 800244e:	2300      	movs	r3, #0
 8002450:	e003      	b.n	800245a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x1ee>
    move();
 8002452:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002454:	f000 f8ec 	bl	8002630 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8002458:	2301      	movs	r3, #1
      if (!eat(':')) return DeserializationError::InvalidInput;
 800245a:	f083 0301 	eor.w	r3, r3, #1
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b00      	cmp	r3, #0
 8002462:	d008      	beq.n	8002476 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x20a>
 8002464:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002468:	2102      	movs	r1, #2
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe fe39 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002470:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002474:	e0b9      	b.n	80025ea <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      _nestingLimit--;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	7b1b      	ldrb	r3, [r3, #12]
 800247a:	3b01      	subs	r3, #1
 800247c:	b2da      	uxtb	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	731a      	strb	r2, [r3, #12]
      err = parse(*slot->data());
 8002482:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002486:	f7fe fae3 	bl	8000a50 <_ZN19ArduinoJson6101_11011VariantSlot4dataEv>
 800248a:	4603      	mov	r3, r0
 800248c:	4619      	mov	r1, r3
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7ff fc43 	bl	8001d1a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE5parseERNS_11VariantDataE>
 8002494:	4603      	mov	r3, r0
 8002496:	733b      	strb	r3, [r7, #12]
      _nestingLimit++;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	7b1b      	ldrb	r3, [r3, #12]
 800249c:	3301      	adds	r3, #1
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	731a      	strb	r2, [r3, #12]
      if (err) return err;
 80024a4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80024a8:	f107 020c 	add.w	r2, r7, #12
 80024ac:	4611      	mov	r1, r2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fe fe28 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80024b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d106      	bne.n	80024c8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25c>
 80024ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25c>
 80024c4:	2301      	movs	r3, #1
 80024c6:	e000      	b.n	80024ca <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x25e>
 80024c8:	2300      	movs	r3, #0
 80024ca:	f083 0301 	eor.w	r3, r3, #1
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x26c>
 80024d4:	7b3b      	ldrb	r3, [r7, #12]
 80024d6:	e088      	b.n	80025ea <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      err = skipSpacesAndComments();
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff fc97 	bl	8001e0c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 80024de:	4603      	mov	r3, r0
 80024e0:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 80024e2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80024e6:	f107 020c 	add.w	r2, r7, #12
 80024ea:	4611      	mov	r1, r2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fe fe09 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80024f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d106      	bne.n	8002506 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x29a>
 80024f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x29a>
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x29c>
 8002506:	2300      	movs	r3, #0
 8002508:	f083 0301 	eor.w	r3, r3, #1
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2aa>
 8002512:	7b3b      	ldrb	r3, [r7, #12]
 8002514:	e069      	b.n	80025ea <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	66bb      	str	r3, [r7, #104]	@ 0x68
 800251a:	237d      	movs	r3, #125	@ 0x7d
 800251c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if (current() != charToSkip) return false;
 8002520:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002522:	f7ff fd53 	bl	8001fcc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002526:	4603      	mov	r3, r0
 8002528:	461a      	mov	r2, r3
 800252a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800252e:	4293      	cmp	r3, r2
 8002530:	bf14      	ite	ne
 8002532:	2301      	movne	r3, #1
 8002534:	2300      	moveq	r3, #0
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2d4>
 800253c:	2300      	movs	r3, #0
 800253e:	e003      	b.n	8002548 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2dc>
    move();
 8002540:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002542:	f000 f875 	bl	8002630 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 8002546:	2301      	movs	r3, #1
      if (eat('}')) return DeserializationError::Ok;
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x2f2>
 800254c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002550:	2100      	movs	r1, #0
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe fdc5 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002558:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800255c:	e045      	b.n	80025ea <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	663b      	str	r3, [r7, #96]	@ 0x60
 8002562:	232c      	movs	r3, #44	@ 0x2c
 8002564:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (current() != charToSkip) return false;
 8002568:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800256a:	f7ff fd2f 	bl	8001fcc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800256e:	4603      	mov	r3, r0
 8002570:	461a      	mov	r2, r3
 8002572:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002576:	4293      	cmp	r3, r2
 8002578:	bf14      	ite	ne
 800257a:	2301      	movne	r3, #1
 800257c:	2300      	moveq	r3, #0
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x31c>
 8002584:	2300      	movs	r3, #0
 8002586:	e003      	b.n	8002590 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x324>
    move();
 8002588:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800258a:	f000 f851 	bl	8002630 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
    return true;
 800258e:	2301      	movs	r3, #1
      if (!eat(',')) return DeserializationError::InvalidInput;
 8002590:	f083 0301 	eor.w	r3, r3, #1
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d008      	beq.n	80025ac <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x340>
 800259a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800259e:	2102      	movs	r1, #2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fe fd9e 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80025a6:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80025aa:	e01e      	b.n	80025ea <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x37e>
      err = skipSpacesAndComments();
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7ff fc2d 	bl	8001e0c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE21skipSpacesAndCommentsEv>
 80025b2:	4603      	mov	r3, r0
 80025b4:	733b      	strb	r3, [r7, #12]
      if (err) return err;
 80025b6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80025ba:	f107 020c 	add.w	r2, r7, #12
 80025be:	4611      	mov	r1, r2
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fe fd9f 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80025c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d106      	bne.n	80025da <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x36e>
 80025cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x36e>
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0x370>
 80025da:	2300      	movs	r3, #0
 80025dc:	f083 0301 	eor.w	r3, r3, #1
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f43f aebf 	beq.w	8002366 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE11parseObjectERNS_14CollectionDataE+0xfa>
 80025e8:	7b3b      	ldrb	r3, [r7, #12]
  }
 80025ea:	4618      	mov	r0, r3
 80025ec:	378c      	adds	r7, #140	@ 0x8c
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd90      	pop	{r4, r7, pc}

080025f2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE>:
  DeserializationError parseValue(VariantData &variant) {
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b082      	sub	sp, #8
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
 80025fa:	6039      	str	r1, [r7, #0]
    if (isQuote(current())) {
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff fce5 	bl	8001fcc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002602:	4603      	mov	r3, r0
 8002604:	4618      	mov	r0, r3
 8002606:	f000 f83f 	bl	8002688 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d005      	beq.n	800261c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE+0x2a>
      return parseStringValue(variant);
 8002610:	6839      	ldr	r1, [r7, #0]
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f84c 	bl	80026b0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE>
 8002618:	4603      	mov	r3, r0
 800261a:	e005      	b.n	8002628 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE10parseValueERNS_11VariantDataE+0x36>
      return parseNumericValue(variant);
 800261c:	6839      	ldr	r1, [r7, #0]
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f881 	bl	8002726 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE>
 8002624:	4603      	mov	r3, r0
 8002626:	bf00      	nop
  }
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>:
  void move() {
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
    _loaded = false;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	739a      	strb	r2, [r3, #14]
  }
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc>:
  DeserializationError parseKey(const char *&key) {
 800264a:	b580      	push	{r7, lr}
 800264c:	b082      	sub	sp, #8
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
 8002652:	6039      	str	r1, [r7, #0]
    if (isQuote(current())) {
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7ff fcb9 	bl	8001fcc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800265a:	4603      	mov	r3, r0
 800265c:	4618      	mov	r0, r3
 800265e:	f000 f813 	bl	8002688 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d005      	beq.n	8002674 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x2a>
      return parseQuotedString(key);
 8002668:	6839      	ldr	r1, [r7, #0]
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f92f 	bl	80028ce <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>
 8002670:	4603      	mov	r3, r0
 8002672:	e005      	b.n	8002680 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE8parseKeyERPKc+0x36>
      return parseNonQuotedString(key);
 8002674:	6839      	ldr	r1, [r7, #0]
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f9c1 	bl	80029fe <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc>
 800267c:	4603      	mov	r3, r0
 800267e:	bf00      	nop
  }
 8002680:	4618      	mov	r0, r3
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc>:
  static inline bool isQuote(char c) {
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	71fb      	strb	r3, [r7, #7]
    return c == '\'' || c == '\"';
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	2b27      	cmp	r3, #39	@ 0x27
 8002696:	d002      	beq.n	800269e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x16>
 8002698:	79fb      	ldrb	r3, [r7, #7]
 800269a:	2b22      	cmp	r3, #34	@ 0x22
 800269c:	d101      	bne.n	80026a2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x1a>
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7isQuoteEc+0x1c>
 80026a2:	2300      	movs	r3, #0
  }
 80026a4:	4618      	mov	r0, r3
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE>:
  DeserializationError parseStringValue(VariantData &variant) {
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
    DeserializationError err = parseQuotedString(value);
 80026ba:	f107 0310 	add.w	r3, r7, #16
 80026be:	4619      	mov	r1, r3
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f904 	bl	80028ce <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>
 80026c6:	4603      	mov	r3, r0
 80026c8:	733b      	strb	r3, [r7, #12]
    if (err) return err;
 80026ca:	f107 0314 	add.w	r3, r7, #20
 80026ce:	f107 020c 	add.w	r2, r7, #12
 80026d2:	4611      	mov	r1, r2
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7fe fd15 	bl	8001104 <_ZNK19ArduinoJson6101_11020DeserializationErrorcvMS0_KFvvEEv>
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d106      	bne.n	80026ee <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x3e>
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x3e>
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x40>
 80026ee:	2300      	movs	r3, #0
 80026f0:	f083 0301 	eor.w	r3, r3, #1
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x4e>
 80026fa:	7b3b      	ldrb	r3, [r7, #12]
 80026fc:	e00f      	b.n	800271e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE16parseStringValueERNS_11VariantDataE+0x6e>
    variant.setOwnedString(make_not_null(value));
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff f9fe 	bl	8001b02 <_ZN19ArduinoJson6101_11013make_not_nullIPKcEENS_8not_nullIT_EES4_>
 8002706:	4603      	mov	r3, r0
 8002708:	4619      	mov	r1, r3
 800270a:	6838      	ldr	r0, [r7, #0]
 800270c:	f7fe fb16 	bl	8000d3c <_ZN19ArduinoJson6101_11011VariantData14setOwnedStringENS_8not_nullIPKcEE>
    return DeserializationError::Ok;
 8002710:	f107 031c 	add.w	r3, r7, #28
 8002714:	2100      	movs	r1, #0
 8002716:	4618      	mov	r0, r3
 8002718:	f7fe fce3 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800271c:	7f3b      	ldrb	r3, [r7, #28]
  }
 800271e:	4618      	mov	r0, r3
 8002720:	3720      	adds	r7, #32
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE>:
  DeserializationError parseNumericValue(VariantData &result) {
 8002726:	b580      	push	{r7, lr}
 8002728:	b0a0      	sub	sp, #128	@ 0x80
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	6039      	str	r1, [r7, #0]
    uint8_t n = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    char c = current();
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7ff fc48 	bl	8001fcc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 800273c:	4603      	mov	r3, r0
 800273e:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    while (canBeInNonQuotedString(c) && n < 63) {
 8002742:	e013      	b.n	800276c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x46>
      move();
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7ff ff73 	bl	8002630 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      buffer[n++] = c;
 800274a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800274e:	1c5a      	adds	r2, r3, #1
 8002750:	f887 207f 	strb.w	r2, [r7, #127]	@ 0x7f
 8002754:	3380      	adds	r3, #128	@ 0x80
 8002756:	443b      	add	r3, r7
 8002758:	f897 207e 	ldrb.w	r2, [r7, #126]	@ 0x7e
 800275c:	f803 2c5c 	strb.w	r2, [r3, #-92]
      c = current();
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7ff fc33 	bl	8001fcc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002766:	4603      	mov	r3, r0
 8002768:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    while (canBeInNonQuotedString(c) && n < 63) {
 800276c:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8002770:	4618      	mov	r0, r3
 8002772:	f000 f9af 	bl	8002ad4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x62>
 800277c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002780:	2b3e      	cmp	r3, #62	@ 0x3e
 8002782:	d801      	bhi.n	8002788 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x62>
 8002784:	2301      	movs	r3, #1
 8002786:	e000      	b.n	800278a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x64>
 8002788:	2300      	movs	r3, #0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1da      	bne.n	8002744 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1e>
    buffer[n] = 0;
 800278e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002792:	3380      	adds	r3, #128	@ 0x80
 8002794:	443b      	add	r3, r7
 8002796:	2200      	movs	r2, #0
 8002798:	f803 2c5c 	strb.w	r2, [r3, #-92]
    c = buffer[0];
 800279c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80027a0:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    if (c == 't') {  // true
 80027a4:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80027a8:	2b74      	cmp	r3, #116	@ 0x74
 80027aa:	d114      	bne.n	80027d6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xb0>
      result.setBoolean(true);
 80027ac:	2101      	movs	r1, #1
 80027ae:	6838      	ldr	r0, [r7, #0]
 80027b0:	f7fe fa6a 	bl	8000c88 <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>
      return n == 4 ? DeserializationError::Ok
 80027b4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80027b8:	2b04      	cmp	r3, #4
 80027ba:	bf14      	ite	ne
 80027bc:	2301      	movne	r3, #1
 80027be:	2300      	moveq	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
                    : DeserializationError::IncompleteInput;
 80027c2:	461a      	mov	r2, r3
 80027c4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80027c8:	4611      	mov	r1, r2
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fe fc89 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80027d0:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80027d4:	e077      	b.n	80028c6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    if (c == 'f') {  // false
 80027d6:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80027da:	2b66      	cmp	r3, #102	@ 0x66
 80027dc:	d114      	bne.n	8002808 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0xe2>
      result.setBoolean(false);
 80027de:	2100      	movs	r1, #0
 80027e0:	6838      	ldr	r0, [r7, #0]
 80027e2:	f7fe fa51 	bl	8000c88 <_ZN19ArduinoJson6101_11011VariantData10setBooleanEb>
      return n == 5 ? DeserializationError::Ok
 80027e6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80027ea:	2b05      	cmp	r3, #5
 80027ec:	bf14      	ite	ne
 80027ee:	2301      	movne	r3, #1
 80027f0:	2300      	moveq	r3, #0
 80027f2:	b2db      	uxtb	r3, r3
                    : DeserializationError::IncompleteInput;
 80027f4:	461a      	mov	r2, r3
 80027f6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80027fa:	4611      	mov	r1, r2
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7fe fc70 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002802:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8002806:	e05e      	b.n	80028c6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    if (c == 'n') {  // null
 8002808:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800280c:	2b6e      	cmp	r3, #110	@ 0x6e
 800280e:	d110      	bne.n	8002832 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x10c>
      return n == 4 ? DeserializationError::Ok
 8002810:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002814:	2b04      	cmp	r3, #4
 8002816:	bf14      	ite	ne
 8002818:	2301      	movne	r3, #1
 800281a:	2300      	moveq	r3, #0
 800281c:	b2db      	uxtb	r3, r3
                    : DeserializationError::IncompleteInput;
 800281e:	461a      	mov	r2, r3
 8002820:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002824:	4611      	mov	r1, r2
 8002826:	4618      	mov	r0, r3
 8002828:	f7fe fc5b 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800282c:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8002830:	e049      	b.n	80028c6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    ParsedNumber<Float, UInt> num = parseNumber<Float, UInt>(buffer);
 8002832:	f107 0308 	add.w	r3, r7, #8
 8002836:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800283a:	4611      	mov	r1, r2
 800283c:	4618      	mov	r0, r3
 800283e:	f000 f97b 	bl	8002b38 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>
    switch (num.type()) {
 8002842:	f107 0308 	add.w	r3, r7, #8
 8002846:	4618      	mov	r0, r3
 8002848:	f000 fb7c 	bl	8002f44 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE4typeEv>
 800284c:	4603      	mov	r3, r0
 800284e:	2b08      	cmp	r3, #8
 8002850:	d021      	beq.n	8002896 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x170>
 8002852:	2b08      	cmp	r3, #8
 8002854:	dc2f      	bgt.n	80028b6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x190>
 8002856:	2b06      	cmp	r3, #6
 8002858:	d00f      	beq.n	800287a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x154>
 800285a:	2b07      	cmp	r3, #7
 800285c:	d12b      	bne.n	80028b6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x190>
        result.setNegativeInteger(num.uintValue);
 800285e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002862:	6838      	ldr	r0, [r7, #0]
 8002864:	f7fe fa4b 	bl	8000cfe <_ZN19ArduinoJson6101_11011VariantData18setNegativeIntegerEy>
        return DeserializationError::Ok;
 8002868:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800286c:	2100      	movs	r1, #0
 800286e:	4618      	mov	r0, r3
 8002870:	f7fe fc37 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002874:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8002878:	e025      	b.n	80028c6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
        result.setPositiveInteger(num.uintValue);
 800287a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800287e:	6838      	ldr	r0, [r7, #0]
 8002880:	f7fe fa2a 	bl	8000cd8 <_ZN19ArduinoJson6101_11011VariantData18setPositiveIntegerEy>
        return DeserializationError::Ok;
 8002884:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002888:	2100      	movs	r1, #0
 800288a:	4618      	mov	r0, r3
 800288c:	f7fe fc29 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002890:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8002894:	e017      	b.n	80028c6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
        result.setFloat(num.floatValue);
 8002896:	ed97 7b04 	vldr	d7, [r7, #16]
 800289a:	eeb0 0b47 	vmov.f64	d0, d7
 800289e:	6838      	ldr	r0, [r7, #0]
 80028a0:	f7fe fa07 	bl	8000cb2 <_ZN19ArduinoJson6101_11011VariantData8setFloatEd>
        return DeserializationError::Ok;
 80028a4:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80028a8:	2100      	movs	r1, #0
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fe fc19 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80028b0:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80028b4:	e007      	b.n	80028c6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE+0x1a0>
    return DeserializationError::InvalidInput;
 80028b6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80028ba:	2102      	movs	r1, #2
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fe fc10 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80028c2:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
  }
 80028c6:	4618      	mov	r0, r3
 80028c8:	3780      	adds	r7, #128	@ 0x80
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc>:
  DeserializationError parseQuotedString(const char *&result) {
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b08c      	sub	sp, #48	@ 0x30
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
 80028d6:	6039      	str	r1, [r7, #0]
    StringBuilder builder = _stringStorage.startString();
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f103 0208 	add.w	r2, r3, #8
 80028de:	f107 0308 	add.w	r3, r7, #8
 80028e2:	4611      	mov	r1, r2
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7fe fbb1 	bl	800104c <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>
    const char stopChar = current();
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff fb6e 	bl	8001fcc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 80028f0:	4603      	mov	r3, r0
 80028f2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    move();
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7ff fe9a 	bl	8002630 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      char c = current();
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f7ff fb65 	bl	8001fcc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002902:	4603      	mov	r3, r0
 8002904:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      move();
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff fe91 	bl	8002630 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      if (c == stopChar) break;
 800290e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002912:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002916:	429a      	cmp	r2, r3
 8002918:	d04f      	beq.n	80029ba <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xec>
      if (c == '\0') return DeserializationError::IncompleteInput;
 800291a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800291e:	2b00      	cmp	r3, #0
 8002920:	d107      	bne.n	8002932 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x64>
 8002922:	f107 0318 	add.w	r3, r7, #24
 8002926:	2101      	movs	r1, #1
 8002928:	4618      	mov	r0, r3
 800292a:	f7fe fbda 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800292e:	7e3b      	ldrb	r3, [r7, #24]
 8002930:	e061      	b.n	80029f6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
      if (c == '\\') {
 8002932:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002936:	2b5c      	cmp	r3, #92	@ 0x5c
 8002938:	d136      	bne.n	80029a8 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xda>
        c = current();
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7ff fb46 	bl	8001fcc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002940:	4603      	mov	r3, r0
 8002942:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (c == '\0') return DeserializationError::IncompleteInput;
 8002946:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800294a:	2b00      	cmp	r3, #0
 800294c:	d107      	bne.n	800295e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x90>
 800294e:	f107 031c 	add.w	r3, r7, #28
 8002952:	2101      	movs	r1, #1
 8002954:	4618      	mov	r0, r3
 8002956:	f7fe fbc4 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800295a:	7f3b      	ldrb	r3, [r7, #28]
 800295c:	e04b      	b.n	80029f6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        if (c == 'u') {
 800295e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002962:	2b75      	cmp	r3, #117	@ 0x75
 8002964:	d108      	bne.n	8002978 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xaa>
          return DeserializationError::NotSupported;
 8002966:	f107 0320 	add.w	r3, r7, #32
 800296a:	2104      	movs	r1, #4
 800296c:	4618      	mov	r0, r3
 800296e:	f7fe fbb8 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002972:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002976:	e03e      	b.n	80029f6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        c = EscapeSequence::unescapeChar(c);
 8002978:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800297c:	4618      	mov	r0, r3
 800297e:	f7fe fc33 	bl	80011e8 <_ZN19ArduinoJson6101_11014EscapeSequence12unescapeCharEc>
 8002982:	4603      	mov	r3, r0
 8002984:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (c == '\0') return DeserializationError::InvalidInput;
 8002988:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800298c:	2b00      	cmp	r3, #0
 800298e:	d108      	bne.n	80029a2 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0xd4>
 8002990:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002994:	2102      	movs	r1, #2
 8002996:	4618      	mov	r0, r3
 8002998:	f7fe fba3 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 800299c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80029a0:	e029      	b.n	80029f6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
        move();
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff fe44 	bl	8002630 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
      builder.append(c);
 80029a8:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80029ac:	f107 0308 	add.w	r3, r7, #8
 80029b0:	4611      	mov	r1, r2
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fe fafa 	bl	8000fac <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
    for (;;) {
 80029b8:	e7a0      	b.n	80028fc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x2e>
      if (c == stopChar) break;
 80029ba:	bf00      	nop
    result = builder.complete();
 80029bc:	f107 0308 	add.w	r3, r7, #8
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fe fb18 	bl	8000ff6 <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>
 80029c6:	4602      	mov	r2, r0
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	601a      	str	r2, [r3, #0]
    if (!result) return DeserializationError::NoMemory;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d108      	bne.n	80029e6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x118>
 80029d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029d8:	2103      	movs	r1, #3
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fe fb81 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80029e0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80029e4:	e007      	b.n	80029f6 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE17parseQuotedStringERPKc+0x128>
    return DeserializationError::Ok;
 80029e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029ea:	2100      	movs	r1, #0
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fe fb78 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 80029f2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
  }
 80029f6:	4618      	mov	r0, r3
 80029f8:	3730      	adds	r7, #48	@ 0x30
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc>:
  DeserializationError parseNonQuotedString(const char *&result) {
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b08a      	sub	sp, #40	@ 0x28
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	6039      	str	r1, [r7, #0]
    StringBuilder builder = _stringStorage.startString();
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f103 0208 	add.w	r2, r3, #8
 8002a0e:	f107 0308 	add.w	r3, r7, #8
 8002a12:	4611      	mov	r1, r2
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7fe fb19 	bl	800104c <_ZN19ArduinoJson6101_11012StringCopier11startStringEv>
    char c = current();
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7ff fad6 	bl	8001fcc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002a20:	4603      	mov	r3, r0
 8002a22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (c == '\0') return DeserializationError::IncompleteInput;
 8002a26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d107      	bne.n	8002a3e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x40>
 8002a2e:	f107 0318 	add.w	r3, r7, #24
 8002a32:	2101      	movs	r1, #1
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fe fb54 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002a3a:	7e3b      	ldrb	r3, [r7, #24]
 8002a3c:	e046      	b.n	8002acc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    if (canBeInNonQuotedString(c)) {  // no quotes
 8002a3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 f846 	bl	8002ad4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d019      	beq.n	8002a82 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x84>
        move();
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7ff fdee 	bl	8002630 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE4moveEv>
        builder.append(c);
 8002a54:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002a58:	f107 0308 	add.w	r3, r7, #8
 8002a5c:	4611      	mov	r1, r2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fe faa4 	bl	8000fac <_ZN19ArduinoJson6101_11013StringBuilder6appendEc>
        c = current();
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f7ff fab1 	bl	8001fcc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE7currentEv>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      } while (canBeInNonQuotedString(c));
 8002a70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 f82d 	bl	8002ad4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1e6      	bne.n	8002a4e <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x50>
 8002a80:	e007      	b.n	8002a92 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0x94>
      return DeserializationError::InvalidInput;
 8002a82:	f107 031c 	add.w	r3, r7, #28
 8002a86:	2102      	movs	r1, #2
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7fe fb2a 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002a8e:	7f3b      	ldrb	r3, [r7, #28]
 8002a90:	e01c      	b.n	8002acc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    result = builder.complete();
 8002a92:	f107 0308 	add.w	r3, r7, #8
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fe faad 	bl	8000ff6 <_ZN19ArduinoJson6101_11013StringBuilder8completeEv>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	601a      	str	r2, [r3, #0]
    if (!result) return DeserializationError::NoMemory;
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d108      	bne.n	8002abc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xbe>
 8002aaa:	f107 0320 	add.w	r3, r7, #32
 8002aae:	2103      	movs	r1, #3
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fe fb16 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002ab6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002aba:	e007      	b.n	8002acc <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE20parseNonQuotedStringERPKc+0xce>
    return DeserializationError::Ok;
 8002abc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fe fb0d 	bl	80010e2 <_ZN19ArduinoJson6101_11020DeserializationErrorC1ENS0_4CodeE>
 8002ac8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
  }
 8002acc:	4618      	mov	r0, r3
 8002ace:	3728      	adds	r7, #40	@ 0x28
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc>:
  static inline bool canBeInNonQuotedString(char c) {
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 8002ade:	79fb      	ldrb	r3, [r7, #7]
 8002ae0:	2239      	movs	r2, #57	@ 0x39
 8002ae2:	2130      	movs	r1, #48	@ 0x30
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 fa39 	bl	8002f5c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 8002aea:	4603      	mov	r3, r0
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d11a      	bne.n	8002b26 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 8002af0:	79fb      	ldrb	r3, [r7, #7]
 8002af2:	227a      	movs	r2, #122	@ 0x7a
 8002af4:	215f      	movs	r1, #95	@ 0x5f
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 fa30 	bl	8002f5c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d111      	bne.n	8002b26 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	225a      	movs	r2, #90	@ 0x5a
 8002b06:	2141      	movs	r1, #65	@ 0x41
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f000 fa27 	bl	8002f5c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>
 8002b0e:	4603      	mov	r3, r0
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d108      	bne.n	8002b26 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 8002b14:	79fb      	ldrb	r3, [r7, #7]
 8002b16:	2b2b      	cmp	r3, #43	@ 0x2b
 8002b18:	d005      	beq.n	8002b26 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	2b2d      	cmp	r3, #45	@ 0x2d
 8002b1e:	d002      	beq.n	8002b26 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x52>
 8002b20:	79fb      	ldrb	r3, [r7, #7]
 8002b22:	2b2e      	cmp	r3, #46	@ 0x2e
 8002b24:	d101      	bne.n	8002b2a <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x56>
 8002b26:	2301      	movs	r3, #1
 8002b28:	e000      	b.n	8002b2c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE22canBeInNonQuotedStringEc+0x58>
 8002b2a:	2300      	movs	r3, #0
  }
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	0000      	movs	r0, r0
	...

08002b38 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>:

template <typename A, typename B>
struct choose_largest : conditional<(sizeof(A) > sizeof(B)), A, B> {};

template <typename TFloat, typename TUInt>
inline ParsedNumber<TFloat, TUInt> parseNumber(const char *s) {
 8002b38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b3c:	b0a2      	sub	sp, #136	@ 0x88
 8002b3e:	af02      	add	r7, sp, #8
 8002b40:	6478      	str	r0, [r7, #68]	@ 0x44
 8002b42:	6439      	str	r1, [r7, #64]	@ 0x40
  typedef typename traits::exponent_type exponent_t;
  typedef ParsedNumber<TFloat, TUInt> return_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
 8002b44:	2300      	movs	r3, #0
 8002b46:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  switch (*s) {
 8002b4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b2b      	cmp	r3, #43	@ 0x2b
 8002b50:	d008      	beq.n	8002b64 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2c>
 8002b52:	2b2d      	cmp	r3, #45	@ 0x2d
 8002b54:	d10a      	bne.n	8002b6c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x34>
    case '-':
      is_negative = true;
 8002b56:	2301      	movs	r3, #1
 8002b58:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      s++;
 8002b5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b5e:	3301      	adds	r3, #1
 8002b60:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8002b62:	e003      	b.n	8002b6c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x34>
    case '+':
      s++;
 8002b64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b66:	3301      	adds	r3, #1
 8002b68:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8002b6a:	bf00      	nop
  }

  if (*s == 'n' || *s == 'N') return traits::nan();
 8002b6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b6e      	cmp	r3, #110	@ 0x6e
 8002b72:	d003      	beq.n	8002b7c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x44>
 8002b74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b4e      	cmp	r3, #78	@ 0x4e
 8002b7a:	d109      	bne.n	8002b90 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x58>
 8002b7c:	f000 fa08 	bl	8002f90 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv>
 8002b80:	eeb0 7b40 	vmov.f64	d7, d0
 8002b84:	eeb0 0b47 	vmov.f64	d0, d7
 8002b88:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002b8a:	f000 fa0f 	bl	8002fac <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8002b8e:	e1d4      	b.n	8002f3a <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
  if (*s == 'i' || *s == 'I')
 8002b90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b69      	cmp	r3, #105	@ 0x69
 8002b96:	d003      	beq.n	8002ba0 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x68>
 8002b98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b49      	cmp	r3, #73	@ 0x49
 8002b9e:	d114      	bne.n	8002bca <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x92>
    return is_negative ? -traits::inf() : traits::inf();
 8002ba0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d006      	beq.n	8002bb6 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x7e>
 8002ba8:	f000 fa16 	bl	8002fd8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8002bac:	eeb0 7b40 	vmov.f64	d7, d0
 8002bb0:	eeb1 7b47 	vneg.f64	d7, d7
 8002bb4:	e003      	b.n	8002bbe <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x86>
 8002bb6:	f000 fa0f 	bl	8002fd8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8002bba:	eeb0 7b40 	vmov.f64	d7, d0
 8002bbe:	eeb0 0b47 	vmov.f64	d0, d7
 8002bc2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002bc4:	f000 f9f2 	bl	8002fac <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8002bc8:	e1b7      	b.n	8002f3a <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
  if (!isdigit(*s) && *s != '.') return return_type();
 8002bca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fe f9b9 	bl	8000f46 <_ZN19ArduinoJson6101_1107isdigitEc>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	f083 0301 	eor.w	r3, r3, #1
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d005      	beq.n	8002bec <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb4>
 8002be0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b2e      	cmp	r3, #46	@ 0x2e
 8002be6:	d001      	beq.n	8002bec <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb4>
 8002be8:	2301      	movs	r3, #1
 8002bea:	e000      	b.n	8002bee <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb6>
 8002bec:	2300      	movs	r3, #0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xc2>
 8002bf2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002bf4:	f000 f9fe 	bl	8002ff4 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>
 8002bf8:	e19f      	b.n	8002f3a <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>

  mantissa_t mantissa = 0;
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  exponent_t exponent_offset = 0;
 8002c06:	2300      	movs	r3, #0
 8002c08:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  const mantissa_t maxUint = TUInt(-1);
 8002c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c10:	f04f 33ff 	mov.w	r3, #4294967295
 8002c14:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

  while (isdigit(*s)) {
 8002c18:	e054      	b.n	8002cc4 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x18c>
    uint8_t digit = uint8_t(*s - '0');
 8002c1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	3b30      	subs	r3, #48	@ 0x30
 8002c20:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (mantissa > maxUint / 10) break;
 8002c24:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002c28:	f112 3f66 	cmn.w	r2, #1717986918	@ 0x66666666
 8002c2c:	49b2      	ldr	r1, [pc, #712]	@ (8002ef8 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3c0>)
 8002c2e:	418b      	sbcs	r3, r1
 8002c30:	d251      	bcs.n	8002cd6 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x19e>
    mantissa *= 10;
 8002c32:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8002c36:	4622      	mov	r2, r4
 8002c38:	462b      	mov	r3, r5
 8002c3a:	f04f 0000 	mov.w	r0, #0
 8002c3e:	f04f 0100 	mov.w	r1, #0
 8002c42:	0099      	lsls	r1, r3, #2
 8002c44:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002c48:	0090      	lsls	r0, r2, #2
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	eb12 0804 	adds.w	r8, r2, r4
 8002c52:	eb43 0905 	adc.w	r9, r3, r5
 8002c56:	eb18 0308 	adds.w	r3, r8, r8
 8002c5a:	61bb      	str	r3, [r7, #24]
 8002c5c:	eb49 0309 	adc.w	r3, r9, r9
 8002c60:	61fb      	str	r3, [r7, #28]
 8002c62:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002c66:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
    if (mantissa > maxUint - digit) break;
 8002c6a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002c6e:	2200      	movs	r2, #0
 8002c70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c72:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c74:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8002c78:	460b      	mov	r3, r1
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c7e:	4613      	mov	r3, r2
 8002c80:	43db      	mvns	r3, r3
 8002c82:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c84:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002c88:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c8c:	4621      	mov	r1, r4
 8002c8e:	4291      	cmp	r1, r2
 8002c90:	4629      	mov	r1, r5
 8002c92:	eb71 0303 	sbcs.w	r3, r1, r3
 8002c96:	d320      	bcc.n	8002cda <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a2>
    mantissa += digit;
 8002c98:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ca0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ca2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002ca6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002caa:	4621      	mov	r1, r4
 8002cac:	1851      	adds	r1, r2, r1
 8002cae:	6139      	str	r1, [r7, #16]
 8002cb0:	4629      	mov	r1, r5
 8002cb2:	414b      	adcs	r3, r1
 8002cb4:	617b      	str	r3, [r7, #20]
 8002cb6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002cba:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    s++;
 8002cbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	643b      	str	r3, [r7, #64]	@ 0x40
  while (isdigit(*s)) {
 8002cc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fe f93c 	bl	8000f46 <_ZN19ArduinoJson6101_1107isdigitEc>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1a2      	bne.n	8002c1a <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xe2>
 8002cd4:	e002      	b.n	8002cdc <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a4>
    if (mantissa > maxUint / 10) break;
 8002cd6:	bf00      	nop
 8002cd8:	e000      	b.n	8002cdc <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a4>
    if (mantissa > maxUint - digit) break;
 8002cda:	bf00      	nop
  }

  if (*s == '\0') return return_type(TUInt(mantissa), is_negative);
 8002cdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d11b      	bne.n	8002d1c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1e4>
 8002ce4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002cee:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002cf0:	f000 f99c 	bl	800302c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb>
 8002cf4:	e121      	b.n	8002f3a <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
    mantissa /= 10;
 8002cf6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002cfa:	f04f 020a 	mov.w	r2, #10
 8002cfe:	f04f 0300 	mov.w	r3, #0
 8002d02:	f7fd fcf9 	bl	80006f8 <__aeabi_uldivmod>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    exponent_offset++;
 8002d0e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	3301      	adds	r3, #1
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  while (mantissa > traits::mantissa_max) {
 8002d1c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002d20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d24:	d2e7      	bcs.n	8002cf6 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1be>
  }

  // remaing digits can't fit in the mantissa
  while (isdigit(*s)) {
 8002d26:	e009      	b.n	8002d3c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x204>
    exponent_offset++;
 8002d28:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	3301      	adds	r3, #1
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    s++;
 8002d36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d38:	3301      	adds	r3, #1
 8002d3a:	643b      	str	r3, [r7, #64]	@ 0x40
  while (isdigit(*s)) {
 8002d3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7fe f900 	bl	8000f46 <_ZN19ArduinoJson6101_1107isdigitEc>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1ed      	bne.n	8002d28 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1f0>
  }

  if (*s == '.') {
 8002d4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b2e      	cmp	r3, #46	@ 0x2e
 8002d52:	d14c      	bne.n	8002dee <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2b6>
    s++;
 8002d54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d56:	3301      	adds	r3, #1
 8002d58:	643b      	str	r3, [r7, #64]	@ 0x40
    while (isdigit(*s)) {
 8002d5a:	e040      	b.n	8002dde <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2a6>
      if (mantissa < traits::mantissa_max / 10) {
 8002d5c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002d60:	f1b2 3f99 	cmp.w	r2, #2576980377	@ 0x99999999
 8002d64:	4965      	ldr	r1, [pc, #404]	@ (8002efc <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3c4>)
 8002d66:	418b      	sbcs	r3, r1
 8002d68:	d236      	bcs.n	8002dd8 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2a0>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
 8002d6a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8002d6e:	4622      	mov	r2, r4
 8002d70:	462b      	mov	r3, r5
 8002d72:	f04f 0000 	mov.w	r0, #0
 8002d76:	f04f 0100 	mov.w	r1, #0
 8002d7a:	0099      	lsls	r1, r3, #2
 8002d7c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002d80:	0090      	lsls	r0, r2, #2
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	eb12 0a04 	adds.w	sl, r2, r4
 8002d8a:	eb43 0b05 	adc.w	fp, r3, r5
 8002d8e:	eb1a 030a 	adds.w	r3, sl, sl
 8002d92:	60bb      	str	r3, [r7, #8]
 8002d94:	eb4b 030b 	adc.w	r3, fp, fp
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002d9e:	4652      	mov	r2, sl
 8002da0:	465b      	mov	r3, fp
 8002da2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002da4:	7809      	ldrb	r1, [r1, #0]
 8002da6:	3930      	subs	r1, #48	@ 0x30
 8002da8:	b2c9      	uxtb	r1, r1
 8002daa:	b2c9      	uxtb	r1, r1
 8002dac:	2000      	movs	r0, #0
 8002dae:	6239      	str	r1, [r7, #32]
 8002db0:	6278      	str	r0, [r7, #36]	@ 0x24
 8002db2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002db6:	4621      	mov	r1, r4
 8002db8:	1851      	adds	r1, r2, r1
 8002dba:	6039      	str	r1, [r7, #0]
 8002dbc:	4629      	mov	r1, r5
 8002dbe:	414b      	adcs	r3, r1
 8002dc0:	607b      	str	r3, [r7, #4]
 8002dc2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002dc6:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
        exponent_offset--;
 8002dca:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
      }
      s++;
 8002dd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dda:	3301      	adds	r3, #1
 8002ddc:	643b      	str	r3, [r7, #64]	@ 0x40
    while (isdigit(*s)) {
 8002dde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fe f8af 	bl	8000f46 <_ZN19ArduinoJson6101_1107isdigitEc>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1b6      	bne.n	8002d5c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x224>
    }
  }

  int exponent = 0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (*s == 'e' || *s == 'E') {
 8002df2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b65      	cmp	r3, #101	@ 0x65
 8002df8:	d003      	beq.n	8002e02 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2ca>
 8002dfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b45      	cmp	r3, #69	@ 0x45
 8002e00:	d164      	bne.n	8002ecc <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x394>
    s++;
 8002e02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e04:	3301      	adds	r3, #1
 8002e06:	643b      	str	r3, [r7, #64]	@ 0x40
    bool negative_exponent = false;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if (*s == '-') {
 8002e0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b2d      	cmp	r3, #45	@ 0x2d
 8002e14:	d106      	bne.n	8002e24 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2ec>
      negative_exponent = true;
 8002e16:	2301      	movs	r3, #1
 8002e18:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
      s++;
 8002e1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e1e:	3301      	adds	r3, #1
 8002e20:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e22:	e044      	b.n	8002eae <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x376>
    } else if (*s == '+') {
 8002e24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b2b      	cmp	r3, #43	@ 0x2b
 8002e2a:	d140      	bne.n	8002eae <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x376>
      s++;
 8002e2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e2e:	3301      	adds	r3, #1
 8002e30:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    while (isdigit(*s)) {
 8002e32:	e03c      	b.n	8002eae <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x376>
      exponent = exponent * 10 + (*s - '0');
 8002e34:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002e36:	4613      	mov	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	461a      	mov	r2, r3
 8002e40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	3b30      	subs	r3, #48	@ 0x30
 8002e46:	4413      	add	r3, r2
 8002e48:	66bb      	str	r3, [r7, #104]	@ 0x68
      if (exponent + exponent_offset > traits::exponent_max) {
 8002e4a:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	@ 0x6e
 8002e4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e50:	4413      	add	r3, r2
 8002e52:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8002e56:	dd27      	ble.n	8002ea8 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x370>
        if (negative_exponent)
 8002e58:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00e      	beq.n	8002e7e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x346>
          return is_negative ? -0.0f : 0.0f;
 8002e60:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d002      	beq.n	8002e6e <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x336>
 8002e68:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 8002ee8 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3b0>
 8002e6c:	e001      	b.n	8002e72 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x33a>
 8002e6e:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8002ef0 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3b8>
 8002e72:	eeb0 0b47 	vmov.f64	d0, d7
 8002e76:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002e78:	f000 f898 	bl	8002fac <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8002e7c:	e05d      	b.n	8002f3a <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
        else
          return is_negative ? -traits::inf() : traits::inf();
 8002e7e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d006      	beq.n	8002e94 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x35c>
 8002e86:	f000 f8a7 	bl	8002fd8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8002e8a:	eeb0 7b40 	vmov.f64	d7, d0
 8002e8e:	eeb1 7b47 	vneg.f64	d7, d7
 8002e92:	e003      	b.n	8002e9c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x364>
 8002e94:	f000 f8a0 	bl	8002fd8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>
 8002e98:	eeb0 7b40 	vmov.f64	d7, d0
 8002e9c:	eeb0 0b47 	vmov.f64	d0, d7
 8002ea0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002ea2:	f000 f883 	bl	8002fac <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
 8002ea6:	e048      	b.n	8002f3a <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
      }
      s++;
 8002ea8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eaa:	3301      	adds	r3, #1
 8002eac:	643b      	str	r3, [r7, #64]	@ 0x40
    while (isdigit(*s)) {
 8002eae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fe f847 	bl	8000f46 <_ZN19ArduinoJson6101_1107isdigitEc>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1ba      	bne.n	8002e34 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2fc>
    }
    if (negative_exponent) exponent = -exponent;
 8002ebe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x394>
 8002ec6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ec8:	425b      	negs	r3, r3
 8002eca:	66bb      	str	r3, [r7, #104]	@ 0x68
  }
  exponent += exponent_offset;
 8002ecc:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8002ed0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002ed2:	4413      	add	r3, r2
 8002ed4:	66bb      	str	r3, [r7, #104]	@ 0x68

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0') return return_type();
 8002ed6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d010      	beq.n	8002f00 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3c8>
 8002ede:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002ee0:	f000 f888 	bl	8002ff4 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>
 8002ee4:	e029      	b.n	8002f3a <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x402>
 8002ee6:	bf00      	nop
 8002ee8:	00000000 	.word	0x00000000
 8002eec:	80000000 	.word	0x80000000
	...
 8002ef8:	19999999 	.word	0x19999999
 8002efc:	00019999 	.word	0x00019999

  TFloat result = traits::make_float(static_cast<TFloat>(mantissa), exponent);
 8002f00:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002f04:	f7fd fbc2 	bl	800068c <__aeabi_ul2d>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002f0e:	ec43 2b10 	vmov	d0, r2, r3
 8002f12:	f000 f8ac 	bl	800306e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_>
 8002f16:	ed87 0b12 	vstr	d0, [r7, #72]	@ 0x48

  return is_negative ? -result : result;
 8002f1a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d004      	beq.n	8002f2c <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3f4>
 8002f22:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8002f26:	eeb1 7b47 	vneg.f64	d7, d7
 8002f2a:	e001      	b.n	8002f30 <_ZN19ArduinoJson6101_11011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3f8>
 8002f2c:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8002f30:	eeb0 0b47 	vmov.f64	d0, d7
 8002f34:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002f36:	f000 f839 	bl	8002fac <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>
}
 8002f3a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002f3c:	3780      	adds	r7, #128	@ 0x80
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002f44 <_ZNK19ArduinoJson6101_11012ParsedNumberIdyE4typeEv>:
  uint8_t type() const {
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
    return _type;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	7c1b      	ldrb	r3, [r3, #16]
  }
 8002f50:	4618      	mov	r0, r3
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc>:
  static inline bool isBetween(char c, char min, char max) {
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	71fb      	strb	r3, [r7, #7]
 8002f66:	460b      	mov	r3, r1
 8002f68:	71bb      	strb	r3, [r7, #6]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	717b      	strb	r3, [r7, #5]
    return min <= c && c <= max;
 8002f6e:	79ba      	ldrb	r2, [r7, #6]
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d805      	bhi.n	8002f82 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x26>
 8002f76:	79fa      	ldrb	r2, [r7, #7]
 8002f78:	797b      	ldrb	r3, [r7, #5]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d801      	bhi.n	8002f82 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x26>
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e000      	b.n	8002f84 <_ZN19ArduinoJson6101_11016JsonDeserializerINS_23UnsafeCharPointerReaderENS_12StringCopierEE9isBetweenEccc+0x28>
 8002f82:	2300      	movs	r3, #0
  }
 8002f84:	4618      	mov	r0, r3
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv>:
        forge(0x0AFE07B2, 0x7DD78B14)   // 1e-255
    };
    return factors[index];
  }

  static T nan() {
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
    return forge(0x7ff80000, 0x00000000);
 8002f94:	2100      	movs	r1, #0
 8002f96:	4804      	ldr	r0, [pc, #16]	@ (8002fa8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3nanEv+0x18>)
 8002f98:	f000 f8b9 	bl	800310e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8002f9c:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8002fa0:	eeb0 0b47 	vmov.f64	d0, d7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	7ff80000 	.word	0x7ff80000

08002fac <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ed>:
  ParsedNumber(TFloat value) : floatValue(value), _type(VALUE_IS_FLOAT) {}
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	ed87 0b00 	vstr	d0, [r7]
 8002fb8:	68f9      	ldr	r1, [r7, #12]
 8002fba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fbe:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2208      	movs	r2, #8
 8002fc6:	741a      	strb	r2, [r3, #16]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
	...

08002fd8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv>:

  static T inf() {
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
    return forge(0x7ff00000, 0x00000000);
 8002fdc:	2100      	movs	r1, #0
 8002fde:	4804      	ldr	r0, [pc, #16]	@ (8002ff0 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE3infEv+0x18>)
 8002fe0:	f000 f895 	bl	800310e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8002fe4:	eeb0 7b40 	vmov.f64	d7, d0
  }
 8002fe8:	eeb0 0b47 	vmov.f64	d0, d7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	7ff00000 	.word	0x7ff00000

08002ff4 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Ev>:
  ParsedNumber() : uintValue(0), floatValue(0), _type(VALUE_IS_NULL) {}
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	e9c1 2300 	strd	r2, r3, [r1]
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	741a      	strb	r2, [r3, #16]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4618      	mov	r0, r3
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb>:
  ParsedNumber(TUInt value, bool is_negative)
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	e9c7 2300 	strd	r2, r3, [r7]
      : uintValue(value),
 8003038:	68f9      	ldr	r1, [r7, #12]
 800303a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800303e:	e9c1 2300 	strd	r2, r3, [r1]
        floatValue(TFloat(value)),
 8003042:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003046:	f7fd fb21 	bl	800068c <__aeabi_ul2d>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	68f9      	ldr	r1, [r7, #12]
 8003050:	e9c1 2302 	strd	r2, r3, [r1, #8]
        _type(uint8_t(is_negative ? VALUE_IS_NEGATIVE_INTEGER
 8003054:	7e3b      	ldrb	r3, [r7, #24]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb+0x32>
 800305a:	2207      	movs	r2, #7
 800305c:	e000      	b.n	8003060 <_ZN19ArduinoJson6101_11012ParsedNumberIdyEC1Eyb+0x34>
 800305e:	2206      	movs	r2, #6
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	741a      	strb	r2, [r3, #16]
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_>:
  static T make_float(T m, TExponent e) {
 800306e:	b580      	push	{r7, lr}
 8003070:	b086      	sub	sp, #24
 8003072:	af00      	add	r7, sp, #0
 8003074:	ed87 0b02 	vstr	d0, [r7, #8]
 8003078:	6078      	str	r0, [r7, #4]
    if (e > 0) {
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	dd1d      	ble.n	80030bc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x4e>
      for (uint8_t index = 0; e != 0; index++) {
 8003080:	2300      	movs	r3, #0
 8003082:	75fb      	strb	r3, [r7, #23]
 8003084:	e016      	b.n	80030b4 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x46>
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00b      	beq.n	80030a8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x3a>
 8003090:	7dfb      	ldrb	r3, [r7, #23]
 8003092:	4618      	mov	r0, r3
 8003094:	f000 f860 	bl	8003158 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi>
 8003098:	eeb0 6b40 	vmov.f64	d6, d0
 800309c:	ed97 7b02 	vldr	d7, [r7, #8]
 80030a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80030a4:	ed87 7b02 	vstr	d7, [r7, #8]
        e >>= 1;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	105b      	asrs	r3, r3, #1
 80030ac:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 80030ae:	7dfb      	ldrb	r3, [r7, #23]
 80030b0:	3301      	adds	r3, #1
 80030b2:	75fb      	strb	r3, [r7, #23]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1e5      	bne.n	8003086 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x18>
 80030ba:	e01f      	b.n	80030fc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x8e>
      e = TExponent(-e);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	425b      	negs	r3, r3
 80030c0:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 80030c2:	2300      	movs	r3, #0
 80030c4:	75bb      	strb	r3, [r7, #22]
 80030c6:	e016      	b.n	80030f6 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x88>
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00b      	beq.n	80030ea <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x7c>
 80030d2:	7dbb      	ldrb	r3, [r7, #22]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 f8a3 	bl	8003220 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi>
 80030da:	eeb0 6b40 	vmov.f64	d6, d0
 80030de:	ed97 7b02 	vldr	d7, [r7, #8]
 80030e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80030e6:	ed87 7b02 	vstr	d7, [r7, #8]
        e >>= 1;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	105b      	asrs	r3, r3, #1
 80030ee:	607b      	str	r3, [r7, #4]
      for (uint8_t index = 0; e != 0; index++) {
 80030f0:	7dbb      	ldrb	r3, [r7, #22]
 80030f2:	3301      	adds	r3, #1
 80030f4:	75bb      	strb	r3, [r7, #22]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1e5      	bne.n	80030c8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE10make_floatIiEEddT_+0x5a>
    return m;
 80030fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003100:	ec43 2b17 	vmov	d7, r2, r3
  }
 8003104:	eeb0 0b47 	vmov.f64	d0, d7
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>:
  }

  // constructs a double floating point values from its binary representation
  // we use this function to workaround platforms with single precision literals
  // (for example, when -fsingle-precision-constant is passed to GCC)
  static T forge(uint32_t msb, uint32_t lsb) {
 800310e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
    return alias_cast<T>((uint64_t(msb) << 32) | lsb);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	469a      	mov	sl, r3
 8003120:	4693      	mov	fp, r2
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	f04f 0300 	mov.w	r3, #0
 800312a:	4653      	mov	r3, sl
 800312c:	2200      	movs	r2, #0
 800312e:	6839      	ldr	r1, [r7, #0]
 8003130:	2000      	movs	r0, #0
 8003132:	460c      	mov	r4, r1
 8003134:	4605      	mov	r5, r0
 8003136:	ea42 0804 	orr.w	r8, r2, r4
 800313a:	ea43 0905 	orr.w	r9, r3, r5
 800313e:	4640      	mov	r0, r8
 8003140:	4649      	mov	r1, r9
 8003142:	f000 f913 	bl	800336c <_ZN19ArduinoJson6101_11010alias_castIdyEET_T0_>
 8003146:	eeb0 7b40 	vmov.f64	d7, d0
  }
 800314a:	eeb0 0b47 	vmov.f64	d0, d7
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003158 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi>:
  static T positiveBinaryPowerOfTen(int index) {
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
    static T factors[] = {
 8003160:	4b25      	ldr	r3, [pc, #148]	@ (80031f8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa0>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f3bf 8f5b 	dmb	ish
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	bf0c      	ite	eq
 8003170:	2301      	moveq	r3, #1
 8003172:	2300      	movne	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d031      	beq.n	80031de <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x86>
 800317a:	481f      	ldr	r0, [pc, #124]	@ (80031f8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa0>)
 800317c:	f00d f997 	bl	80104ae <__cxa_guard_acquire>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	bf14      	ite	ne
 8003186:	2301      	movne	r3, #1
 8003188:	2300      	moveq	r3, #0
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	d026      	beq.n	80031de <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x86>
        forge(0x4693B8B5, 0xB5056E17),  // 1e32
 8003190:	491a      	ldr	r1, [pc, #104]	@ (80031fc <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa4>)
 8003192:	481b      	ldr	r0, [pc, #108]	@ (8003200 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa8>)
 8003194:	f7ff ffbb 	bl	800310e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003198:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 800319c:	4b19      	ldr	r3, [pc, #100]	@ (8003204 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 800319e:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
        forge(0x4D384F03, 0xE93FF9F5),  // 1e64
 80031a2:	4919      	ldr	r1, [pc, #100]	@ (8003208 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb0>)
 80031a4:	4819      	ldr	r0, [pc, #100]	@ (800320c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb4>)
 80031a6:	f7ff ffb2 	bl	800310e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80031aa:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80031ae:	4b15      	ldr	r3, [pc, #84]	@ (8003204 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 80031b0:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
        forge(0x5A827748, 0xF9301D32),  // 1e128
 80031b4:	4916      	ldr	r1, [pc, #88]	@ (8003210 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xb8>)
 80031b6:	4817      	ldr	r0, [pc, #92]	@ (8003214 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xbc>)
 80031b8:	f7ff ffa9 	bl	800310e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80031bc:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80031c0:	4b10      	ldr	r3, [pc, #64]	@ (8003204 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 80031c2:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
        forge(0x75154FDD, 0x7F73BF3C)   // 1e256
 80031c6:	4914      	ldr	r1, [pc, #80]	@ (8003218 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xc0>)
 80031c8:	4814      	ldr	r0, [pc, #80]	@ (800321c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xc4>)
 80031ca:	f7ff ffa0 	bl	800310e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80031ce:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80031d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003204 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 80031d4:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
 80031d8:	4807      	ldr	r0, [pc, #28]	@ (80031f8 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xa0>)
 80031da:	f00d f974 	bl	80104c6 <__cxa_guard_release>
    return factors[index];
 80031de:	4a09      	ldr	r2, [pc, #36]	@ (8003204 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0xac>)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	4413      	add	r3, r2
 80031e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ea:	ec43 2b17 	vmov	d7, r2, r3
  }
 80031ee:	eeb0 0b47 	vmov.f64	d0, d7
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	24000534 	.word	0x24000534
 80031fc:	b5056e17 	.word	0xb5056e17
 8003200:	4693b8b5 	.word	0x4693b8b5
 8003204:	24000008 	.word	0x24000008
 8003208:	e93ff9f5 	.word	0xe93ff9f5
 800320c:	4d384f03 	.word	0x4d384f03
 8003210:	f9301d32 	.word	0xf9301d32
 8003214:	5a827748 	.word	0x5a827748
 8003218:	7f73bf3c 	.word	0x7f73bf3c
 800321c:	75154fdd 	.word	0x75154fdd

08003220 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi>:
  static T negativeBinaryPowerOfTen(int index) {
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
    static T factors[] = {
 8003228:	4b3c      	ldr	r3, [pc, #240]	@ (800331c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xfc>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f3bf 8f5b 	dmb	ish
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b00      	cmp	r3, #0
 8003236:	bf0c      	ite	eq
 8003238:	2301      	moveq	r3, #1
 800323a:	2300      	movne	r3, #0
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d05e      	beq.n	8003300 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xe0>
 8003242:	4836      	ldr	r0, [pc, #216]	@ (800331c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xfc>)
 8003244:	f00d f933 	bl	80104ae <__cxa_guard_acquire>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	bf14      	ite	ne
 800324e:	2301      	movne	r3, #1
 8003250:	2300      	moveq	r3, #0
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	d053      	beq.n	8003300 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xe0>
        forge(0x3FB99999, 0x9999999A),  // 1e-1
 8003258:	4931      	ldr	r1, [pc, #196]	@ (8003320 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x100>)
 800325a:	4832      	ldr	r0, [pc, #200]	@ (8003324 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x104>)
 800325c:	f7ff ff57 	bl	800310e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003260:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8003264:	4b30      	ldr	r3, [pc, #192]	@ (8003328 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8003266:	ed83 7b00 	vstr	d7, [r3]
        forge(0x3F847AE1, 0x47AE147B),  // 1e-2
 800326a:	4930      	ldr	r1, [pc, #192]	@ (800332c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x10c>)
 800326c:	4830      	ldr	r0, [pc, #192]	@ (8003330 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x110>)
 800326e:	f7ff ff4e 	bl	800310e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003272:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8003276:	4b2c      	ldr	r3, [pc, #176]	@ (8003328 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8003278:	ed83 7b02 	vstr	d7, [r3, #8]
        forge(0x3F1A36E2, 0xEB1C432D),  // 1e-4
 800327c:	492d      	ldr	r1, [pc, #180]	@ (8003334 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x114>)
 800327e:	482e      	ldr	r0, [pc, #184]	@ (8003338 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x118>)
 8003280:	f7ff ff45 	bl	800310e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003284:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 8003288:	4b27      	ldr	r3, [pc, #156]	@ (8003328 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 800328a:	ed83 7b04 	vstr	d7, [r3, #16]
        forge(0x3E45798E, 0xE2308C3A),  // 1e-8
 800328e:	492b      	ldr	r1, [pc, #172]	@ (800333c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x11c>)
 8003290:	482b      	ldr	r0, [pc, #172]	@ (8003340 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x120>)
 8003292:	f7ff ff3c 	bl	800310e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 8003296:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 800329a:	4b23      	ldr	r3, [pc, #140]	@ (8003328 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 800329c:	ed83 7b06 	vstr	d7, [r3, #24]
        forge(0x3C9CD2B2, 0x97D889BC),  // 1e-16
 80032a0:	4928      	ldr	r1, [pc, #160]	@ (8003344 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x124>)
 80032a2:	4829      	ldr	r0, [pc, #164]	@ (8003348 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x128>)
 80032a4:	f7ff ff33 	bl	800310e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80032a8:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80032ac:	4b1e      	ldr	r3, [pc, #120]	@ (8003328 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80032ae:	ed83 7b08 	vstr	d7, [r3, #32]
        forge(0x3949F623, 0xD5A8A733),  // 1e-32
 80032b2:	4926      	ldr	r1, [pc, #152]	@ (800334c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x12c>)
 80032b4:	4826      	ldr	r0, [pc, #152]	@ (8003350 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x130>)
 80032b6:	f7ff ff2a 	bl	800310e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80032ba:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80032be:	4b1a      	ldr	r3, [pc, #104]	@ (8003328 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80032c0:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
        forge(0x32A50FFD, 0x44F4A73D),  // 1e-64
 80032c4:	4923      	ldr	r1, [pc, #140]	@ (8003354 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x134>)
 80032c6:	4824      	ldr	r0, [pc, #144]	@ (8003358 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x138>)
 80032c8:	f7ff ff21 	bl	800310e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80032cc:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80032d0:	4b15      	ldr	r3, [pc, #84]	@ (8003328 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80032d2:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
        forge(0x255BBA08, 0xCF8C979D),  // 1e-128
 80032d6:	4921      	ldr	r1, [pc, #132]	@ (800335c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x13c>)
 80032d8:	4821      	ldr	r0, [pc, #132]	@ (8003360 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x140>)
 80032da:	f7ff ff18 	bl	800310e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80032de:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80032e2:	4b11      	ldr	r3, [pc, #68]	@ (8003328 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80032e4:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
        forge(0x0AC80628, 0x64AC6F43)   // 1e-256
 80032e8:	491e      	ldr	r1, [pc, #120]	@ (8003364 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x144>)
 80032ea:	481f      	ldr	r0, [pc, #124]	@ (8003368 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x148>)
 80032ec:	f7ff ff0f 	bl	800310e <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE5forgeEmm>
 80032f0:	eeb0 7b40 	vmov.f64	d7, d0
    static T factors[] = {
 80032f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003328 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 80032f6:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
 80032fa:	4808      	ldr	r0, [pc, #32]	@ (800331c <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xfc>)
 80032fc:	f00d f8e3 	bl	80104c6 <__cxa_guard_release>
    return factors[index];
 8003300:	4a09      	ldr	r2, [pc, #36]	@ (8003328 <_ZN19ArduinoJson6101_11011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x108>)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	4413      	add	r3, r2
 8003308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330c:	ec43 2b17 	vmov	d7, r2, r3
  }
 8003310:	eeb0 0b47 	vmov.f64	d0, d7
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	24000580 	.word	0x24000580
 8003320:	9999999a 	.word	0x9999999a
 8003324:	3fb99999 	.word	0x3fb99999
 8003328:	24000538 	.word	0x24000538
 800332c:	47ae147b 	.word	0x47ae147b
 8003330:	3f847ae1 	.word	0x3f847ae1
 8003334:	eb1c432d 	.word	0xeb1c432d
 8003338:	3f1a36e2 	.word	0x3f1a36e2
 800333c:	e2308c3a 	.word	0xe2308c3a
 8003340:	3e45798e 	.word	0x3e45798e
 8003344:	97d889bc 	.word	0x97d889bc
 8003348:	3c9cd2b2 	.word	0x3c9cd2b2
 800334c:	d5a8a733 	.word	0xd5a8a733
 8003350:	3949f623 	.word	0x3949f623
 8003354:	44f4a73d 	.word	0x44f4a73d
 8003358:	32a50ffd 	.word	0x32a50ffd
 800335c:	cf8c979d 	.word	0xcf8c979d
 8003360:	255bba08 	.word	0x255bba08
 8003364:	64ac6f43 	.word	0x64ac6f43
 8003368:	0ac80628 	.word	0x0ac80628

0800336c <_ZN19ArduinoJson6101_11010alias_castIdyEET_T0_>:
    T data;
  };
};

template <typename T, typename F>
T alias_cast(F raw_data) {
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	e9c7 0100 	strd	r0, r1, [r7]
  alias_cast_t<T, F> ac;
  ac.raw = raw_data;
 8003376:	e9d7 2300 	ldrd	r2, r3, [r7]
 800337a:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ac.data;
 800337e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003382:	ec43 2b17 	vmov	d7, r2, r3
}
 8003386:	eeb0 0b47 	vmov.f64	d0, d7
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003394:	b590      	push	{r4, r7, lr}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d12d      	bne.n	8003400 <_Z41__static_initialization_and_destruction_0ii+0x6c>
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d128      	bne.n	8003400 <_Z41__static_initialization_and_destruction_0ii+0x6c>
std::string strJson;
 80033ae:	481d      	ldr	r0, [pc, #116]	@ (8003424 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80033b0:	f00d f90f 	bl	80105d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
DynamicJsonDocument doc(JSON_BUFF_SIZE);
 80033b4:	4622      	mov	r2, r4
 80033b6:	f242 7110 	movw	r1, #10000	@ 0x2710
 80033ba:	481b      	ldr	r0, [pc, #108]	@ (8003428 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80033bc:	f7fe fbbf 	bl	8001b3e <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEEC1EjS1_>
  typedef ObjectRefBase<CollectionData> base_type;

 public:
  typedef ObjectIterator iterator;

  FORCE_INLINE ObjectRef() : base_type(0), _pool(0) {}
 80033c0:	4b1a      	ldr	r3, [pc, #104]	@ (800342c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80033c2:	2100      	movs	r1, #0
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7fe fbab 	bl	8001b20 <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 80033ca:	4b18      	ldr	r3, [pc, #96]	@ (800342c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	605a      	str	r2, [r3, #4]
 80033d0:	4b17      	ldr	r3, [pc, #92]	@ (8003430 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80033d2:	2100      	movs	r1, #0
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7fe fba3 	bl	8001b20 <_ZN19ArduinoJson6101_11013ObjectRefBaseINS_14CollectionDataEEC1EPS1_>
 80033da:	4b15      	ldr	r3, [pc, #84]	@ (8003430 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80033dc:	2200      	movs	r2, #0
 80033de:	605a      	str	r2, [r3, #4]
RemoraComms* comms = new RemoraComms(ptrRxData, ptrTxData, SPI1);
 80033e0:	f44f 7020 	mov.w	r0, #640	@ 0x280
 80033e4:	f00d f872 	bl	80104cc <_Znwj>
 80033e8:	4603      	mov	r3, r0
 80033ea:	461c      	mov	r4, r3
 80033ec:	4b11      	ldr	r3, [pc, #68]	@ (8003434 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80033ee:	6819      	ldr	r1, [r3, #0]
 80033f0:	4b11      	ldr	r3, [pc, #68]	@ (8003438 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	4b11      	ldr	r3, [pc, #68]	@ (800343c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80033f6:	4620      	mov	r0, r4
 80033f8:	f000 fbb6 	bl	8003b68 <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>
 80033fc:	4b10      	ldr	r3, [pc, #64]	@ (8003440 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80033fe:	601c      	str	r4, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10a      	bne.n	800341c <_Z41__static_initialization_and_destruction_0ii+0x88>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800340c:	4293      	cmp	r3, r2
 800340e:	d105      	bne.n	800341c <_Z41__static_initialization_and_destruction_0ii+0x88>
DynamicJsonDocument doc(JSON_BUFF_SIZE);
 8003410:	4805      	ldr	r0, [pc, #20]	@ (8003428 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8003412:	f000 f817 	bl	8003444 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEED1Ev>
std::string strJson;
 8003416:	4803      	ldr	r0, [pc, #12]	@ (8003424 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8003418:	f00d f8e2 	bl	80105e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	bd90      	pop	{r4, r7, pc}
 8003424:	24000330 	.word	0x24000330
 8003428:	24000348 	.word	0x24000348
 800342c:	24000370 	.word	0x24000370
 8003430:	24000378 	.word	0x24000378
 8003434:	24000000 	.word	0x24000000
 8003438:	24000004 	.word	0x24000004
 800343c:	40013000 	.word	0x40013000
 8003440:	24000530 	.word	0x24000530

08003444 <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEED1Ev>:
  ~BasicJsonDocument() {
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
    freePool();
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f805 	bl	800345c <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE8freePoolEv>
  }
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4618      	mov	r0, r3
 8003456:	3708      	adds	r7, #8
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <_ZN19ArduinoJson6101_11017BasicJsonDocumentINS_16DefaultAllocatorEE8freePoolEv>:
    if (requiredSize <= capacity()) return;
    freePool();
    replacePool(allocPool(addPadding(requiredSize)));
  }

  void freePool() {
 800345c:	b590      	push	{r4, r7, lr}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
    this->deallocate(memoryPool().buffer());
 8003464:	687c      	ldr	r4, [r7, #4]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	3308      	adds	r3, #8
 800346a:	4618      	mov	r0, r3
 800346c:	f7fd fcd2 	bl	8000e14 <_ZN19ArduinoJson6101_11012JsonDocument10memoryPoolEv>
 8003470:	4603      	mov	r3, r0
 8003472:	4618      	mov	r0, r3
 8003474:	f7fd fb6a 	bl	8000b4c <_ZN19ArduinoJson6101_11010MemoryPool6bufferEv>
 8003478:	4603      	mov	r3, r0
 800347a:	4619      	mov	r1, r3
 800347c:	4620      	mov	r0, r4
 800347e:	f000 f804 	bl	800348a <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE10deallocateEPv>
  }
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	bd90      	pop	{r4, r7, pc}

0800348a <_ZN19ArduinoJson6101_11014AllocatorOwnerINS_16DefaultAllocatorEE10deallocateEPv>:
  void deallocate(void* p) {
 800348a:	b580      	push	{r7, lr}
 800348c:	b082      	sub	sp, #8
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
 8003492:	6039      	str	r1, [r7, #0]
    _allocator.deallocate(p);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6839      	ldr	r1, [r7, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f7fd fcfc 	bl	8000e96 <_ZN19ArduinoJson6101_11016DefaultAllocator10deallocateEPv>
  }
 800349e:	bf00      	nop
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <_GLOBAL__sub_I_EXTI4_IRQHandler>:
 80034a6:	b580      	push	{r7, lr}
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80034ae:	2001      	movs	r0, #1
 80034b0:	f7ff ff70 	bl	8003394 <_Z41__static_initialization_and_destruction_0ii>
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <_GLOBAL__sub_D_EXTI4_IRQHandler>:
 80034b6:	b580      	push	{r7, lr}
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80034be:	2000      	movs	r0, #0
 80034c0:	f7ff ff68 	bl	8003394 <_Z41__static_initialization_and_destruction_0ii>
 80034c4:	bd80      	pop	{r7, pc}
	...

080034c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ce:	4b0a      	ldr	r3, [pc, #40]	@ (80034f8 <HAL_MspInit+0x30>)
 80034d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80034d4:	4a08      	ldr	r2, [pc, #32]	@ (80034f8 <HAL_MspInit+0x30>)
 80034d6:	f043 0302 	orr.w	r3, r3, #2
 80034da:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80034de:	4b06      	ldr	r3, [pc, #24]	@ (80034f8 <HAL_MspInit+0x30>)
 80034e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	607b      	str	r3, [r7, #4]
 80034ea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	58024400 	.word	0x58024400

080034fc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b0bc      	sub	sp, #240	@ 0xf0
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003504:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	605a      	str	r2, [r3, #4]
 800350e:	609a      	str	r2, [r3, #8]
 8003510:	60da      	str	r2, [r3, #12]
 8003512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003514:	f107 0318 	add.w	r3, r7, #24
 8003518:	22c0      	movs	r2, #192	@ 0xc0
 800351a:	2100      	movs	r1, #0
 800351c:	4618      	mov	r0, r3
 800351e:	f00d fc65 	bl	8010dec <memset>
  if(hsd->Instance==SDMMC1)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a3c      	ldr	r2, [pc, #240]	@ (8003618 <HAL_SD_MspInit+0x11c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d171      	bne.n	8003610 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800352c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003530:	f04f 0300 	mov.w	r3, #0
 8003534:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8003538:	2300      	movs	r3, #0
 800353a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800353c:	f107 0318 	add.w	r3, r7, #24
 8003540:	4618      	mov	r0, r3
 8003542:	f003 fefd 	bl	8007340 <HAL_RCCEx_PeriphCLKConfig>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 800354c:	f7fe fab4 	bl	8001ab8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003550:	4b32      	ldr	r3, [pc, #200]	@ (800361c <HAL_SD_MspInit+0x120>)
 8003552:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003556:	4a31      	ldr	r2, [pc, #196]	@ (800361c <HAL_SD_MspInit+0x120>)
 8003558:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800355c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8003560:	4b2e      	ldr	r3, [pc, #184]	@ (800361c <HAL_SD_MspInit+0x120>)
 8003562:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8003566:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800356e:	4b2b      	ldr	r3, [pc, #172]	@ (800361c <HAL_SD_MspInit+0x120>)
 8003570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003574:	4a29      	ldr	r2, [pc, #164]	@ (800361c <HAL_SD_MspInit+0x120>)
 8003576:	f043 0304 	orr.w	r3, r3, #4
 800357a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800357e:	4b27      	ldr	r3, [pc, #156]	@ (800361c <HAL_SD_MspInit+0x120>)
 8003580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800358c:	4b23      	ldr	r3, [pc, #140]	@ (800361c <HAL_SD_MspInit+0x120>)
 800358e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003592:	4a22      	ldr	r2, [pc, #136]	@ (800361c <HAL_SD_MspInit+0x120>)
 8003594:	f043 0308 	orr.w	r3, r3, #8
 8003598:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800359c:	4b1f      	ldr	r3, [pc, #124]	@ (800361c <HAL_SD_MspInit+0x120>)
 800359e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80035aa:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80035ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b2:	2302      	movs	r3, #2
 80035b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b8:	2300      	movs	r3, #0
 80035ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035be:	2303      	movs	r3, #3
 80035c0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80035c4:	230c      	movs	r3, #12
 80035c6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035ca:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80035ce:	4619      	mov	r1, r3
 80035d0:	4813      	ldr	r0, [pc, #76]	@ (8003620 <HAL_SD_MspInit+0x124>)
 80035d2:	f002 fce5 	bl	8005fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80035d6:	2304      	movs	r3, #4
 80035d8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035dc:	2302      	movs	r3, #2
 80035de:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e2:	2300      	movs	r3, #0
 80035e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035e8:	2303      	movs	r3, #3
 80035ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80035ee:	230c      	movs	r3, #12
 80035f0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035f4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80035f8:	4619      	mov	r1, r3
 80035fa:	480a      	ldr	r0, [pc, #40]	@ (8003624 <HAL_SD_MspInit+0x128>)
 80035fc:	f002 fcd0 	bl	8005fa0 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8003600:	2200      	movs	r2, #0
 8003602:	2100      	movs	r1, #0
 8003604:	2031      	movs	r0, #49	@ 0x31
 8003606:	f000 ff46 	bl	8004496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800360a:	2031      	movs	r0, #49	@ 0x31
 800360c:	f000 ff5d 	bl	80044ca <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8003610:	bf00      	nop
 8003612:	37f0      	adds	r7, #240	@ 0xf0
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	52007000 	.word	0x52007000
 800361c:	58024400 	.word	0x58024400
 8003620:	58020800 	.word	0x58020800
 8003624:	58020c00 	.word	0x58020c00

08003628 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b0ba      	sub	sp, #232	@ 0xe8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003630:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	605a      	str	r2, [r3, #4]
 800363a:	609a      	str	r2, [r3, #8]
 800363c:	60da      	str	r2, [r3, #12]
 800363e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003640:	f107 0310 	add.w	r3, r7, #16
 8003644:	22c0      	movs	r2, #192	@ 0xc0
 8003646:	2100      	movs	r1, #0
 8003648:	4618      	mov	r0, r3
 800364a:	f00d fbcf 	bl	8010dec <memset>
  if(huart->Instance==USART1)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a27      	ldr	r2, [pc, #156]	@ (80036f0 <HAL_UART_MspInit+0xc8>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d146      	bne.n	80036e6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003658:	f04f 0201 	mov.w	r2, #1
 800365c:	f04f 0300 	mov.w	r3, #0
 8003660:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8003664:	2300      	movs	r3, #0
 8003666:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800366a:	f107 0310 	add.w	r3, r7, #16
 800366e:	4618      	mov	r0, r3
 8003670:	f003 fe66 	bl	8007340 <HAL_RCCEx_PeriphCLKConfig>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800367a:	f7fe fa1d 	bl	8001ab8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800367e:	4b1d      	ldr	r3, [pc, #116]	@ (80036f4 <HAL_UART_MspInit+0xcc>)
 8003680:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003684:	4a1b      	ldr	r2, [pc, #108]	@ (80036f4 <HAL_UART_MspInit+0xcc>)
 8003686:	f043 0310 	orr.w	r3, r3, #16
 800368a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800368e:	4b19      	ldr	r3, [pc, #100]	@ (80036f4 <HAL_UART_MspInit+0xcc>)
 8003690:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003694:	f003 0310 	and.w	r3, r3, #16
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800369c:	4b15      	ldr	r3, [pc, #84]	@ (80036f4 <HAL_UART_MspInit+0xcc>)
 800369e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036a2:	4a14      	ldr	r2, [pc, #80]	@ (80036f4 <HAL_UART_MspInit+0xcc>)
 80036a4:	f043 0301 	orr.w	r3, r3, #1
 80036a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80036ac:	4b11      	ldr	r3, [pc, #68]	@ (80036f4 <HAL_UART_MspInit+0xcc>)
 80036ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	60bb      	str	r3, [r7, #8]
 80036b8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80036ba:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80036be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c2:	2302      	movs	r3, #2
 80036c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c8:	2300      	movs	r3, #0
 80036ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ce:	2300      	movs	r3, #0
 80036d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80036d4:	2307      	movs	r3, #7
 80036d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036da:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80036de:	4619      	mov	r1, r3
 80036e0:	4805      	ldr	r0, [pc, #20]	@ (80036f8 <HAL_UART_MspInit+0xd0>)
 80036e2:	f002 fc5d 	bl	8005fa0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80036e6:	bf00      	nop
 80036e8:	37e8      	adds	r7, #232	@ 0xe8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40011000 	.word	0x40011000
 80036f4:	58024400 	.word	0x58024400
 80036f8:	58020000 	.word	0x58020000

080036fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003700:	bf00      	nop
 8003702:	e7fd      	b.n	8003700 <NMI_Handler+0x4>

08003704 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003708:	bf00      	nop
 800370a:	e7fd      	b.n	8003708 <HardFault_Handler+0x4>

0800370c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003710:	bf00      	nop
 8003712:	e7fd      	b.n	8003710 <MemManage_Handler+0x4>

08003714 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003718:	bf00      	nop
 800371a:	e7fd      	b.n	8003718 <BusFault_Handler+0x4>

0800371c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003720:	bf00      	nop
 8003722:	e7fd      	b.n	8003720 <UsageFault_Handler+0x4>

08003724 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003728:	bf00      	nop
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003732:	b480      	push	{r7}
 8003734:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003736:	bf00      	nop
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003744:	bf00      	nop
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003752:	f000 fd75 	bl	8004240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003756:	bf00      	nop
 8003758:	bd80      	pop	{r7, pc}

0800375a <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800375a:	b480      	push	{r7}
 800375c:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  //HAL_DMA_IRQHandler(&hdma_spi1_tx);
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800375e:	bf00      	nop
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  //HAL_DMA_IRQHandler(&hdma_spi1_rx);
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800376c:	bf00      	nop
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003776:	b480      	push	{r7}
 8003778:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_IRQn 0 */
  //HAL_SPI_IRQHandler(&hspi1);
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800377a:	bf00      	nop
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8003788:	4802      	ldr	r0, [pc, #8]	@ (8003794 <SDMMC1_IRQHandler+0x10>)
 800378a:	f006 fd47 	bl	800a21c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800378e:	bf00      	nop
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	24000420 	.word	0x24000420

08003798 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
	return 1;
 800379c:	2301      	movs	r3, #1
}
 800379e:	4618      	mov	r0, r3
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <_kill>:

int _kill(int pid, int sig)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80037b2:	f00d fbbd 	bl	8010f30 <__errno>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2216      	movs	r2, #22
 80037ba:	601a      	str	r2, [r3, #0]
	return -1;
 80037bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <_exit>:

void _exit (int status)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80037d0:	f04f 31ff 	mov.w	r1, #4294967295
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7ff ffe7 	bl	80037a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80037da:	bf00      	nop
 80037dc:	e7fd      	b.n	80037da <_exit+0x12>

080037de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b086      	sub	sp, #24
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	60f8      	str	r0, [r7, #12]
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	e00a      	b.n	8003806 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80037f0:	f3af 8000 	nop.w
 80037f4:	4601      	mov	r1, r0
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	1c5a      	adds	r2, r3, #1
 80037fa:	60ba      	str	r2, [r7, #8]
 80037fc:	b2ca      	uxtb	r2, r1
 80037fe:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	3301      	adds	r3, #1
 8003804:	617b      	str	r3, [r7, #20]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	429a      	cmp	r2, r3
 800380c:	dbf0      	blt.n	80037f0 <_read+0x12>
	}

return len;
 800380e:	687b      	ldr	r3, [r7, #4]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3718      	adds	r7, #24
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003824:	2300      	movs	r3, #0
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	e009      	b.n	800383e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	60ba      	str	r2, [r7, #8]
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f7fd fd26 	bl	8001284 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	3301      	adds	r3, #1
 800383c:	617b      	str	r3, [r7, #20]
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	429a      	cmp	r2, r3
 8003844:	dbf1      	blt.n	800382a <_write+0x12>
	}
	return len;
 8003846:	687b      	ldr	r3, [r7, #4]
}
 8003848:	4618      	mov	r0, r3
 800384a:	3718      	adds	r7, #24
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <_close>:

int _close(int file)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
	return -1;
 8003858:	f04f 33ff 	mov.w	r3, #4294967295
}
 800385c:	4618      	mov	r0, r3
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003878:	605a      	str	r2, [r3, #4]
	return 0;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <_isatty>:

int _isatty(int file)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
	return 1;
 8003890:	2301      	movs	r3, #1
}
 8003892:	4618      	mov	r0, r3
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800389e:	b480      	push	{r7}
 80038a0:	b085      	sub	sp, #20
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	60f8      	str	r0, [r7, #12]
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	607a      	str	r2, [r7, #4]
	return 0;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038c0:	4a14      	ldr	r2, [pc, #80]	@ (8003914 <_sbrk+0x5c>)
 80038c2:	4b15      	ldr	r3, [pc, #84]	@ (8003918 <_sbrk+0x60>)
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038cc:	4b13      	ldr	r3, [pc, #76]	@ (800391c <_sbrk+0x64>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d102      	bne.n	80038da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038d4:	4b11      	ldr	r3, [pc, #68]	@ (800391c <_sbrk+0x64>)
 80038d6:	4a12      	ldr	r2, [pc, #72]	@ (8003920 <_sbrk+0x68>)
 80038d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038da:	4b10      	ldr	r3, [pc, #64]	@ (800391c <_sbrk+0x64>)
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4413      	add	r3, r2
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d207      	bcs.n	80038f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038e8:	f00d fb22 	bl	8010f30 <__errno>
 80038ec:	4603      	mov	r3, r0
 80038ee:	220c      	movs	r2, #12
 80038f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038f2:	f04f 33ff 	mov.w	r3, #4294967295
 80038f6:	e009      	b.n	800390c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038f8:	4b08      	ldr	r3, [pc, #32]	@ (800391c <_sbrk+0x64>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038fe:	4b07      	ldr	r3, [pc, #28]	@ (800391c <_sbrk+0x64>)
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4413      	add	r3, r2
 8003906:	4a05      	ldr	r2, [pc, #20]	@ (800391c <_sbrk+0x64>)
 8003908:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800390a:	68fb      	ldr	r3, [r7, #12]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3718      	adds	r7, #24
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	24080000 	.word	0x24080000
 8003918:	00000400 	.word	0x00000400
 800391c:	24000584 	.word	0x24000584
 8003920:	24000d80 	.word	0x24000d80

08003924 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003928:	4b37      	ldr	r3, [pc, #220]	@ (8003a08 <SystemInit+0xe4>)
 800392a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800392e:	4a36      	ldr	r2, [pc, #216]	@ (8003a08 <SystemInit+0xe4>)
 8003930:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003934:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003938:	4b34      	ldr	r3, [pc, #208]	@ (8003a0c <SystemInit+0xe8>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 030f 	and.w	r3, r3, #15
 8003940:	2b06      	cmp	r3, #6
 8003942:	d807      	bhi.n	8003954 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003944:	4b31      	ldr	r3, [pc, #196]	@ (8003a0c <SystemInit+0xe8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f023 030f 	bic.w	r3, r3, #15
 800394c:	4a2f      	ldr	r2, [pc, #188]	@ (8003a0c <SystemInit+0xe8>)
 800394e:	f043 0307 	orr.w	r3, r3, #7
 8003952:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003954:	4b2e      	ldr	r3, [pc, #184]	@ (8003a10 <SystemInit+0xec>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a2d      	ldr	r2, [pc, #180]	@ (8003a10 <SystemInit+0xec>)
 800395a:	f043 0301 	orr.w	r3, r3, #1
 800395e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003960:	4b2b      	ldr	r3, [pc, #172]	@ (8003a10 <SystemInit+0xec>)
 8003962:	2200      	movs	r2, #0
 8003964:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003966:	4b2a      	ldr	r3, [pc, #168]	@ (8003a10 <SystemInit+0xec>)
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	4929      	ldr	r1, [pc, #164]	@ (8003a10 <SystemInit+0xec>)
 800396c:	4b29      	ldr	r3, [pc, #164]	@ (8003a14 <SystemInit+0xf0>)
 800396e:	4013      	ands	r3, r2
 8003970:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003972:	4b26      	ldr	r3, [pc, #152]	@ (8003a0c <SystemInit+0xe8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b00      	cmp	r3, #0
 800397c:	d007      	beq.n	800398e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800397e:	4b23      	ldr	r3, [pc, #140]	@ (8003a0c <SystemInit+0xe8>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f023 030f 	bic.w	r3, r3, #15
 8003986:	4a21      	ldr	r2, [pc, #132]	@ (8003a0c <SystemInit+0xe8>)
 8003988:	f043 0307 	orr.w	r3, r3, #7
 800398c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800398e:	4b20      	ldr	r3, [pc, #128]	@ (8003a10 <SystemInit+0xec>)
 8003990:	2200      	movs	r2, #0
 8003992:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003994:	4b1e      	ldr	r3, [pc, #120]	@ (8003a10 <SystemInit+0xec>)
 8003996:	2200      	movs	r2, #0
 8003998:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800399a:	4b1d      	ldr	r3, [pc, #116]	@ (8003a10 <SystemInit+0xec>)
 800399c:	2200      	movs	r2, #0
 800399e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80039a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003a10 <SystemInit+0xec>)
 80039a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003a18 <SystemInit+0xf4>)
 80039a4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80039a6:	4b1a      	ldr	r3, [pc, #104]	@ (8003a10 <SystemInit+0xec>)
 80039a8:	4a1c      	ldr	r2, [pc, #112]	@ (8003a1c <SystemInit+0xf8>)
 80039aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80039ac:	4b18      	ldr	r3, [pc, #96]	@ (8003a10 <SystemInit+0xec>)
 80039ae:	4a1c      	ldr	r2, [pc, #112]	@ (8003a20 <SystemInit+0xfc>)
 80039b0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80039b2:	4b17      	ldr	r3, [pc, #92]	@ (8003a10 <SystemInit+0xec>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80039b8:	4b15      	ldr	r3, [pc, #84]	@ (8003a10 <SystemInit+0xec>)
 80039ba:	4a19      	ldr	r2, [pc, #100]	@ (8003a20 <SystemInit+0xfc>)
 80039bc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80039be:	4b14      	ldr	r3, [pc, #80]	@ (8003a10 <SystemInit+0xec>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80039c4:	4b12      	ldr	r3, [pc, #72]	@ (8003a10 <SystemInit+0xec>)
 80039c6:	4a16      	ldr	r2, [pc, #88]	@ (8003a20 <SystemInit+0xfc>)
 80039c8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80039ca:	4b11      	ldr	r3, [pc, #68]	@ (8003a10 <SystemInit+0xec>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80039d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003a10 <SystemInit+0xec>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a0e      	ldr	r2, [pc, #56]	@ (8003a10 <SystemInit+0xec>)
 80039d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80039dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003a10 <SystemInit+0xec>)
 80039de:	2200      	movs	r2, #0
 80039e0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80039e2:	4b10      	ldr	r3, [pc, #64]	@ (8003a24 <SystemInit+0x100>)
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	4b10      	ldr	r3, [pc, #64]	@ (8003a28 <SystemInit+0x104>)
 80039e8:	4013      	ands	r3, r2
 80039ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039ee:	d202      	bcs.n	80039f6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80039f0:	4b0e      	ldr	r3, [pc, #56]	@ (8003a2c <SystemInit+0x108>)
 80039f2:	2201      	movs	r2, #1
 80039f4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80039f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003a30 <SystemInit+0x10c>)
 80039f8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80039fc:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80039fe:	bf00      	nop
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	e000ed00 	.word	0xe000ed00
 8003a0c:	52002000 	.word	0x52002000
 8003a10:	58024400 	.word	0x58024400
 8003a14:	eaf6ed7f 	.word	0xeaf6ed7f
 8003a18:	02020200 	.word	0x02020200
 8003a1c:	01ff0000 	.word	0x01ff0000
 8003a20:	01010280 	.word	0x01010280
 8003a24:	5c001000 	.word	0x5c001000
 8003a28:	ffff0000 	.word	0xffff0000
 8003a2c:	51008108 	.word	0x51008108
 8003a30:	52004000 	.word	0x52004000

08003a34 <_ZN6ModuleC1Ev>:
#include "module.h"

#include <cstdio>

Module::Module()
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	4a08      	ldr	r2, [pc, #32]	@ (8003a60 <_ZN6ModuleC1Ev+0x2c>)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	601a      	str	r2, [r3, #0]
{
	this->counter = 0;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	611a      	str	r2, [r3, #16]
	this->updateCount = 1;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	60da      	str	r2, [r3, #12]
	printf("\nCreating a std module\n");
 8003a4e:	4805      	ldr	r0, [pc, #20]	@ (8003a64 <_ZN6ModuleC1Ev+0x30>)
 8003a50:	f00d f8d2 	bl	8010bf8 <puts>
}
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4618      	mov	r0, r3
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	08011c68 	.word	0x08011c68
 8003a64:	08011b58 	.word	0x08011b58

08003a68 <_ZN6ModuleD1Ev>:
	this->counter = 0;
	this->updateCount = this->threadFreq / this->slowUpdateFreq;
	printf("\nCreating a slower module, updating every %ld thread cycles\n",this->updateCount);
}

Module::~Module(){}
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	4a04      	ldr	r2, [pc, #16]	@ (8003a84 <_ZN6ModuleD1Ev+0x1c>)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	08011c68 	.word	0x08011c68

08003a88 <_ZN6ModuleD0Ev>:
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7ff ffe9 	bl	8003a68 <_ZN6ModuleD1Ev>
 8003a96:	2114      	movs	r1, #20
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f00c fd06 	bl	80104aa <_ZdlPvj>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <_ZN6Module6updateEv>:
void Module::runModulePost()
{
	this->updatePost();
}

void Module::update(){}
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <_ZN6Module10updatePostEv>:
void Module::updatePost(){}
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <_ZN6Module10slowUpdateEv>:
void Module::slowUpdate(){}
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <_ZN6Module9configureEv>:
void Module::configure(){}
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <_ZN6Module15handleInterruptEv>:
void Module::handleInterrupt(){}
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <_ZN15ModuleInterruptC1EiP6Module>:
#include "../interrupt/interrupt.h"
#include "moduleInterrupt.h"
#include "module.h"


ModuleInterrupt::ModuleInterrupt(int interruptNumber, Module* owner)
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fc ff64 	bl	80009e8 <_ZN9InterruptC1Ev>
 8003b20:	4a07      	ldr	r2, [pc, #28]	@ (8003b40 <_ZN15ModuleInterruptC1EiP6Module+0x34>)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	601a      	str	r2, [r3, #0]
{
	// Allows interrupt to access owner's data
	InterruptOwnerPtr = owner;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	605a      	str	r2, [r3, #4]

	// When a device interrupt object is instantiated, the Register function must be called to let the
	// Interrupt base class know that there is an appropriate ISR function for the given interrupt.
	Interrupt::Register(interruptNumber, this);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4619      	mov	r1, r3
 8003b30:	68b8      	ldr	r0, [r7, #8]
 8003b32:	f7fc ff69 	bl	8000a08 <_ZN9Interrupt8RegisterEiPS_>
}
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	08011c8c 	.word	0x08011c8c

08003b44 <_ZN15ModuleInterrupt11ISR_HandlerEv>:


void ModuleInterrupt::ISR_Handler(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
	this->InterruptOwnerPtr->handleInterrupt();
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	3318      	adds	r3, #24
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	4798      	blx	r3
}
 8003b5e:	bf00      	nop
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
	...

08003b68 <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef>:
#include "../remoraComms/RemoraComms.h"
#include <cstdio>

RemoraComms::RemoraComms(volatile rxData_t* ptrRxData, volatile txData_t* ptrTxData, SPI_TypeDef* spiType) :
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
 8003b74:	603b      	str	r3, [r7, #0]
    ptrRxData(ptrRxData),
    ptrTxData(ptrTxData),
    spiType(spiType)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7ff ff5b 	bl	8003a34 <_ZN6ModuleC1Ev>
 8003b7e:	4a0c      	ldr	r2, [pc, #48]	@ (8003bb0 <_ZN11RemoraCommsC1EPV8rxData_tPV8txData_tP11SPI_TypeDef+0x48>)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	601a      	str	r2, [r3, #0]
    ptrRxData(ptrRxData),
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	615a      	str	r2, [r3, #20]
    ptrTxData(ptrTxData),
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	619a      	str	r2, [r3, #24]
    spiType(spiType)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	61da      	str	r2, [r3, #28]
{
    this->spiHandle.Instance = this->spiType;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	69da      	ldr	r2, [r3, #28]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	629a      	str	r2, [r3, #40]	@ 0x28
    this->irq = EXTI4_IRQn;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	220a      	movs	r2, #10
 8003ba2:	849a      	strh	r2, [r3, #36]	@ 0x24

    // the constructor is called before any DMA and cache setup
    // don't do stuff here
}
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	08011c98 	.word	0x08011c98

08003bb4 <_ZN11RemoraComms4initEv>:


void RemoraComms::init()
{
 8003bb4:	b590      	push	{r4, r7, lr}
 8003bb6:	b08b      	sub	sp, #44	@ 0x2c
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bbc:	f107 0314 	add.w	r3, r7, #20
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	605a      	str	r2, [r3, #4]
 8003bc6:	609a      	str	r2, [r3, #8]
 8003bc8:	60da      	str	r2, [r3, #12]
 8003bca:	611a      	str	r2, [r3, #16]

    if(this->spiHandle.Instance == SPI1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd0:	4a9c      	ldr	r2, [pc, #624]	@ (8003e44 <_ZN11RemoraComms4initEv+0x290>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	f040 8132 	bne.w	8003e3c <_ZN11RemoraComms4initEv+0x288>
    {
    	// Interrupt pin is the NSS pin
        // Configure GPIO pin : PA_4

        __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bd8:	4b9b      	ldr	r3, [pc, #620]	@ (8003e48 <_ZN11RemoraComms4initEv+0x294>)
 8003bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bde:	4a9a      	ldr	r2, [pc, #616]	@ (8003e48 <_ZN11RemoraComms4initEv+0x294>)
 8003be0:	f043 0304 	orr.w	r3, r3, #4
 8003be4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003be8:	4b97      	ldr	r3, [pc, #604]	@ (8003e48 <_ZN11RemoraComms4initEv+0x294>)
 8003bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bee:	f003 0304 	and.w	r3, r3, #4
 8003bf2:	613b      	str	r3, [r7, #16]
 8003bf4:	693b      	ldr	r3, [r7, #16]

        GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003bf6:	2310      	movs	r3, #16
 8003bf8:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003bfa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003bfe:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c00:	2300      	movs	r3, #0
 8003c02:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c04:	f107 0314 	add.w	r3, r7, #20
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4890      	ldr	r0, [pc, #576]	@ (8003e4c <_ZN11RemoraComms4initEv+0x298>)
 8003c0c:	f002 f9c8 	bl	8005fa0 <HAL_GPIO_Init>

        interruptPtr = new ModuleInterrupt(this->irq, this);
 8003c10:	2008      	movs	r0, #8
 8003c12:	f00c fc5b 	bl	80104cc <_Znwj>
 8003c16:	4603      	mov	r3, r0
 8003c18:	461c      	mov	r4, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8003c20:	4619      	mov	r1, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	461a      	mov	r2, r3
 8003c26:	4620      	mov	r0, r4
 8003c28:	f7ff ff70 	bl	8003b0c <_ZN15ModuleInterruptC1EiP6Module>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	621c      	str	r4, [r3, #32]
    	HAL_NVIC_SetPriority(this->irq, 5, 0);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8003c36:	2200      	movs	r2, #0
 8003c38:	2105      	movs	r1, #5
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 fc2b 	bl	8004496 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(this->irq);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 fc3f 	bl	80044ca <HAL_NVIC_EnableIRQ>


        printf("Initialising SPI1 slave\n");
 8003c4c:	4880      	ldr	r0, [pc, #512]	@ (8003e50 <_ZN11RemoraComms4initEv+0x29c>)
 8003c4e:	f00c ffd3 	bl	8010bf8 <puts>

        this->spiHandle.Init.Mode           		= SPI_MODE_SLAVE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	62da      	str	r2, [r3, #44]	@ 0x2c
        this->spiHandle.Init.Direction      		= SPI_DIRECTION_2LINES;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	631a      	str	r2, [r3, #48]	@ 0x30
        this->spiHandle.Init.DataSize       		= SPI_DATASIZE_8BIT;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2207      	movs	r2, #7
 8003c62:	635a      	str	r2, [r3, #52]	@ 0x34
        this->spiHandle.Init.CLKPolarity    		= SPI_POLARITY_LOW;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	639a      	str	r2, [r3, #56]	@ 0x38
        this->spiHandle.Init.CLKPhase       		= SPI_PHASE_1EDGE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	63da      	str	r2, [r3, #60]	@ 0x3c
        this->spiHandle.Init.NSS            		= SPI_NSS_HARD_INPUT;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	641a      	str	r2, [r3, #64]	@ 0x40
        this->spiHandle.Init.FirstBit       		= SPI_FIRSTBIT_MSB;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	649a      	str	r2, [r3, #72]	@ 0x48
        this->spiHandle.Init.TIMode         		= SPI_TIMODE_DISABLE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	64da      	str	r2, [r3, #76]	@ 0x4c
        this->spiHandle.Init.CRCCalculation 		= SPI_CRCCALCULATION_DISABLE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	651a      	str	r2, [r3, #80]	@ 0x50
        this->spiHandle.Init.CRCPolynomial  		= 0x0;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	655a      	str	r2, [r3, #84]	@ 0x54
        this->spiHandle.Init.NSSPMode 				= SPI_NSS_PULSE_DISABLE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	65da      	str	r2, [r3, #92]	@ 0x5c
        this->spiHandle.Init.NSSPolarity 			= SPI_NSS_POLARITY_LOW;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	661a      	str	r2, [r3, #96]	@ 0x60
        this->spiHandle.Init.FifoThreshold 			= SPI_FIFO_THRESHOLD_01DATA;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	665a      	str	r2, [r3, #100]	@ 0x64
        this->spiHandle.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	669a      	str	r2, [r3, #104]	@ 0x68
        this->spiHandle.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	66da      	str	r2, [r3, #108]	@ 0x6c
        this->spiHandle.Init.MasterSSIdleness 		= SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	671a      	str	r2, [r3, #112]	@ 0x70
        this->spiHandle.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	675a      	str	r2, [r3, #116]	@ 0x74
        this->spiHandle.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	679a      	str	r2, [r3, #120]	@ 0x78
        this->spiHandle.Init.MasterKeepIOState 		= SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	67da      	str	r2, [r3, #124]	@ 0x7c
        this->spiHandle.Init.IOSwap 				= SPI_IO_SWAP_DISABLE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        HAL_SPI_Init(&this->spiHandle);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3328      	adds	r3, #40	@ 0x28
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f007 fc97 	bl	800b604 <HAL_SPI_Init>

    	// Peripheral clock enable
    	__HAL_RCC_SPI1_CLK_ENABLE();
 8003cd6:	4b5c      	ldr	r3, [pc, #368]	@ (8003e48 <_ZN11RemoraComms4initEv+0x294>)
 8003cd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cdc:	4a5a      	ldr	r2, [pc, #360]	@ (8003e48 <_ZN11RemoraComms4initEv+0x294>)
 8003cde:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003ce2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003ce6:	4b58      	ldr	r3, [pc, #352]	@ (8003e48 <_ZN11RemoraComms4initEv+0x294>)
 8003ce8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	68fb      	ldr	r3, [r7, #12]

		printf("Initialising GPIO for SPI\n");
 8003cf4:	4857      	ldr	r0, [pc, #348]	@ (8003e54 <_ZN11RemoraComms4initEv+0x2a0>)
 8003cf6:	f00c ff7f 	bl	8010bf8 <puts>

	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cfa:	4b53      	ldr	r3, [pc, #332]	@ (8003e48 <_ZN11RemoraComms4initEv+0x294>)
 8003cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d00:	4a51      	ldr	r2, [pc, #324]	@ (8003e48 <_ZN11RemoraComms4initEv+0x294>)
 8003d02:	f043 0301 	orr.w	r3, r3, #1
 8003d06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003d0a:	4b4f      	ldr	r3, [pc, #316]	@ (8003e48 <_ZN11RemoraComms4initEv+0x294>)
 8003d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	60bb      	str	r3, [r7, #8]
 8003d16:	68bb      	ldr	r3, [r7, #8]
	    PA4     ------> SPI1_NSS
	    PA5     ------> SPI1_SCK
	    PA6     ------> SPI1_MISO
	    PA7     ------> SPI1_MOSI
	    */
    	GPIO_InitStruct = {0};
 8003d18:	f107 0314 	add.w	r3, r7, #20
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	605a      	str	r2, [r3, #4]
 8003d22:	609a      	str	r2, [r3, #8]
 8003d24:	60da      	str	r2, [r3, #12]
 8003d26:	611a      	str	r2, [r3, #16]
	    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003d28:	23f0      	movs	r3, #240	@ 0xf0
 8003d2a:	617b      	str	r3, [r7, #20]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	61bb      	str	r3, [r7, #24]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d30:	2300      	movs	r3, #0
 8003d32:	61fb      	str	r3, [r7, #28]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d34:	2300      	movs	r3, #0
 8003d36:	623b      	str	r3, [r7, #32]
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d38:	2305      	movs	r3, #5
 8003d3a:	627b      	str	r3, [r7, #36]	@ 0x24
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d3c:	f107 0314 	add.w	r3, r7, #20
 8003d40:	4619      	mov	r1, r3
 8003d42:	4842      	ldr	r0, [pc, #264]	@ (8003e4c <_ZN11RemoraComms4initEv+0x298>)
 8003d44:	f002 f92c 	bl	8005fa0 <HAL_GPIO_Init>

        printf("Initialising DMA for SPI\n");
 8003d48:	4843      	ldr	r0, [pc, #268]	@ (8003e58 <_ZN11RemoraComms4initEv+0x2a4>)
 8003d4a:	f00c ff55 	bl	8010bf8 <puts>

        this->hdma_spi_rx.Instance 					= DMA1_Stream1;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a42      	ldr	r2, [pc, #264]	@ (8003e5c <_ZN11RemoraComms4initEv+0x2a8>)
 8003d52:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
        this->hdma_spi_rx.Init.Request 				= DMA_REQUEST_SPI1_RX;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2225      	movs	r2, #37	@ 0x25
 8003d5a:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
        this->hdma_spi_rx.Init.Direction 			= DMA_PERIPH_TO_MEMORY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
        this->hdma_spi_rx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
        this->hdma_spi_rx.Init.MemInc 				= DMA_MINC_ENABLE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d74:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
        this->hdma_spi_rx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
        this->hdma_spi_rx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        this->hdma_spi_rx.Init.Mode 				= DMA_CIRCULAR;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d8e:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
        this->hdma_spi_rx.Init.Priority 			= DMA_PRIORITY_LOW;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
        this->hdma_spi_rx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

        HAL_DMA_Init(&this->hdma_spi_rx);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 fc21 	bl	80045f0 <HAL_DMA_Init>
        __HAL_LINKDMA(&this->spiHandle, hdmarx, this->hdma_spi_rx);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f503 7294 	add.w	r2, r3, #296	@ 0x128
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

        this->hdma_spi_tx.Instance 					= DMA1_Stream0;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a25      	ldr	r2, [pc, #148]	@ (8003e60 <_ZN11RemoraComms4initEv+0x2ac>)
 8003dca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        this->hdma_spi_tx.Init.Request 				= DMA_REQUEST_SPI1_TX;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2226      	movs	r2, #38	@ 0x26
 8003dd2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        this->hdma_spi_tx.Init.Direction 			= DMA_MEMORY_TO_PERIPH;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2240      	movs	r2, #64	@ 0x40
 8003dda:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        this->hdma_spi_tx.Init.PeriphInc 			= DMA_PINC_DISABLE;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        this->hdma_spi_tx.Init.MemInc 				= DMA_MINC_ENABLE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003dec:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        this->hdma_spi_tx.Init.PeriphDataAlignment 	= DMA_PDATAALIGN_BYTE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        this->hdma_spi_tx.Init.MemDataAlignment 	= DMA_MDATAALIGN_BYTE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        this->hdma_spi_tx.Init.Mode 				= DMA_CIRCULAR;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e06:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
        this->hdma_spi_tx.Init.Priority 			= DMA_PRIORITY_LOW;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
        this->hdma_spi_tx.Init.FIFOMode 			= DMA_FIFOMODE_DISABLE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4

        HAL_DMA_Init(&this->hdma_spi_tx);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	33b0      	adds	r3, #176	@ 0xb0
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fbe6 	bl	80045f0 <HAL_DMA_Init>
        __HAL_LINKDMA(&this->spiHandle, hdmatx, this->hdma_spi_tx);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8

    interruptPtr = new ModuleInterrupt(this->irq, this);
	HAL_NVIC_SetPriority(this->irq, 5, 0);
    HAL_NVIC_EnableIRQ(this->irq);
*/
}
 8003e3c:	bf00      	nop
 8003e3e:	372c      	adds	r7, #44	@ 0x2c
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd90      	pop	{r4, r7, pc}
 8003e44:	40013000 	.word	0x40013000
 8003e48:	58024400 	.word	0x58024400
 8003e4c:	58020000 	.word	0x58020000
 8003e50:	08011bb0 	.word	0x08011bb0
 8003e54:	08011bc8 	.word	0x08011bc8
 8003e58:	08011be4 	.word	0x08011be4
 8003e5c:	40020028 	.word	0x40020028
 8003e60:	40020010 	.word	0x40020010

08003e64 <_ZN11RemoraComms5startEv>:

void RemoraComms::start()
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08a      	sub	sp, #40	@ 0x28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
    this->ptrTxData->header = PRU_DATA;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	4a32      	ldr	r2, [pc, #200]	@ (8003f3c <_ZN11RemoraComms5startEv+0xd8>)
 8003e72:	601a      	str	r2, [r3, #0]
    SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)this->ptrTxData->txBuffer) & ~(uint32_t)0x1F), BUFFER_ALIGNED_SIZE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	f023 031f 	bic.w	r3, r3, #31
 8003e7c:	617b      	str	r3, [r7, #20]
 8003e7e:	2340      	movs	r3, #64	@ 0x40
 8003e80:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	dd1d      	ble.n	8003ec4 <_ZN11RemoraComms5startEv+0x60>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f003 021f 	and.w	r2, r3, #31
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	4413      	add	r3, r2
 8003e92:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8003e98:	f3bf 8f4f 	dsb	sy
}
 8003e9c:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8003e9e:	4a28      	ldr	r2, [pc, #160]	@ (8003f40 <_ZN11RemoraComms5startEv+0xdc>)
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	3320      	adds	r3, #32
 8003eaa:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	3b20      	subs	r3, #32
 8003eb0:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	dcf2      	bgt.n	8003e9e <_ZN11RemoraComms5startEv+0x3a>
  __ASM volatile ("dsb 0xF":::"memory");
 8003eb8:	f3bf 8f4f 	dsb	sy
}
 8003ebc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003ebe:	f3bf 8f6f 	isb	sy
}
 8003ec2:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8003ec4:	bf00      	nop
    SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)this->spiRxBuffer.rxBuffer) & ~(uint32_t)0x1F), BUFFER_ALIGNED_SIZE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8003ecc:	f023 031f 	bic.w	r3, r3, #31
 8003ed0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ed2:	2340      	movs	r3, #64	@ 0x40
 8003ed4:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	dd1d      	ble.n	8003f18 <_ZN11RemoraComms5startEv+0xb4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8003edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ede:	f003 021f 	and.w	r2, r3, #31
 8003ee2:	6a3b      	ldr	r3, [r7, #32]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8003eec:	f3bf 8f4f 	dsb	sy
}
 8003ef0:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8003ef2:	4a13      	ldr	r2, [pc, #76]	@ (8003f40 <_ZN11RemoraComms5startEv+0xdc>)
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	3320      	adds	r3, #32
 8003efe:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	3b20      	subs	r3, #32
 8003f04:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	dcf2      	bgt.n	8003ef2 <_ZN11RemoraComms5startEv+0x8e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003f0c:	f3bf 8f4f 	dsb	sy
}
 8003f10:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003f12:	f3bf 8f6f 	isb	sy
}
 8003f16:	bf00      	nop
}
 8003f18:	bf00      	nop
    HAL_SPI_TransmitReceive_DMA(&this->spiHandle, (uint8_t *)this->ptrTxData->txBuffer, (uint8_t *)this->spiRxBuffer.rxBuffer, SPI_BUFF_SIZE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	4619      	mov	r1, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f503 7208 	add.w	r2, r3, #544	@ 0x220
 8003f2c:	2340      	movs	r3, #64	@ 0x40
 8003f2e:	f007 fc97 	bl	800b860 <HAL_SPI_TransmitReceive_DMA>
}
 8003f32:	bf00      	nop
 8003f34:	3728      	adds	r7, #40	@ 0x28
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	64617461 	.word	0x64617461
 8003f40:	e000ed00 	.word	0xe000ed00

08003f44 <_ZN11RemoraComms15handleInterruptEv>:


void RemoraComms::handleInterrupt()
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b08c      	sub	sp, #48	@ 0x30
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
	//printf("RemoraComms interrupt\n");

    SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)this->ptrTxData->txBuffer) & ~(uint32_t)0x1F), BUFFER_ALIGNED_SIZE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	f023 031f 	bic.w	r3, r3, #31
 8003f54:	61bb      	str	r3, [r7, #24]
 8003f56:	2340      	movs	r3, #64	@ 0x40
 8003f58:	617b      	str	r3, [r7, #20]
    if ( dsize > 0 ) { 
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	dd1d      	ble.n	8003f9c <_ZN11RemoraComms15handleInterruptEv+0x58>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	f003 021f 	and.w	r2, r3, #31
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	4413      	add	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003f70:	f3bf 8f4f 	dsb	sy
}
 8003f74:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8003f76:	4a4a      	ldr	r2, [pc, #296]	@ (80040a0 <_ZN11RemoraComms15handleInterruptEv+0x15c>)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	3320      	adds	r3, #32
 8003f82:	60fb      	str	r3, [r7, #12]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	3b20      	subs	r3, #32
 8003f88:	613b      	str	r3, [r7, #16]
      } while ( op_size > 0 );
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	dcf2      	bgt.n	8003f76 <_ZN11RemoraComms15handleInterruptEv+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 8003f90:	f3bf 8f4f 	dsb	sy
}
 8003f94:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003f96:	f3bf 8f6f 	isb	sy
}
 8003f9a:	bf00      	nop
}
 8003f9c:	bf00      	nop
	SCB_InvalidateDCache_by_Addr((uint32_t*)(((uint32_t)this->spiRxBuffer.rxBuffer) & ~(uint32_t)0x1F), BUFFER_ALIGNED_SIZE);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8003fa4:	f023 031f 	bic.w	r3, r3, #31
 8003fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003faa:	2340      	movs	r3, #64	@ 0x40
 8003fac:	627b      	str	r3, [r7, #36]	@ 0x24
    if ( dsize > 0 ) { 
 8003fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	dd1d      	ble.n	8003ff0 <_ZN11RemoraComms15handleInterruptEv+0xac>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8003fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb6:	f003 021f 	and.w	r2, r3, #31
 8003fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fbc:	4413      	add	r3, r2
 8003fbe:	623b      	str	r3, [r7, #32]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8003fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fc2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 8003fc4:	f3bf 8f4f 	dsb	sy
}
 8003fc8:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8003fca:	4a35      	ldr	r2, [pc, #212]	@ (80040a0 <_ZN11RemoraComms15handleInterruptEv+0x15c>)
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	3320      	adds	r3, #32
 8003fd6:	61fb      	str	r3, [r7, #28]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8003fd8:	6a3b      	ldr	r3, [r7, #32]
 8003fda:	3b20      	subs	r3, #32
 8003fdc:	623b      	str	r3, [r7, #32]
      } while ( op_size > 0 );
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	dcf2      	bgt.n	8003fca <_ZN11RemoraComms15handleInterruptEv+0x86>
  __ASM volatile ("dsb 0xF":::"memory");
 8003fe4:	f3bf 8f4f 	dsb	sy
}
 8003fe8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003fea:	f3bf 8f6f 	isb	sy
}
 8003fee:	bf00      	nop
}
 8003ff0:	bf00      	nop

	switch (this->spiRxBuffer.header)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8003ff8:	4a2a      	ldr	r2, [pc, #168]	@ (80040a4 <_ZN11RemoraComms15handleInterruptEv+0x160>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d003      	beq.n	8004006 <_ZN11RemoraComms15handleInterruptEv+0xc2>
 8003ffe:	4a2a      	ldr	r2, [pc, #168]	@ (80040a8 <_ZN11RemoraComms15handleInterruptEv+0x164>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d009      	beq.n	8004018 <_ZN11RemoraComms15handleInterruptEv+0xd4>
 8004004:	e02a      	b.n	800405c <_ZN11RemoraComms15handleInterruptEv+0x118>
	{
	  case PRU_READ:
		this->SPIdata = true;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
		this->rejectCnt = 0;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
		// READ so do nothing with the received data
		break;
 8004016:	e032      	b.n	800407e <_ZN11RemoraComms15handleInterruptEv+0x13a>

	  case PRU_WRITE:
		this->SPIdata = true;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
		this->rejectCnt = 0;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
  __ASM volatile ("cpsid i" : : : "memory");
 8004028:	b672      	cpsid	i
}
 800402a:	bf00      	nop

		// ensure an atomic access to the rxBuffer
		// disable thread interrupts
		__disable_irq();
		for (int i = 0; i < SPI_BUFF_SIZE; i++)
 800402c:	2300      	movs	r3, #0
 800402e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004030:	e00e      	b.n	8004050 <_ZN11RemoraComms15handleInterruptEv+0x10c>
		{
			this->ptrRxData->rxBuffer[i] = this->spiRxBuffer.rxBuffer[i];
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	695a      	ldr	r2, [r3, #20]
 8004036:	6879      	ldr	r1, [r7, #4]
 8004038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800403a:	440b      	add	r3, r1
 800403c:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8004040:	7819      	ldrb	r1, [r3, #0]
 8004042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004044:	4413      	add	r3, r2
 8004046:	460a      	mov	r2, r1
 8004048:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < SPI_BUFF_SIZE; i++)
 800404a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800404c:	3301      	adds	r3, #1
 800404e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004052:	2b3f      	cmp	r3, #63	@ 0x3f
 8004054:	dded      	ble.n	8004032 <_ZN11RemoraComms15handleInterruptEv+0xee>
  __ASM volatile ("cpsie i" : : : "memory");
 8004056:	b662      	cpsie	i
}
 8004058:	bf00      	nop
		}
		// re-enable thread interrupts
		__enable_irq();
		break;
 800405a:	e010      	b.n	800407e <_ZN11RemoraComms15handleInterruptEv+0x13a>

	  default:
		this->rejectCnt++;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8004062:	3301      	adds	r3, #1
 8004064:	b2da      	uxtb	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
		if (this->rejectCnt > 5)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8004072:	2b05      	cmp	r3, #5
 8004074:	d903      	bls.n	800407e <_ZN11RemoraComms15handleInterruptEv+0x13a>
		{
			this->SPIdataError = true;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
		}
		// reset SPI somehow
	}

    HAL_SPI_TransmitReceive_DMA(&this->spiHandle, (uint8_t *)this->ptrTxData->txBuffer, (uint8_t *)this->spiRxBuffer.rxBuffer, SPI_BUFF_SIZE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	4619      	mov	r1, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f503 7208 	add.w	r2, r3, #544	@ 0x220
 8004090:	2340      	movs	r3, #64	@ 0x40
 8004092:	f007 fbe5 	bl	800b860 <HAL_SPI_TransmitReceive_DMA>
}
 8004096:	bf00      	nop
 8004098:	3730      	adds	r7, #48	@ 0x30
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	e000ed00 	.word	0xe000ed00
 80040a4:	72656164 	.word	0x72656164
 80040a8:	77726974 	.word	0x77726974

080040ac <_ZN11RemoraComms6updateEv>:


void RemoraComms::update()
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
	// unused for RemoraComms
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <_ZN11RemoraCommsD1Ev>:
#include "remora.h"
#include "../../modules/module.h"
#include "../../modules/moduleinterrupt.h"


class RemoraComms : public Module
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	4a05      	ldr	r2, [pc, #20]	@ (80040e0 <_ZN11RemoraCommsD1Ev+0x20>)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7ff fcc9 	bl	8003a68 <_ZN6ModuleD1Ev>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4618      	mov	r0, r3
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	08011c98 	.word	0x08011c98

080040e4 <_ZN11RemoraCommsD0Ev>:
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f7ff ffe7 	bl	80040c0 <_ZN11RemoraCommsD1Ev>
 80040f2:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f00c f9d7 	bl	80104aa <_ZdlPvj>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4618      	mov	r0, r3
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
	...

08004108 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004108:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004140 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800410c:	f7ff fc0a 	bl	8003924 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004110:	480c      	ldr	r0, [pc, #48]	@ (8004144 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004112:	490d      	ldr	r1, [pc, #52]	@ (8004148 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004114:	4a0d      	ldr	r2, [pc, #52]	@ (800414c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004118:	e002      	b.n	8004120 <LoopCopyDataInit>

0800411a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800411a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800411c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800411e:	3304      	adds	r3, #4

08004120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004124:	d3f9      	bcc.n	800411a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004126:	4a0a      	ldr	r2, [pc, #40]	@ (8004150 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004128:	4c0a      	ldr	r4, [pc, #40]	@ (8004154 <LoopFillZerobss+0x22>)
  movs r3, #0
 800412a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800412c:	e001      	b.n	8004132 <LoopFillZerobss>

0800412e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800412e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004130:	3204      	adds	r2, #4

08004132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004134:	d3fb      	bcc.n	800412e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004136:	f00c ff01 	bl	8010f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800413a:	f7fd f9f1 	bl	8001520 <main>
  bx  lr
 800413e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004140:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004144:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004148:	240000bc 	.word	0x240000bc
  ldr r2, =_sidata
 800414c:	08011df8 	.word	0x08011df8
  ldr r2, =_sbss
 8004150:	240000c0 	.word	0x240000c0
  ldr r4, =_ebss
 8004154:	24000d80 	.word	0x24000d80

08004158 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004158:	e7fe      	b.n	8004158 <ADC3_IRQHandler>
	...

0800415c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004162:	2003      	movs	r0, #3
 8004164:	f000 f98c 	bl	8004480 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004168:	f002 ff14 	bl	8006f94 <HAL_RCC_GetSysClockFreq>
 800416c:	4602      	mov	r2, r0
 800416e:	4b15      	ldr	r3, [pc, #84]	@ (80041c4 <HAL_Init+0x68>)
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	0a1b      	lsrs	r3, r3, #8
 8004174:	f003 030f 	and.w	r3, r3, #15
 8004178:	4913      	ldr	r1, [pc, #76]	@ (80041c8 <HAL_Init+0x6c>)
 800417a:	5ccb      	ldrb	r3, [r1, r3]
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	fa22 f303 	lsr.w	r3, r2, r3
 8004184:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004186:	4b0f      	ldr	r3, [pc, #60]	@ (80041c4 <HAL_Init+0x68>)
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	4a0e      	ldr	r2, [pc, #56]	@ (80041c8 <HAL_Init+0x6c>)
 8004190:	5cd3      	ldrb	r3, [r2, r3]
 8004192:	f003 031f 	and.w	r3, r3, #31
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	fa22 f303 	lsr.w	r3, r2, r3
 800419c:	4a0b      	ldr	r2, [pc, #44]	@ (80041cc <HAL_Init+0x70>)
 800419e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041a0:	4a0b      	ldr	r2, [pc, #44]	@ (80041d0 <HAL_Init+0x74>)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80041a6:	200f      	movs	r0, #15
 80041a8:	f000 f814 	bl	80041d4 <HAL_InitTick>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e002      	b.n	80041bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80041b6:	f7ff f987 	bl	80034c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	58024400 	.word	0x58024400
 80041c8:	08011c50 	.word	0x08011c50
 80041cc:	24000054 	.word	0x24000054
 80041d0:	24000050 	.word	0x24000050

080041d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80041dc:	4b15      	ldr	r3, [pc, #84]	@ (8004234 <HAL_InitTick+0x60>)
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e021      	b.n	800422c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80041e8:	4b13      	ldr	r3, [pc, #76]	@ (8004238 <HAL_InitTick+0x64>)
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	4b11      	ldr	r3, [pc, #68]	@ (8004234 <HAL_InitTick+0x60>)
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	4619      	mov	r1, r3
 80041f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80041fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 f971 	bl	80044e6 <HAL_SYSTICK_Config>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e00e      	b.n	800422c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b0f      	cmp	r3, #15
 8004212:	d80a      	bhi.n	800422a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004214:	2200      	movs	r2, #0
 8004216:	6879      	ldr	r1, [r7, #4]
 8004218:	f04f 30ff 	mov.w	r0, #4294967295
 800421c:	f000 f93b 	bl	8004496 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004220:	4a06      	ldr	r2, [pc, #24]	@ (800423c <HAL_InitTick+0x68>)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	e000      	b.n	800422c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
}
 800422c:	4618      	mov	r0, r3
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	2400005c 	.word	0x2400005c
 8004238:	24000050 	.word	0x24000050
 800423c:	24000058 	.word	0x24000058

08004240 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004244:	4b06      	ldr	r3, [pc, #24]	@ (8004260 <HAL_IncTick+0x20>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	461a      	mov	r2, r3
 800424a:	4b06      	ldr	r3, [pc, #24]	@ (8004264 <HAL_IncTick+0x24>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4413      	add	r3, r2
 8004250:	4a04      	ldr	r2, [pc, #16]	@ (8004264 <HAL_IncTick+0x24>)
 8004252:	6013      	str	r3, [r2, #0]
}
 8004254:	bf00      	nop
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	2400005c 	.word	0x2400005c
 8004264:	24000588 	.word	0x24000588

08004268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  return uwTick;
 800426c:	4b03      	ldr	r3, [pc, #12]	@ (800427c <HAL_GetTick+0x14>)
 800426e:	681b      	ldr	r3, [r3, #0]
}
 8004270:	4618      	mov	r0, r3
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	24000588 	.word	0x24000588

08004280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004288:	f7ff ffee 	bl	8004268 <HAL_GetTick>
 800428c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004298:	d005      	beq.n	80042a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800429a:	4b0a      	ldr	r3, [pc, #40]	@ (80042c4 <HAL_Delay+0x44>)
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	461a      	mov	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4413      	add	r3, r2
 80042a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80042a6:	bf00      	nop
 80042a8:	f7ff ffde 	bl	8004268 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d8f7      	bhi.n	80042a8 <HAL_Delay+0x28>
  {
  }
}
 80042b8:	bf00      	nop
 80042ba:	bf00      	nop
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	2400005c 	.word	0x2400005c

080042c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80042cc:	4b03      	ldr	r3, [pc, #12]	@ (80042dc <HAL_GetREVID+0x14>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	0c1b      	lsrs	r3, r3, #16
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	5c001000 	.word	0x5c001000

080042e0 <__NVIC_SetPriorityGrouping>:
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f003 0307 	and.w	r3, r3, #7
 80042ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004320 <__NVIC_SetPriorityGrouping+0x40>)
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80042fc:	4013      	ands	r3, r2
 80042fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004308:	4b06      	ldr	r3, [pc, #24]	@ (8004324 <__NVIC_SetPriorityGrouping+0x44>)
 800430a:	4313      	orrs	r3, r2
 800430c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800430e:	4a04      	ldr	r2, [pc, #16]	@ (8004320 <__NVIC_SetPriorityGrouping+0x40>)
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	60d3      	str	r3, [r2, #12]
}
 8004314:	bf00      	nop
 8004316:	3714      	adds	r7, #20
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	e000ed00 	.word	0xe000ed00
 8004324:	05fa0000 	.word	0x05fa0000

08004328 <__NVIC_GetPriorityGrouping>:
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800432c:	4b04      	ldr	r3, [pc, #16]	@ (8004340 <__NVIC_GetPriorityGrouping+0x18>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	0a1b      	lsrs	r3, r3, #8
 8004332:	f003 0307 	and.w	r3, r3, #7
}
 8004336:	4618      	mov	r0, r3
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	e000ed00 	.word	0xe000ed00

08004344 <__NVIC_EnableIRQ>:
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	4603      	mov	r3, r0
 800434c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800434e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004352:	2b00      	cmp	r3, #0
 8004354:	db0b      	blt.n	800436e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004356:	88fb      	ldrh	r3, [r7, #6]
 8004358:	f003 021f 	and.w	r2, r3, #31
 800435c:	4907      	ldr	r1, [pc, #28]	@ (800437c <__NVIC_EnableIRQ+0x38>)
 800435e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004362:	095b      	lsrs	r3, r3, #5
 8004364:	2001      	movs	r0, #1
 8004366:	fa00 f202 	lsl.w	r2, r0, r2
 800436a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	e000e100 	.word	0xe000e100

08004380 <__NVIC_SetPriority>:
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	4603      	mov	r3, r0
 8004388:	6039      	str	r1, [r7, #0]
 800438a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800438c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004390:	2b00      	cmp	r3, #0
 8004392:	db0a      	blt.n	80043aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	b2da      	uxtb	r2, r3
 8004398:	490c      	ldr	r1, [pc, #48]	@ (80043cc <__NVIC_SetPriority+0x4c>)
 800439a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800439e:	0112      	lsls	r2, r2, #4
 80043a0:	b2d2      	uxtb	r2, r2
 80043a2:	440b      	add	r3, r1
 80043a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80043a8:	e00a      	b.n	80043c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	b2da      	uxtb	r2, r3
 80043ae:	4908      	ldr	r1, [pc, #32]	@ (80043d0 <__NVIC_SetPriority+0x50>)
 80043b0:	88fb      	ldrh	r3, [r7, #6]
 80043b2:	f003 030f 	and.w	r3, r3, #15
 80043b6:	3b04      	subs	r3, #4
 80043b8:	0112      	lsls	r2, r2, #4
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	440b      	add	r3, r1
 80043be:	761a      	strb	r2, [r3, #24]
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	e000e100 	.word	0xe000e100
 80043d0:	e000ed00 	.word	0xe000ed00

080043d4 <NVIC_EncodePriority>:
{
 80043d4:	b480      	push	{r7}
 80043d6:	b089      	sub	sp, #36	@ 0x24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f003 0307 	and.w	r3, r3, #7
 80043e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	f1c3 0307 	rsb	r3, r3, #7
 80043ee:	2b04      	cmp	r3, #4
 80043f0:	bf28      	it	cs
 80043f2:	2304      	movcs	r3, #4
 80043f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	3304      	adds	r3, #4
 80043fa:	2b06      	cmp	r3, #6
 80043fc:	d902      	bls.n	8004404 <NVIC_EncodePriority+0x30>
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	3b03      	subs	r3, #3
 8004402:	e000      	b.n	8004406 <NVIC_EncodePriority+0x32>
 8004404:	2300      	movs	r3, #0
 8004406:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004408:	f04f 32ff 	mov.w	r2, #4294967295
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	fa02 f303 	lsl.w	r3, r2, r3
 8004412:	43da      	mvns	r2, r3
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	401a      	ands	r2, r3
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800441c:	f04f 31ff 	mov.w	r1, #4294967295
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	fa01 f303 	lsl.w	r3, r1, r3
 8004426:	43d9      	mvns	r1, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800442c:	4313      	orrs	r3, r2
}
 800442e:	4618      	mov	r0, r3
 8004430:	3724      	adds	r7, #36	@ 0x24
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
	...

0800443c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	3b01      	subs	r3, #1
 8004448:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800444c:	d301      	bcc.n	8004452 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800444e:	2301      	movs	r3, #1
 8004450:	e00f      	b.n	8004472 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004452:	4a0a      	ldr	r2, [pc, #40]	@ (800447c <SysTick_Config+0x40>)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3b01      	subs	r3, #1
 8004458:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800445a:	210f      	movs	r1, #15
 800445c:	f04f 30ff 	mov.w	r0, #4294967295
 8004460:	f7ff ff8e 	bl	8004380 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004464:	4b05      	ldr	r3, [pc, #20]	@ (800447c <SysTick_Config+0x40>)
 8004466:	2200      	movs	r2, #0
 8004468:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800446a:	4b04      	ldr	r3, [pc, #16]	@ (800447c <SysTick_Config+0x40>)
 800446c:	2207      	movs	r2, #7
 800446e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	e000e010 	.word	0xe000e010

08004480 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7ff ff29 	bl	80042e0 <__NVIC_SetPriorityGrouping>
}
 800448e:	bf00      	nop
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b086      	sub	sp, #24
 800449a:	af00      	add	r7, sp, #0
 800449c:	4603      	mov	r3, r0
 800449e:	60b9      	str	r1, [r7, #8]
 80044a0:	607a      	str	r2, [r7, #4]
 80044a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80044a4:	f7ff ff40 	bl	8004328 <__NVIC_GetPriorityGrouping>
 80044a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	68b9      	ldr	r1, [r7, #8]
 80044ae:	6978      	ldr	r0, [r7, #20]
 80044b0:	f7ff ff90 	bl	80043d4 <NVIC_EncodePriority>
 80044b4:	4602      	mov	r2, r0
 80044b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80044ba:	4611      	mov	r1, r2
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff ff5f 	bl	8004380 <__NVIC_SetPriority>
}
 80044c2:	bf00      	nop
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b082      	sub	sp, #8
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	4603      	mov	r3, r0
 80044d2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff ff33 	bl	8004344 <__NVIC_EnableIRQ>
}
 80044de:	bf00      	nop
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b082      	sub	sp, #8
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7ff ffa4 	bl	800443c <SysTick_Config>
 80044f4:	4603      	mov	r3, r0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
	...

08004500 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004504:	f3bf 8f5f 	dmb	sy
}
 8004508:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800450a:	4b07      	ldr	r3, [pc, #28]	@ (8004528 <HAL_MPU_Disable+0x28>)
 800450c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450e:	4a06      	ldr	r2, [pc, #24]	@ (8004528 <HAL_MPU_Disable+0x28>)
 8004510:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004514:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004516:	4b05      	ldr	r3, [pc, #20]	@ (800452c <HAL_MPU_Disable+0x2c>)
 8004518:	2200      	movs	r2, #0
 800451a:	605a      	str	r2, [r3, #4]
}
 800451c:	bf00      	nop
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	e000ed00 	.word	0xe000ed00
 800452c:	e000ed90 	.word	0xe000ed90

08004530 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004538:	4a0b      	ldr	r2, [pc, #44]	@ (8004568 <HAL_MPU_Enable+0x38>)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f043 0301 	orr.w	r3, r3, #1
 8004540:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004542:	4b0a      	ldr	r3, [pc, #40]	@ (800456c <HAL_MPU_Enable+0x3c>)
 8004544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004546:	4a09      	ldr	r2, [pc, #36]	@ (800456c <HAL_MPU_Enable+0x3c>)
 8004548:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800454c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800454e:	f3bf 8f4f 	dsb	sy
}
 8004552:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004554:	f3bf 8f6f 	isb	sy
}
 8004558:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800455a:	bf00      	nop
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	e000ed90 	.word	0xe000ed90
 800456c:	e000ed00 	.word	0xe000ed00

08004570 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	785a      	ldrb	r2, [r3, #1]
 800457c:	4b1b      	ldr	r3, [pc, #108]	@ (80045ec <HAL_MPU_ConfigRegion+0x7c>)
 800457e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004580:	4b1a      	ldr	r3, [pc, #104]	@ (80045ec <HAL_MPU_ConfigRegion+0x7c>)
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	4a19      	ldr	r2, [pc, #100]	@ (80045ec <HAL_MPU_ConfigRegion+0x7c>)
 8004586:	f023 0301 	bic.w	r3, r3, #1
 800458a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800458c:	4a17      	ldr	r2, [pc, #92]	@ (80045ec <HAL_MPU_ConfigRegion+0x7c>)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	7b1b      	ldrb	r3, [r3, #12]
 8004598:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	7adb      	ldrb	r3, [r3, #11]
 800459e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80045a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	7a9b      	ldrb	r3, [r3, #10]
 80045a6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80045a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	7b5b      	ldrb	r3, [r3, #13]
 80045ae:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80045b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	7b9b      	ldrb	r3, [r3, #14]
 80045b6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80045b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	7bdb      	ldrb	r3, [r3, #15]
 80045be:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80045c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	7a5b      	ldrb	r3, [r3, #9]
 80045c6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80045c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	7a1b      	ldrb	r3, [r3, #8]
 80045ce:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80045d0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	7812      	ldrb	r2, [r2, #0]
 80045d6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80045d8:	4a04      	ldr	r2, [pc, #16]	@ (80045ec <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80045da:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80045dc:	6113      	str	r3, [r2, #16]
}
 80045de:	bf00      	nop
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	e000ed90 	.word	0xe000ed90

080045f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80045f8:	f7ff fe36 	bl	8004268 <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e316      	b.n	8004c36 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a66      	ldr	r2, [pc, #408]	@ (80047a8 <HAL_DMA_Init+0x1b8>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d04a      	beq.n	80046a8 <HAL_DMA_Init+0xb8>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a65      	ldr	r2, [pc, #404]	@ (80047ac <HAL_DMA_Init+0x1bc>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d045      	beq.n	80046a8 <HAL_DMA_Init+0xb8>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a63      	ldr	r2, [pc, #396]	@ (80047b0 <HAL_DMA_Init+0x1c0>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d040      	beq.n	80046a8 <HAL_DMA_Init+0xb8>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a62      	ldr	r2, [pc, #392]	@ (80047b4 <HAL_DMA_Init+0x1c4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d03b      	beq.n	80046a8 <HAL_DMA_Init+0xb8>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a60      	ldr	r2, [pc, #384]	@ (80047b8 <HAL_DMA_Init+0x1c8>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d036      	beq.n	80046a8 <HAL_DMA_Init+0xb8>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a5f      	ldr	r2, [pc, #380]	@ (80047bc <HAL_DMA_Init+0x1cc>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d031      	beq.n	80046a8 <HAL_DMA_Init+0xb8>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a5d      	ldr	r2, [pc, #372]	@ (80047c0 <HAL_DMA_Init+0x1d0>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d02c      	beq.n	80046a8 <HAL_DMA_Init+0xb8>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a5c      	ldr	r2, [pc, #368]	@ (80047c4 <HAL_DMA_Init+0x1d4>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d027      	beq.n	80046a8 <HAL_DMA_Init+0xb8>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a5a      	ldr	r2, [pc, #360]	@ (80047c8 <HAL_DMA_Init+0x1d8>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d022      	beq.n	80046a8 <HAL_DMA_Init+0xb8>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a59      	ldr	r2, [pc, #356]	@ (80047cc <HAL_DMA_Init+0x1dc>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d01d      	beq.n	80046a8 <HAL_DMA_Init+0xb8>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a57      	ldr	r2, [pc, #348]	@ (80047d0 <HAL_DMA_Init+0x1e0>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d018      	beq.n	80046a8 <HAL_DMA_Init+0xb8>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a56      	ldr	r2, [pc, #344]	@ (80047d4 <HAL_DMA_Init+0x1e4>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d013      	beq.n	80046a8 <HAL_DMA_Init+0xb8>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a54      	ldr	r2, [pc, #336]	@ (80047d8 <HAL_DMA_Init+0x1e8>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d00e      	beq.n	80046a8 <HAL_DMA_Init+0xb8>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a53      	ldr	r2, [pc, #332]	@ (80047dc <HAL_DMA_Init+0x1ec>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d009      	beq.n	80046a8 <HAL_DMA_Init+0xb8>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a51      	ldr	r2, [pc, #324]	@ (80047e0 <HAL_DMA_Init+0x1f0>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d004      	beq.n	80046a8 <HAL_DMA_Init+0xb8>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a50      	ldr	r2, [pc, #320]	@ (80047e4 <HAL_DMA_Init+0x1f4>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d101      	bne.n	80046ac <HAL_DMA_Init+0xbc>
 80046a8:	2301      	movs	r3, #1
 80046aa:	e000      	b.n	80046ae <HAL_DMA_Init+0xbe>
 80046ac:	2300      	movs	r3, #0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f000 813b 	beq.w	800492a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a37      	ldr	r2, [pc, #220]	@ (80047a8 <HAL_DMA_Init+0x1b8>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d04a      	beq.n	8004764 <HAL_DMA_Init+0x174>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a36      	ldr	r2, [pc, #216]	@ (80047ac <HAL_DMA_Init+0x1bc>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d045      	beq.n	8004764 <HAL_DMA_Init+0x174>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a34      	ldr	r2, [pc, #208]	@ (80047b0 <HAL_DMA_Init+0x1c0>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d040      	beq.n	8004764 <HAL_DMA_Init+0x174>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a33      	ldr	r2, [pc, #204]	@ (80047b4 <HAL_DMA_Init+0x1c4>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d03b      	beq.n	8004764 <HAL_DMA_Init+0x174>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a31      	ldr	r2, [pc, #196]	@ (80047b8 <HAL_DMA_Init+0x1c8>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d036      	beq.n	8004764 <HAL_DMA_Init+0x174>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a30      	ldr	r2, [pc, #192]	@ (80047bc <HAL_DMA_Init+0x1cc>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d031      	beq.n	8004764 <HAL_DMA_Init+0x174>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a2e      	ldr	r2, [pc, #184]	@ (80047c0 <HAL_DMA_Init+0x1d0>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d02c      	beq.n	8004764 <HAL_DMA_Init+0x174>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a2d      	ldr	r2, [pc, #180]	@ (80047c4 <HAL_DMA_Init+0x1d4>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d027      	beq.n	8004764 <HAL_DMA_Init+0x174>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a2b      	ldr	r2, [pc, #172]	@ (80047c8 <HAL_DMA_Init+0x1d8>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d022      	beq.n	8004764 <HAL_DMA_Init+0x174>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a2a      	ldr	r2, [pc, #168]	@ (80047cc <HAL_DMA_Init+0x1dc>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d01d      	beq.n	8004764 <HAL_DMA_Init+0x174>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a28      	ldr	r2, [pc, #160]	@ (80047d0 <HAL_DMA_Init+0x1e0>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d018      	beq.n	8004764 <HAL_DMA_Init+0x174>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a27      	ldr	r2, [pc, #156]	@ (80047d4 <HAL_DMA_Init+0x1e4>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d013      	beq.n	8004764 <HAL_DMA_Init+0x174>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a25      	ldr	r2, [pc, #148]	@ (80047d8 <HAL_DMA_Init+0x1e8>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d00e      	beq.n	8004764 <HAL_DMA_Init+0x174>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a24      	ldr	r2, [pc, #144]	@ (80047dc <HAL_DMA_Init+0x1ec>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d009      	beq.n	8004764 <HAL_DMA_Init+0x174>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a22      	ldr	r2, [pc, #136]	@ (80047e0 <HAL_DMA_Init+0x1f0>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d004      	beq.n	8004764 <HAL_DMA_Init+0x174>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a21      	ldr	r2, [pc, #132]	@ (80047e4 <HAL_DMA_Init+0x1f4>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d108      	bne.n	8004776 <HAL_DMA_Init+0x186>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f022 0201 	bic.w	r2, r2, #1
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	e007      	b.n	8004786 <HAL_DMA_Init+0x196>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 0201 	bic.w	r2, r2, #1
 8004784:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004786:	e02f      	b.n	80047e8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004788:	f7ff fd6e 	bl	8004268 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b05      	cmp	r3, #5
 8004794:	d928      	bls.n	80047e8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2220      	movs	r2, #32
 800479a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2203      	movs	r2, #3
 80047a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e246      	b.n	8004c36 <HAL_DMA_Init+0x646>
 80047a8:	40020010 	.word	0x40020010
 80047ac:	40020028 	.word	0x40020028
 80047b0:	40020040 	.word	0x40020040
 80047b4:	40020058 	.word	0x40020058
 80047b8:	40020070 	.word	0x40020070
 80047bc:	40020088 	.word	0x40020088
 80047c0:	400200a0 	.word	0x400200a0
 80047c4:	400200b8 	.word	0x400200b8
 80047c8:	40020410 	.word	0x40020410
 80047cc:	40020428 	.word	0x40020428
 80047d0:	40020440 	.word	0x40020440
 80047d4:	40020458 	.word	0x40020458
 80047d8:	40020470 	.word	0x40020470
 80047dc:	40020488 	.word	0x40020488
 80047e0:	400204a0 	.word	0x400204a0
 80047e4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1c8      	bne.n	8004788 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	4b83      	ldr	r3, [pc, #524]	@ (8004a10 <HAL_DMA_Init+0x420>)
 8004802:	4013      	ands	r3, r2
 8004804:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800480e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800481a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004826:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	4313      	orrs	r3, r2
 8004832:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004838:	2b04      	cmp	r3, #4
 800483a:	d107      	bne.n	800484c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004844:	4313      	orrs	r3, r2
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	4313      	orrs	r3, r2
 800484a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800484c:	4b71      	ldr	r3, [pc, #452]	@ (8004a14 <HAL_DMA_Init+0x424>)
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	4b71      	ldr	r3, [pc, #452]	@ (8004a18 <HAL_DMA_Init+0x428>)
 8004852:	4013      	ands	r3, r2
 8004854:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004858:	d328      	bcc.n	80048ac <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2b28      	cmp	r3, #40	@ 0x28
 8004860:	d903      	bls.n	800486a <HAL_DMA_Init+0x27a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	2b2e      	cmp	r3, #46	@ 0x2e
 8004868:	d917      	bls.n	800489a <HAL_DMA_Init+0x2aa>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004870:	d903      	bls.n	800487a <HAL_DMA_Init+0x28a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	2b42      	cmp	r3, #66	@ 0x42
 8004878:	d90f      	bls.n	800489a <HAL_DMA_Init+0x2aa>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	2b46      	cmp	r3, #70	@ 0x46
 8004880:	d903      	bls.n	800488a <HAL_DMA_Init+0x29a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	2b48      	cmp	r3, #72	@ 0x48
 8004888:	d907      	bls.n	800489a <HAL_DMA_Init+0x2aa>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	2b4e      	cmp	r3, #78	@ 0x4e
 8004890:	d905      	bls.n	800489e <HAL_DMA_Init+0x2ae>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2b52      	cmp	r3, #82	@ 0x52
 8004898:	d801      	bhi.n	800489e <HAL_DMA_Init+0x2ae>
 800489a:	2301      	movs	r3, #1
 800489c:	e000      	b.n	80048a0 <HAL_DMA_Init+0x2b0>
 800489e:	2300      	movs	r3, #0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048aa:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f023 0307 	bic.w	r3, r3, #7
 80048c2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d2:	2b04      	cmp	r3, #4
 80048d4:	d117      	bne.n	8004906 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	4313      	orrs	r3, r2
 80048de:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00e      	beq.n	8004906 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f001 f9cf 	bl	8005c8c <DMA_CheckFifoParam>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d008      	beq.n	8004906 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2240      	movs	r2, #64	@ 0x40
 80048f8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e197      	b.n	8004c36 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f001 f90a 	bl	8005b28 <DMA_CalcBaseAndBitshift>
 8004914:	4603      	mov	r3, r0
 8004916:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800491c:	f003 031f 	and.w	r3, r3, #31
 8004920:	223f      	movs	r2, #63	@ 0x3f
 8004922:	409a      	lsls	r2, r3
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	609a      	str	r2, [r3, #8]
 8004928:	e0cd      	b.n	8004ac6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a3b      	ldr	r2, [pc, #236]	@ (8004a1c <HAL_DMA_Init+0x42c>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d022      	beq.n	800497a <HAL_DMA_Init+0x38a>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a39      	ldr	r2, [pc, #228]	@ (8004a20 <HAL_DMA_Init+0x430>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d01d      	beq.n	800497a <HAL_DMA_Init+0x38a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a38      	ldr	r2, [pc, #224]	@ (8004a24 <HAL_DMA_Init+0x434>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d018      	beq.n	800497a <HAL_DMA_Init+0x38a>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a36      	ldr	r2, [pc, #216]	@ (8004a28 <HAL_DMA_Init+0x438>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d013      	beq.n	800497a <HAL_DMA_Init+0x38a>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a35      	ldr	r2, [pc, #212]	@ (8004a2c <HAL_DMA_Init+0x43c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d00e      	beq.n	800497a <HAL_DMA_Init+0x38a>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a33      	ldr	r2, [pc, #204]	@ (8004a30 <HAL_DMA_Init+0x440>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d009      	beq.n	800497a <HAL_DMA_Init+0x38a>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a32      	ldr	r2, [pc, #200]	@ (8004a34 <HAL_DMA_Init+0x444>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d004      	beq.n	800497a <HAL_DMA_Init+0x38a>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a30      	ldr	r2, [pc, #192]	@ (8004a38 <HAL_DMA_Init+0x448>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d101      	bne.n	800497e <HAL_DMA_Init+0x38e>
 800497a:	2301      	movs	r3, #1
 800497c:	e000      	b.n	8004980 <HAL_DMA_Init+0x390>
 800497e:	2300      	movs	r3, #0
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 8097 	beq.w	8004ab4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a24      	ldr	r2, [pc, #144]	@ (8004a1c <HAL_DMA_Init+0x42c>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d021      	beq.n	80049d4 <HAL_DMA_Init+0x3e4>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a22      	ldr	r2, [pc, #136]	@ (8004a20 <HAL_DMA_Init+0x430>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d01c      	beq.n	80049d4 <HAL_DMA_Init+0x3e4>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a21      	ldr	r2, [pc, #132]	@ (8004a24 <HAL_DMA_Init+0x434>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d017      	beq.n	80049d4 <HAL_DMA_Init+0x3e4>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a1f      	ldr	r2, [pc, #124]	@ (8004a28 <HAL_DMA_Init+0x438>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d012      	beq.n	80049d4 <HAL_DMA_Init+0x3e4>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a1e      	ldr	r2, [pc, #120]	@ (8004a2c <HAL_DMA_Init+0x43c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d00d      	beq.n	80049d4 <HAL_DMA_Init+0x3e4>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a1c      	ldr	r2, [pc, #112]	@ (8004a30 <HAL_DMA_Init+0x440>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d008      	beq.n	80049d4 <HAL_DMA_Init+0x3e4>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a1b      	ldr	r2, [pc, #108]	@ (8004a34 <HAL_DMA_Init+0x444>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d003      	beq.n	80049d4 <HAL_DMA_Init+0x3e4>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a19      	ldr	r2, [pc, #100]	@ (8004a38 <HAL_DMA_Init+0x448>)
 80049d2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	4b13      	ldr	r3, [pc, #76]	@ (8004a3c <HAL_DMA_Init+0x44c>)
 80049f0:	4013      	ands	r3, r2
 80049f2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	2b40      	cmp	r3, #64	@ 0x40
 80049fa:	d021      	beq.n	8004a40 <HAL_DMA_Init+0x450>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	2b80      	cmp	r3, #128	@ 0x80
 8004a02:	d102      	bne.n	8004a0a <HAL_DMA_Init+0x41a>
 8004a04:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004a08:	e01b      	b.n	8004a42 <HAL_DMA_Init+0x452>
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	e019      	b.n	8004a42 <HAL_DMA_Init+0x452>
 8004a0e:	bf00      	nop
 8004a10:	fe10803f 	.word	0xfe10803f
 8004a14:	5c001000 	.word	0x5c001000
 8004a18:	ffff0000 	.word	0xffff0000
 8004a1c:	58025408 	.word	0x58025408
 8004a20:	5802541c 	.word	0x5802541c
 8004a24:	58025430 	.word	0x58025430
 8004a28:	58025444 	.word	0x58025444
 8004a2c:	58025458 	.word	0x58025458
 8004a30:	5802546c 	.word	0x5802546c
 8004a34:	58025480 	.word	0x58025480
 8004a38:	58025494 	.word	0x58025494
 8004a3c:	fffe000f 	.word	0xfffe000f
 8004a40:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	68d2      	ldr	r2, [r2, #12]
 8004a46:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004a48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004a50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004a58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004a60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004a68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004a70:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	461a      	mov	r2, r3
 8004a86:	4b6e      	ldr	r3, [pc, #440]	@ (8004c40 <HAL_DMA_Init+0x650>)
 8004a88:	4413      	add	r3, r2
 8004a8a:	4a6e      	ldr	r2, [pc, #440]	@ (8004c44 <HAL_DMA_Init+0x654>)
 8004a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a90:	091b      	lsrs	r3, r3, #4
 8004a92:	009a      	lsls	r2, r3, #2
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f001 f845 	bl	8005b28 <DMA_CalcBaseAndBitshift>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aa6:	f003 031f 	and.w	r3, r3, #31
 8004aaa:	2201      	movs	r2, #1
 8004aac:	409a      	lsls	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	605a      	str	r2, [r3, #4]
 8004ab2:	e008      	b.n	8004ac6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2240      	movs	r2, #64	@ 0x40
 8004ab8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2203      	movs	r2, #3
 8004abe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e0b7      	b.n	8004c36 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a5f      	ldr	r2, [pc, #380]	@ (8004c48 <HAL_DMA_Init+0x658>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d072      	beq.n	8004bb6 <HAL_DMA_Init+0x5c6>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a5d      	ldr	r2, [pc, #372]	@ (8004c4c <HAL_DMA_Init+0x65c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d06d      	beq.n	8004bb6 <HAL_DMA_Init+0x5c6>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a5c      	ldr	r2, [pc, #368]	@ (8004c50 <HAL_DMA_Init+0x660>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d068      	beq.n	8004bb6 <HAL_DMA_Init+0x5c6>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a5a      	ldr	r2, [pc, #360]	@ (8004c54 <HAL_DMA_Init+0x664>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d063      	beq.n	8004bb6 <HAL_DMA_Init+0x5c6>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a59      	ldr	r2, [pc, #356]	@ (8004c58 <HAL_DMA_Init+0x668>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d05e      	beq.n	8004bb6 <HAL_DMA_Init+0x5c6>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a57      	ldr	r2, [pc, #348]	@ (8004c5c <HAL_DMA_Init+0x66c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d059      	beq.n	8004bb6 <HAL_DMA_Init+0x5c6>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a56      	ldr	r2, [pc, #344]	@ (8004c60 <HAL_DMA_Init+0x670>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d054      	beq.n	8004bb6 <HAL_DMA_Init+0x5c6>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a54      	ldr	r2, [pc, #336]	@ (8004c64 <HAL_DMA_Init+0x674>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d04f      	beq.n	8004bb6 <HAL_DMA_Init+0x5c6>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a53      	ldr	r2, [pc, #332]	@ (8004c68 <HAL_DMA_Init+0x678>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d04a      	beq.n	8004bb6 <HAL_DMA_Init+0x5c6>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a51      	ldr	r2, [pc, #324]	@ (8004c6c <HAL_DMA_Init+0x67c>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d045      	beq.n	8004bb6 <HAL_DMA_Init+0x5c6>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a50      	ldr	r2, [pc, #320]	@ (8004c70 <HAL_DMA_Init+0x680>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d040      	beq.n	8004bb6 <HAL_DMA_Init+0x5c6>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a4e      	ldr	r2, [pc, #312]	@ (8004c74 <HAL_DMA_Init+0x684>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d03b      	beq.n	8004bb6 <HAL_DMA_Init+0x5c6>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a4d      	ldr	r2, [pc, #308]	@ (8004c78 <HAL_DMA_Init+0x688>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d036      	beq.n	8004bb6 <HAL_DMA_Init+0x5c6>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a4b      	ldr	r2, [pc, #300]	@ (8004c7c <HAL_DMA_Init+0x68c>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d031      	beq.n	8004bb6 <HAL_DMA_Init+0x5c6>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a4a      	ldr	r2, [pc, #296]	@ (8004c80 <HAL_DMA_Init+0x690>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d02c      	beq.n	8004bb6 <HAL_DMA_Init+0x5c6>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a48      	ldr	r2, [pc, #288]	@ (8004c84 <HAL_DMA_Init+0x694>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d027      	beq.n	8004bb6 <HAL_DMA_Init+0x5c6>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a47      	ldr	r2, [pc, #284]	@ (8004c88 <HAL_DMA_Init+0x698>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d022      	beq.n	8004bb6 <HAL_DMA_Init+0x5c6>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a45      	ldr	r2, [pc, #276]	@ (8004c8c <HAL_DMA_Init+0x69c>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d01d      	beq.n	8004bb6 <HAL_DMA_Init+0x5c6>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a44      	ldr	r2, [pc, #272]	@ (8004c90 <HAL_DMA_Init+0x6a0>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d018      	beq.n	8004bb6 <HAL_DMA_Init+0x5c6>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a42      	ldr	r2, [pc, #264]	@ (8004c94 <HAL_DMA_Init+0x6a4>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d013      	beq.n	8004bb6 <HAL_DMA_Init+0x5c6>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a41      	ldr	r2, [pc, #260]	@ (8004c98 <HAL_DMA_Init+0x6a8>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d00e      	beq.n	8004bb6 <HAL_DMA_Init+0x5c6>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a3f      	ldr	r2, [pc, #252]	@ (8004c9c <HAL_DMA_Init+0x6ac>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d009      	beq.n	8004bb6 <HAL_DMA_Init+0x5c6>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a3e      	ldr	r2, [pc, #248]	@ (8004ca0 <HAL_DMA_Init+0x6b0>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d004      	beq.n	8004bb6 <HAL_DMA_Init+0x5c6>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a3c      	ldr	r2, [pc, #240]	@ (8004ca4 <HAL_DMA_Init+0x6b4>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d101      	bne.n	8004bba <HAL_DMA_Init+0x5ca>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e000      	b.n	8004bbc <HAL_DMA_Init+0x5cc>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d032      	beq.n	8004c26 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f001 f8df 	bl	8005d84 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	2b80      	cmp	r3, #128	@ 0x80
 8004bcc:	d102      	bne.n	8004bd4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bdc:	b2d2      	uxtb	r2, r2
 8004bde:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004be8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d010      	beq.n	8004c14 <HAL_DMA_Init+0x624>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2b08      	cmp	r3, #8
 8004bf8:	d80c      	bhi.n	8004c14 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f001 f95c 	bl	8005eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004c10:	605a      	str	r2, [r3, #4]
 8004c12:	e008      	b.n	8004c26 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3718      	adds	r7, #24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	a7fdabf8 	.word	0xa7fdabf8
 8004c44:	cccccccd 	.word	0xcccccccd
 8004c48:	40020010 	.word	0x40020010
 8004c4c:	40020028 	.word	0x40020028
 8004c50:	40020040 	.word	0x40020040
 8004c54:	40020058 	.word	0x40020058
 8004c58:	40020070 	.word	0x40020070
 8004c5c:	40020088 	.word	0x40020088
 8004c60:	400200a0 	.word	0x400200a0
 8004c64:	400200b8 	.word	0x400200b8
 8004c68:	40020410 	.word	0x40020410
 8004c6c:	40020428 	.word	0x40020428
 8004c70:	40020440 	.word	0x40020440
 8004c74:	40020458 	.word	0x40020458
 8004c78:	40020470 	.word	0x40020470
 8004c7c:	40020488 	.word	0x40020488
 8004c80:	400204a0 	.word	0x400204a0
 8004c84:	400204b8 	.word	0x400204b8
 8004c88:	58025408 	.word	0x58025408
 8004c8c:	5802541c 	.word	0x5802541c
 8004c90:	58025430 	.word	0x58025430
 8004c94:	58025444 	.word	0x58025444
 8004c98:	58025458 	.word	0x58025458
 8004c9c:	5802546c 	.word	0x5802546c
 8004ca0:	58025480 	.word	0x58025480
 8004ca4:	58025494 	.word	0x58025494

08004ca8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
 8004cb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e226      	b.n	8005112 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d101      	bne.n	8004cd2 <HAL_DMA_Start_IT+0x2a>
 8004cce:	2302      	movs	r3, #2
 8004cd0:	e21f      	b.n	8005112 <HAL_DMA_Start_IT+0x46a>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	f040 820a 	bne.w	80050fc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2202      	movs	r2, #2
 8004cec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a68      	ldr	r2, [pc, #416]	@ (8004e9c <HAL_DMA_Start_IT+0x1f4>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d04a      	beq.n	8004d96 <HAL_DMA_Start_IT+0xee>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a66      	ldr	r2, [pc, #408]	@ (8004ea0 <HAL_DMA_Start_IT+0x1f8>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d045      	beq.n	8004d96 <HAL_DMA_Start_IT+0xee>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a65      	ldr	r2, [pc, #404]	@ (8004ea4 <HAL_DMA_Start_IT+0x1fc>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d040      	beq.n	8004d96 <HAL_DMA_Start_IT+0xee>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a63      	ldr	r2, [pc, #396]	@ (8004ea8 <HAL_DMA_Start_IT+0x200>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d03b      	beq.n	8004d96 <HAL_DMA_Start_IT+0xee>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a62      	ldr	r2, [pc, #392]	@ (8004eac <HAL_DMA_Start_IT+0x204>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d036      	beq.n	8004d96 <HAL_DMA_Start_IT+0xee>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a60      	ldr	r2, [pc, #384]	@ (8004eb0 <HAL_DMA_Start_IT+0x208>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d031      	beq.n	8004d96 <HAL_DMA_Start_IT+0xee>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a5f      	ldr	r2, [pc, #380]	@ (8004eb4 <HAL_DMA_Start_IT+0x20c>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d02c      	beq.n	8004d96 <HAL_DMA_Start_IT+0xee>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a5d      	ldr	r2, [pc, #372]	@ (8004eb8 <HAL_DMA_Start_IT+0x210>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d027      	beq.n	8004d96 <HAL_DMA_Start_IT+0xee>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a5c      	ldr	r2, [pc, #368]	@ (8004ebc <HAL_DMA_Start_IT+0x214>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d022      	beq.n	8004d96 <HAL_DMA_Start_IT+0xee>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a5a      	ldr	r2, [pc, #360]	@ (8004ec0 <HAL_DMA_Start_IT+0x218>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d01d      	beq.n	8004d96 <HAL_DMA_Start_IT+0xee>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a59      	ldr	r2, [pc, #356]	@ (8004ec4 <HAL_DMA_Start_IT+0x21c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d018      	beq.n	8004d96 <HAL_DMA_Start_IT+0xee>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a57      	ldr	r2, [pc, #348]	@ (8004ec8 <HAL_DMA_Start_IT+0x220>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d013      	beq.n	8004d96 <HAL_DMA_Start_IT+0xee>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a56      	ldr	r2, [pc, #344]	@ (8004ecc <HAL_DMA_Start_IT+0x224>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d00e      	beq.n	8004d96 <HAL_DMA_Start_IT+0xee>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a54      	ldr	r2, [pc, #336]	@ (8004ed0 <HAL_DMA_Start_IT+0x228>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d009      	beq.n	8004d96 <HAL_DMA_Start_IT+0xee>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a53      	ldr	r2, [pc, #332]	@ (8004ed4 <HAL_DMA_Start_IT+0x22c>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d004      	beq.n	8004d96 <HAL_DMA_Start_IT+0xee>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a51      	ldr	r2, [pc, #324]	@ (8004ed8 <HAL_DMA_Start_IT+0x230>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d108      	bne.n	8004da8 <HAL_DMA_Start_IT+0x100>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 0201 	bic.w	r2, r2, #1
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	e007      	b.n	8004db8 <HAL_DMA_Start_IT+0x110>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0201 	bic.w	r2, r2, #1
 8004db6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	68b9      	ldr	r1, [r7, #8]
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 fd06 	bl	80057d0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a34      	ldr	r2, [pc, #208]	@ (8004e9c <HAL_DMA_Start_IT+0x1f4>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d04a      	beq.n	8004e64 <HAL_DMA_Start_IT+0x1bc>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a33      	ldr	r2, [pc, #204]	@ (8004ea0 <HAL_DMA_Start_IT+0x1f8>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d045      	beq.n	8004e64 <HAL_DMA_Start_IT+0x1bc>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a31      	ldr	r2, [pc, #196]	@ (8004ea4 <HAL_DMA_Start_IT+0x1fc>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d040      	beq.n	8004e64 <HAL_DMA_Start_IT+0x1bc>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a30      	ldr	r2, [pc, #192]	@ (8004ea8 <HAL_DMA_Start_IT+0x200>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d03b      	beq.n	8004e64 <HAL_DMA_Start_IT+0x1bc>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a2e      	ldr	r2, [pc, #184]	@ (8004eac <HAL_DMA_Start_IT+0x204>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d036      	beq.n	8004e64 <HAL_DMA_Start_IT+0x1bc>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a2d      	ldr	r2, [pc, #180]	@ (8004eb0 <HAL_DMA_Start_IT+0x208>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d031      	beq.n	8004e64 <HAL_DMA_Start_IT+0x1bc>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a2b      	ldr	r2, [pc, #172]	@ (8004eb4 <HAL_DMA_Start_IT+0x20c>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d02c      	beq.n	8004e64 <HAL_DMA_Start_IT+0x1bc>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a2a      	ldr	r2, [pc, #168]	@ (8004eb8 <HAL_DMA_Start_IT+0x210>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d027      	beq.n	8004e64 <HAL_DMA_Start_IT+0x1bc>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a28      	ldr	r2, [pc, #160]	@ (8004ebc <HAL_DMA_Start_IT+0x214>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d022      	beq.n	8004e64 <HAL_DMA_Start_IT+0x1bc>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a27      	ldr	r2, [pc, #156]	@ (8004ec0 <HAL_DMA_Start_IT+0x218>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d01d      	beq.n	8004e64 <HAL_DMA_Start_IT+0x1bc>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a25      	ldr	r2, [pc, #148]	@ (8004ec4 <HAL_DMA_Start_IT+0x21c>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d018      	beq.n	8004e64 <HAL_DMA_Start_IT+0x1bc>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a24      	ldr	r2, [pc, #144]	@ (8004ec8 <HAL_DMA_Start_IT+0x220>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d013      	beq.n	8004e64 <HAL_DMA_Start_IT+0x1bc>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a22      	ldr	r2, [pc, #136]	@ (8004ecc <HAL_DMA_Start_IT+0x224>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d00e      	beq.n	8004e64 <HAL_DMA_Start_IT+0x1bc>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a21      	ldr	r2, [pc, #132]	@ (8004ed0 <HAL_DMA_Start_IT+0x228>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d009      	beq.n	8004e64 <HAL_DMA_Start_IT+0x1bc>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a1f      	ldr	r2, [pc, #124]	@ (8004ed4 <HAL_DMA_Start_IT+0x22c>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d004      	beq.n	8004e64 <HAL_DMA_Start_IT+0x1bc>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ed8 <HAL_DMA_Start_IT+0x230>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d101      	bne.n	8004e68 <HAL_DMA_Start_IT+0x1c0>
 8004e64:	2301      	movs	r3, #1
 8004e66:	e000      	b.n	8004e6a <HAL_DMA_Start_IT+0x1c2>
 8004e68:	2300      	movs	r3, #0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d036      	beq.n	8004edc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f023 021e 	bic.w	r2, r3, #30
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f042 0216 	orr.w	r2, r2, #22
 8004e80:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d03e      	beq.n	8004f08 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f042 0208 	orr.w	r2, r2, #8
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	e035      	b.n	8004f08 <HAL_DMA_Start_IT+0x260>
 8004e9c:	40020010 	.word	0x40020010
 8004ea0:	40020028 	.word	0x40020028
 8004ea4:	40020040 	.word	0x40020040
 8004ea8:	40020058 	.word	0x40020058
 8004eac:	40020070 	.word	0x40020070
 8004eb0:	40020088 	.word	0x40020088
 8004eb4:	400200a0 	.word	0x400200a0
 8004eb8:	400200b8 	.word	0x400200b8
 8004ebc:	40020410 	.word	0x40020410
 8004ec0:	40020428 	.word	0x40020428
 8004ec4:	40020440 	.word	0x40020440
 8004ec8:	40020458 	.word	0x40020458
 8004ecc:	40020470 	.word	0x40020470
 8004ed0:	40020488 	.word	0x40020488
 8004ed4:	400204a0 	.word	0x400204a0
 8004ed8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f023 020e 	bic.w	r2, r3, #14
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 020a 	orr.w	r2, r2, #10
 8004eee:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d007      	beq.n	8004f08 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f042 0204 	orr.w	r2, r2, #4
 8004f06:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a83      	ldr	r2, [pc, #524]	@ (800511c <HAL_DMA_Start_IT+0x474>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d072      	beq.n	8004ff8 <HAL_DMA_Start_IT+0x350>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a82      	ldr	r2, [pc, #520]	@ (8005120 <HAL_DMA_Start_IT+0x478>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d06d      	beq.n	8004ff8 <HAL_DMA_Start_IT+0x350>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a80      	ldr	r2, [pc, #512]	@ (8005124 <HAL_DMA_Start_IT+0x47c>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d068      	beq.n	8004ff8 <HAL_DMA_Start_IT+0x350>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a7f      	ldr	r2, [pc, #508]	@ (8005128 <HAL_DMA_Start_IT+0x480>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d063      	beq.n	8004ff8 <HAL_DMA_Start_IT+0x350>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a7d      	ldr	r2, [pc, #500]	@ (800512c <HAL_DMA_Start_IT+0x484>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d05e      	beq.n	8004ff8 <HAL_DMA_Start_IT+0x350>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a7c      	ldr	r2, [pc, #496]	@ (8005130 <HAL_DMA_Start_IT+0x488>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d059      	beq.n	8004ff8 <HAL_DMA_Start_IT+0x350>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a7a      	ldr	r2, [pc, #488]	@ (8005134 <HAL_DMA_Start_IT+0x48c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d054      	beq.n	8004ff8 <HAL_DMA_Start_IT+0x350>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a79      	ldr	r2, [pc, #484]	@ (8005138 <HAL_DMA_Start_IT+0x490>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d04f      	beq.n	8004ff8 <HAL_DMA_Start_IT+0x350>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a77      	ldr	r2, [pc, #476]	@ (800513c <HAL_DMA_Start_IT+0x494>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d04a      	beq.n	8004ff8 <HAL_DMA_Start_IT+0x350>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a76      	ldr	r2, [pc, #472]	@ (8005140 <HAL_DMA_Start_IT+0x498>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d045      	beq.n	8004ff8 <HAL_DMA_Start_IT+0x350>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a74      	ldr	r2, [pc, #464]	@ (8005144 <HAL_DMA_Start_IT+0x49c>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d040      	beq.n	8004ff8 <HAL_DMA_Start_IT+0x350>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a73      	ldr	r2, [pc, #460]	@ (8005148 <HAL_DMA_Start_IT+0x4a0>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d03b      	beq.n	8004ff8 <HAL_DMA_Start_IT+0x350>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a71      	ldr	r2, [pc, #452]	@ (800514c <HAL_DMA_Start_IT+0x4a4>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d036      	beq.n	8004ff8 <HAL_DMA_Start_IT+0x350>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a70      	ldr	r2, [pc, #448]	@ (8005150 <HAL_DMA_Start_IT+0x4a8>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d031      	beq.n	8004ff8 <HAL_DMA_Start_IT+0x350>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a6e      	ldr	r2, [pc, #440]	@ (8005154 <HAL_DMA_Start_IT+0x4ac>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d02c      	beq.n	8004ff8 <HAL_DMA_Start_IT+0x350>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a6d      	ldr	r2, [pc, #436]	@ (8005158 <HAL_DMA_Start_IT+0x4b0>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d027      	beq.n	8004ff8 <HAL_DMA_Start_IT+0x350>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a6b      	ldr	r2, [pc, #428]	@ (800515c <HAL_DMA_Start_IT+0x4b4>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d022      	beq.n	8004ff8 <HAL_DMA_Start_IT+0x350>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a6a      	ldr	r2, [pc, #424]	@ (8005160 <HAL_DMA_Start_IT+0x4b8>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d01d      	beq.n	8004ff8 <HAL_DMA_Start_IT+0x350>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a68      	ldr	r2, [pc, #416]	@ (8005164 <HAL_DMA_Start_IT+0x4bc>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d018      	beq.n	8004ff8 <HAL_DMA_Start_IT+0x350>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a67      	ldr	r2, [pc, #412]	@ (8005168 <HAL_DMA_Start_IT+0x4c0>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d013      	beq.n	8004ff8 <HAL_DMA_Start_IT+0x350>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a65      	ldr	r2, [pc, #404]	@ (800516c <HAL_DMA_Start_IT+0x4c4>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d00e      	beq.n	8004ff8 <HAL_DMA_Start_IT+0x350>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a64      	ldr	r2, [pc, #400]	@ (8005170 <HAL_DMA_Start_IT+0x4c8>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d009      	beq.n	8004ff8 <HAL_DMA_Start_IT+0x350>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a62      	ldr	r2, [pc, #392]	@ (8005174 <HAL_DMA_Start_IT+0x4cc>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d004      	beq.n	8004ff8 <HAL_DMA_Start_IT+0x350>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a61      	ldr	r2, [pc, #388]	@ (8005178 <HAL_DMA_Start_IT+0x4d0>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d101      	bne.n	8004ffc <HAL_DMA_Start_IT+0x354>
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e000      	b.n	8004ffe <HAL_DMA_Start_IT+0x356>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d01a      	beq.n	8005038 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d007      	beq.n	8005020 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800501a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800501e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005024:	2b00      	cmp	r3, #0
 8005026:	d007      	beq.n	8005038 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005032:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005036:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a37      	ldr	r2, [pc, #220]	@ (800511c <HAL_DMA_Start_IT+0x474>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d04a      	beq.n	80050d8 <HAL_DMA_Start_IT+0x430>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a36      	ldr	r2, [pc, #216]	@ (8005120 <HAL_DMA_Start_IT+0x478>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d045      	beq.n	80050d8 <HAL_DMA_Start_IT+0x430>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a34      	ldr	r2, [pc, #208]	@ (8005124 <HAL_DMA_Start_IT+0x47c>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d040      	beq.n	80050d8 <HAL_DMA_Start_IT+0x430>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a33      	ldr	r2, [pc, #204]	@ (8005128 <HAL_DMA_Start_IT+0x480>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d03b      	beq.n	80050d8 <HAL_DMA_Start_IT+0x430>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a31      	ldr	r2, [pc, #196]	@ (800512c <HAL_DMA_Start_IT+0x484>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d036      	beq.n	80050d8 <HAL_DMA_Start_IT+0x430>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a30      	ldr	r2, [pc, #192]	@ (8005130 <HAL_DMA_Start_IT+0x488>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d031      	beq.n	80050d8 <HAL_DMA_Start_IT+0x430>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a2e      	ldr	r2, [pc, #184]	@ (8005134 <HAL_DMA_Start_IT+0x48c>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d02c      	beq.n	80050d8 <HAL_DMA_Start_IT+0x430>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a2d      	ldr	r2, [pc, #180]	@ (8005138 <HAL_DMA_Start_IT+0x490>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d027      	beq.n	80050d8 <HAL_DMA_Start_IT+0x430>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a2b      	ldr	r2, [pc, #172]	@ (800513c <HAL_DMA_Start_IT+0x494>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d022      	beq.n	80050d8 <HAL_DMA_Start_IT+0x430>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a2a      	ldr	r2, [pc, #168]	@ (8005140 <HAL_DMA_Start_IT+0x498>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d01d      	beq.n	80050d8 <HAL_DMA_Start_IT+0x430>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a28      	ldr	r2, [pc, #160]	@ (8005144 <HAL_DMA_Start_IT+0x49c>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d018      	beq.n	80050d8 <HAL_DMA_Start_IT+0x430>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a27      	ldr	r2, [pc, #156]	@ (8005148 <HAL_DMA_Start_IT+0x4a0>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d013      	beq.n	80050d8 <HAL_DMA_Start_IT+0x430>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a25      	ldr	r2, [pc, #148]	@ (800514c <HAL_DMA_Start_IT+0x4a4>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d00e      	beq.n	80050d8 <HAL_DMA_Start_IT+0x430>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a24      	ldr	r2, [pc, #144]	@ (8005150 <HAL_DMA_Start_IT+0x4a8>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d009      	beq.n	80050d8 <HAL_DMA_Start_IT+0x430>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a22      	ldr	r2, [pc, #136]	@ (8005154 <HAL_DMA_Start_IT+0x4ac>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d004      	beq.n	80050d8 <HAL_DMA_Start_IT+0x430>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a21      	ldr	r2, [pc, #132]	@ (8005158 <HAL_DMA_Start_IT+0x4b0>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d108      	bne.n	80050ea <HAL_DMA_Start_IT+0x442>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0201 	orr.w	r2, r2, #1
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	e012      	b.n	8005110 <HAL_DMA_Start_IT+0x468>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f042 0201 	orr.w	r2, r2, #1
 80050f8:	601a      	str	r2, [r3, #0]
 80050fa:	e009      	b.n	8005110 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005102:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005110:	7dfb      	ldrb	r3, [r7, #23]
}
 8005112:	4618      	mov	r0, r3
 8005114:	3718      	adds	r7, #24
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	40020010 	.word	0x40020010
 8005120:	40020028 	.word	0x40020028
 8005124:	40020040 	.word	0x40020040
 8005128:	40020058 	.word	0x40020058
 800512c:	40020070 	.word	0x40020070
 8005130:	40020088 	.word	0x40020088
 8005134:	400200a0 	.word	0x400200a0
 8005138:	400200b8 	.word	0x400200b8
 800513c:	40020410 	.word	0x40020410
 8005140:	40020428 	.word	0x40020428
 8005144:	40020440 	.word	0x40020440
 8005148:	40020458 	.word	0x40020458
 800514c:	40020470 	.word	0x40020470
 8005150:	40020488 	.word	0x40020488
 8005154:	400204a0 	.word	0x400204a0
 8005158:	400204b8 	.word	0x400204b8
 800515c:	58025408 	.word	0x58025408
 8005160:	5802541c 	.word	0x5802541c
 8005164:	58025430 	.word	0x58025430
 8005168:	58025444 	.word	0x58025444
 800516c:	58025458 	.word	0x58025458
 8005170:	5802546c 	.word	0x5802546c
 8005174:	58025480 	.word	0x58025480
 8005178:	58025494 	.word	0x58025494

0800517c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005184:	f7ff f870 	bl	8004268 <HAL_GetTick>
 8005188:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e2dc      	b.n	800574e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d008      	beq.n	80051b2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2280      	movs	r2, #128	@ 0x80
 80051a4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e2cd      	b.n	800574e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a76      	ldr	r2, [pc, #472]	@ (8005390 <HAL_DMA_Abort+0x214>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d04a      	beq.n	8005252 <HAL_DMA_Abort+0xd6>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a74      	ldr	r2, [pc, #464]	@ (8005394 <HAL_DMA_Abort+0x218>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d045      	beq.n	8005252 <HAL_DMA_Abort+0xd6>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a73      	ldr	r2, [pc, #460]	@ (8005398 <HAL_DMA_Abort+0x21c>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d040      	beq.n	8005252 <HAL_DMA_Abort+0xd6>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a71      	ldr	r2, [pc, #452]	@ (800539c <HAL_DMA_Abort+0x220>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d03b      	beq.n	8005252 <HAL_DMA_Abort+0xd6>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a70      	ldr	r2, [pc, #448]	@ (80053a0 <HAL_DMA_Abort+0x224>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d036      	beq.n	8005252 <HAL_DMA_Abort+0xd6>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a6e      	ldr	r2, [pc, #440]	@ (80053a4 <HAL_DMA_Abort+0x228>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d031      	beq.n	8005252 <HAL_DMA_Abort+0xd6>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a6d      	ldr	r2, [pc, #436]	@ (80053a8 <HAL_DMA_Abort+0x22c>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d02c      	beq.n	8005252 <HAL_DMA_Abort+0xd6>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a6b      	ldr	r2, [pc, #428]	@ (80053ac <HAL_DMA_Abort+0x230>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d027      	beq.n	8005252 <HAL_DMA_Abort+0xd6>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a6a      	ldr	r2, [pc, #424]	@ (80053b0 <HAL_DMA_Abort+0x234>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d022      	beq.n	8005252 <HAL_DMA_Abort+0xd6>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a68      	ldr	r2, [pc, #416]	@ (80053b4 <HAL_DMA_Abort+0x238>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d01d      	beq.n	8005252 <HAL_DMA_Abort+0xd6>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a67      	ldr	r2, [pc, #412]	@ (80053b8 <HAL_DMA_Abort+0x23c>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d018      	beq.n	8005252 <HAL_DMA_Abort+0xd6>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a65      	ldr	r2, [pc, #404]	@ (80053bc <HAL_DMA_Abort+0x240>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d013      	beq.n	8005252 <HAL_DMA_Abort+0xd6>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a64      	ldr	r2, [pc, #400]	@ (80053c0 <HAL_DMA_Abort+0x244>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d00e      	beq.n	8005252 <HAL_DMA_Abort+0xd6>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a62      	ldr	r2, [pc, #392]	@ (80053c4 <HAL_DMA_Abort+0x248>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d009      	beq.n	8005252 <HAL_DMA_Abort+0xd6>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a61      	ldr	r2, [pc, #388]	@ (80053c8 <HAL_DMA_Abort+0x24c>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d004      	beq.n	8005252 <HAL_DMA_Abort+0xd6>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a5f      	ldr	r2, [pc, #380]	@ (80053cc <HAL_DMA_Abort+0x250>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d101      	bne.n	8005256 <HAL_DMA_Abort+0xda>
 8005252:	2301      	movs	r3, #1
 8005254:	e000      	b.n	8005258 <HAL_DMA_Abort+0xdc>
 8005256:	2300      	movs	r3, #0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d013      	beq.n	8005284 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f022 021e 	bic.w	r2, r2, #30
 800526a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	695a      	ldr	r2, [r3, #20]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800527a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	617b      	str	r3, [r7, #20]
 8005282:	e00a      	b.n	800529a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 020e 	bic.w	r2, r2, #14
 8005292:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a3c      	ldr	r2, [pc, #240]	@ (8005390 <HAL_DMA_Abort+0x214>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d072      	beq.n	800538a <HAL_DMA_Abort+0x20e>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a3a      	ldr	r2, [pc, #232]	@ (8005394 <HAL_DMA_Abort+0x218>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d06d      	beq.n	800538a <HAL_DMA_Abort+0x20e>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a39      	ldr	r2, [pc, #228]	@ (8005398 <HAL_DMA_Abort+0x21c>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d068      	beq.n	800538a <HAL_DMA_Abort+0x20e>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a37      	ldr	r2, [pc, #220]	@ (800539c <HAL_DMA_Abort+0x220>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d063      	beq.n	800538a <HAL_DMA_Abort+0x20e>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a36      	ldr	r2, [pc, #216]	@ (80053a0 <HAL_DMA_Abort+0x224>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d05e      	beq.n	800538a <HAL_DMA_Abort+0x20e>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a34      	ldr	r2, [pc, #208]	@ (80053a4 <HAL_DMA_Abort+0x228>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d059      	beq.n	800538a <HAL_DMA_Abort+0x20e>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a33      	ldr	r2, [pc, #204]	@ (80053a8 <HAL_DMA_Abort+0x22c>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d054      	beq.n	800538a <HAL_DMA_Abort+0x20e>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a31      	ldr	r2, [pc, #196]	@ (80053ac <HAL_DMA_Abort+0x230>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d04f      	beq.n	800538a <HAL_DMA_Abort+0x20e>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a30      	ldr	r2, [pc, #192]	@ (80053b0 <HAL_DMA_Abort+0x234>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d04a      	beq.n	800538a <HAL_DMA_Abort+0x20e>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a2e      	ldr	r2, [pc, #184]	@ (80053b4 <HAL_DMA_Abort+0x238>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d045      	beq.n	800538a <HAL_DMA_Abort+0x20e>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a2d      	ldr	r2, [pc, #180]	@ (80053b8 <HAL_DMA_Abort+0x23c>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d040      	beq.n	800538a <HAL_DMA_Abort+0x20e>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a2b      	ldr	r2, [pc, #172]	@ (80053bc <HAL_DMA_Abort+0x240>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d03b      	beq.n	800538a <HAL_DMA_Abort+0x20e>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a2a      	ldr	r2, [pc, #168]	@ (80053c0 <HAL_DMA_Abort+0x244>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d036      	beq.n	800538a <HAL_DMA_Abort+0x20e>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a28      	ldr	r2, [pc, #160]	@ (80053c4 <HAL_DMA_Abort+0x248>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d031      	beq.n	800538a <HAL_DMA_Abort+0x20e>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a27      	ldr	r2, [pc, #156]	@ (80053c8 <HAL_DMA_Abort+0x24c>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d02c      	beq.n	800538a <HAL_DMA_Abort+0x20e>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a25      	ldr	r2, [pc, #148]	@ (80053cc <HAL_DMA_Abort+0x250>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d027      	beq.n	800538a <HAL_DMA_Abort+0x20e>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a24      	ldr	r2, [pc, #144]	@ (80053d0 <HAL_DMA_Abort+0x254>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d022      	beq.n	800538a <HAL_DMA_Abort+0x20e>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a22      	ldr	r2, [pc, #136]	@ (80053d4 <HAL_DMA_Abort+0x258>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d01d      	beq.n	800538a <HAL_DMA_Abort+0x20e>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a21      	ldr	r2, [pc, #132]	@ (80053d8 <HAL_DMA_Abort+0x25c>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d018      	beq.n	800538a <HAL_DMA_Abort+0x20e>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a1f      	ldr	r2, [pc, #124]	@ (80053dc <HAL_DMA_Abort+0x260>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d013      	beq.n	800538a <HAL_DMA_Abort+0x20e>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a1e      	ldr	r2, [pc, #120]	@ (80053e0 <HAL_DMA_Abort+0x264>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d00e      	beq.n	800538a <HAL_DMA_Abort+0x20e>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a1c      	ldr	r2, [pc, #112]	@ (80053e4 <HAL_DMA_Abort+0x268>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d009      	beq.n	800538a <HAL_DMA_Abort+0x20e>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a1b      	ldr	r2, [pc, #108]	@ (80053e8 <HAL_DMA_Abort+0x26c>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d004      	beq.n	800538a <HAL_DMA_Abort+0x20e>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a19      	ldr	r2, [pc, #100]	@ (80053ec <HAL_DMA_Abort+0x270>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d132      	bne.n	80053f0 <HAL_DMA_Abort+0x274>
 800538a:	2301      	movs	r3, #1
 800538c:	e031      	b.n	80053f2 <HAL_DMA_Abort+0x276>
 800538e:	bf00      	nop
 8005390:	40020010 	.word	0x40020010
 8005394:	40020028 	.word	0x40020028
 8005398:	40020040 	.word	0x40020040
 800539c:	40020058 	.word	0x40020058
 80053a0:	40020070 	.word	0x40020070
 80053a4:	40020088 	.word	0x40020088
 80053a8:	400200a0 	.word	0x400200a0
 80053ac:	400200b8 	.word	0x400200b8
 80053b0:	40020410 	.word	0x40020410
 80053b4:	40020428 	.word	0x40020428
 80053b8:	40020440 	.word	0x40020440
 80053bc:	40020458 	.word	0x40020458
 80053c0:	40020470 	.word	0x40020470
 80053c4:	40020488 	.word	0x40020488
 80053c8:	400204a0 	.word	0x400204a0
 80053cc:	400204b8 	.word	0x400204b8
 80053d0:	58025408 	.word	0x58025408
 80053d4:	5802541c 	.word	0x5802541c
 80053d8:	58025430 	.word	0x58025430
 80053dc:	58025444 	.word	0x58025444
 80053e0:	58025458 	.word	0x58025458
 80053e4:	5802546c 	.word	0x5802546c
 80053e8:	58025480 	.word	0x58025480
 80053ec:	58025494 	.word	0x58025494
 80053f0:	2300      	movs	r3, #0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d007      	beq.n	8005406 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005400:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005404:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a6d      	ldr	r2, [pc, #436]	@ (80055c0 <HAL_DMA_Abort+0x444>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d04a      	beq.n	80054a6 <HAL_DMA_Abort+0x32a>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a6b      	ldr	r2, [pc, #428]	@ (80055c4 <HAL_DMA_Abort+0x448>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d045      	beq.n	80054a6 <HAL_DMA_Abort+0x32a>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a6a      	ldr	r2, [pc, #424]	@ (80055c8 <HAL_DMA_Abort+0x44c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d040      	beq.n	80054a6 <HAL_DMA_Abort+0x32a>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a68      	ldr	r2, [pc, #416]	@ (80055cc <HAL_DMA_Abort+0x450>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d03b      	beq.n	80054a6 <HAL_DMA_Abort+0x32a>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a67      	ldr	r2, [pc, #412]	@ (80055d0 <HAL_DMA_Abort+0x454>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d036      	beq.n	80054a6 <HAL_DMA_Abort+0x32a>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a65      	ldr	r2, [pc, #404]	@ (80055d4 <HAL_DMA_Abort+0x458>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d031      	beq.n	80054a6 <HAL_DMA_Abort+0x32a>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a64      	ldr	r2, [pc, #400]	@ (80055d8 <HAL_DMA_Abort+0x45c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d02c      	beq.n	80054a6 <HAL_DMA_Abort+0x32a>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a62      	ldr	r2, [pc, #392]	@ (80055dc <HAL_DMA_Abort+0x460>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d027      	beq.n	80054a6 <HAL_DMA_Abort+0x32a>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a61      	ldr	r2, [pc, #388]	@ (80055e0 <HAL_DMA_Abort+0x464>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d022      	beq.n	80054a6 <HAL_DMA_Abort+0x32a>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a5f      	ldr	r2, [pc, #380]	@ (80055e4 <HAL_DMA_Abort+0x468>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d01d      	beq.n	80054a6 <HAL_DMA_Abort+0x32a>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a5e      	ldr	r2, [pc, #376]	@ (80055e8 <HAL_DMA_Abort+0x46c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d018      	beq.n	80054a6 <HAL_DMA_Abort+0x32a>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a5c      	ldr	r2, [pc, #368]	@ (80055ec <HAL_DMA_Abort+0x470>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d013      	beq.n	80054a6 <HAL_DMA_Abort+0x32a>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a5b      	ldr	r2, [pc, #364]	@ (80055f0 <HAL_DMA_Abort+0x474>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d00e      	beq.n	80054a6 <HAL_DMA_Abort+0x32a>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a59      	ldr	r2, [pc, #356]	@ (80055f4 <HAL_DMA_Abort+0x478>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d009      	beq.n	80054a6 <HAL_DMA_Abort+0x32a>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a58      	ldr	r2, [pc, #352]	@ (80055f8 <HAL_DMA_Abort+0x47c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d004      	beq.n	80054a6 <HAL_DMA_Abort+0x32a>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a56      	ldr	r2, [pc, #344]	@ (80055fc <HAL_DMA_Abort+0x480>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d108      	bne.n	80054b8 <HAL_DMA_Abort+0x33c>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0201 	bic.w	r2, r2, #1
 80054b4:	601a      	str	r2, [r3, #0]
 80054b6:	e007      	b.n	80054c8 <HAL_DMA_Abort+0x34c>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f022 0201 	bic.w	r2, r2, #1
 80054c6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80054c8:	e013      	b.n	80054f2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054ca:	f7fe fecd 	bl	8004268 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	2b05      	cmp	r3, #5
 80054d6:	d90c      	bls.n	80054f2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2220      	movs	r2, #32
 80054dc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2203      	movs	r2, #3
 80054e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e12d      	b.n	800574e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1e5      	bne.n	80054ca <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a2f      	ldr	r2, [pc, #188]	@ (80055c0 <HAL_DMA_Abort+0x444>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d04a      	beq.n	800559e <HAL_DMA_Abort+0x422>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a2d      	ldr	r2, [pc, #180]	@ (80055c4 <HAL_DMA_Abort+0x448>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d045      	beq.n	800559e <HAL_DMA_Abort+0x422>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a2c      	ldr	r2, [pc, #176]	@ (80055c8 <HAL_DMA_Abort+0x44c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d040      	beq.n	800559e <HAL_DMA_Abort+0x422>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a2a      	ldr	r2, [pc, #168]	@ (80055cc <HAL_DMA_Abort+0x450>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d03b      	beq.n	800559e <HAL_DMA_Abort+0x422>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a29      	ldr	r2, [pc, #164]	@ (80055d0 <HAL_DMA_Abort+0x454>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d036      	beq.n	800559e <HAL_DMA_Abort+0x422>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a27      	ldr	r2, [pc, #156]	@ (80055d4 <HAL_DMA_Abort+0x458>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d031      	beq.n	800559e <HAL_DMA_Abort+0x422>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a26      	ldr	r2, [pc, #152]	@ (80055d8 <HAL_DMA_Abort+0x45c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d02c      	beq.n	800559e <HAL_DMA_Abort+0x422>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a24      	ldr	r2, [pc, #144]	@ (80055dc <HAL_DMA_Abort+0x460>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d027      	beq.n	800559e <HAL_DMA_Abort+0x422>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a23      	ldr	r2, [pc, #140]	@ (80055e0 <HAL_DMA_Abort+0x464>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d022      	beq.n	800559e <HAL_DMA_Abort+0x422>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a21      	ldr	r2, [pc, #132]	@ (80055e4 <HAL_DMA_Abort+0x468>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d01d      	beq.n	800559e <HAL_DMA_Abort+0x422>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a20      	ldr	r2, [pc, #128]	@ (80055e8 <HAL_DMA_Abort+0x46c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d018      	beq.n	800559e <HAL_DMA_Abort+0x422>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a1e      	ldr	r2, [pc, #120]	@ (80055ec <HAL_DMA_Abort+0x470>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d013      	beq.n	800559e <HAL_DMA_Abort+0x422>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a1d      	ldr	r2, [pc, #116]	@ (80055f0 <HAL_DMA_Abort+0x474>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d00e      	beq.n	800559e <HAL_DMA_Abort+0x422>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a1b      	ldr	r2, [pc, #108]	@ (80055f4 <HAL_DMA_Abort+0x478>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d009      	beq.n	800559e <HAL_DMA_Abort+0x422>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a1a      	ldr	r2, [pc, #104]	@ (80055f8 <HAL_DMA_Abort+0x47c>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d004      	beq.n	800559e <HAL_DMA_Abort+0x422>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a18      	ldr	r2, [pc, #96]	@ (80055fc <HAL_DMA_Abort+0x480>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d101      	bne.n	80055a2 <HAL_DMA_Abort+0x426>
 800559e:	2301      	movs	r3, #1
 80055a0:	e000      	b.n	80055a4 <HAL_DMA_Abort+0x428>
 80055a2:	2300      	movs	r3, #0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d02b      	beq.n	8005600 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055ac:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055b2:	f003 031f 	and.w	r3, r3, #31
 80055b6:	223f      	movs	r2, #63	@ 0x3f
 80055b8:	409a      	lsls	r2, r3
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	609a      	str	r2, [r3, #8]
 80055be:	e02a      	b.n	8005616 <HAL_DMA_Abort+0x49a>
 80055c0:	40020010 	.word	0x40020010
 80055c4:	40020028 	.word	0x40020028
 80055c8:	40020040 	.word	0x40020040
 80055cc:	40020058 	.word	0x40020058
 80055d0:	40020070 	.word	0x40020070
 80055d4:	40020088 	.word	0x40020088
 80055d8:	400200a0 	.word	0x400200a0
 80055dc:	400200b8 	.word	0x400200b8
 80055e0:	40020410 	.word	0x40020410
 80055e4:	40020428 	.word	0x40020428
 80055e8:	40020440 	.word	0x40020440
 80055ec:	40020458 	.word	0x40020458
 80055f0:	40020470 	.word	0x40020470
 80055f4:	40020488 	.word	0x40020488
 80055f8:	400204a0 	.word	0x400204a0
 80055fc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005604:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800560a:	f003 031f 	and.w	r3, r3, #31
 800560e:	2201      	movs	r2, #1
 8005610:	409a      	lsls	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a4f      	ldr	r2, [pc, #316]	@ (8005758 <HAL_DMA_Abort+0x5dc>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d072      	beq.n	8005706 <HAL_DMA_Abort+0x58a>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a4d      	ldr	r2, [pc, #308]	@ (800575c <HAL_DMA_Abort+0x5e0>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d06d      	beq.n	8005706 <HAL_DMA_Abort+0x58a>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a4c      	ldr	r2, [pc, #304]	@ (8005760 <HAL_DMA_Abort+0x5e4>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d068      	beq.n	8005706 <HAL_DMA_Abort+0x58a>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a4a      	ldr	r2, [pc, #296]	@ (8005764 <HAL_DMA_Abort+0x5e8>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d063      	beq.n	8005706 <HAL_DMA_Abort+0x58a>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a49      	ldr	r2, [pc, #292]	@ (8005768 <HAL_DMA_Abort+0x5ec>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d05e      	beq.n	8005706 <HAL_DMA_Abort+0x58a>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a47      	ldr	r2, [pc, #284]	@ (800576c <HAL_DMA_Abort+0x5f0>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d059      	beq.n	8005706 <HAL_DMA_Abort+0x58a>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a46      	ldr	r2, [pc, #280]	@ (8005770 <HAL_DMA_Abort+0x5f4>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d054      	beq.n	8005706 <HAL_DMA_Abort+0x58a>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a44      	ldr	r2, [pc, #272]	@ (8005774 <HAL_DMA_Abort+0x5f8>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d04f      	beq.n	8005706 <HAL_DMA_Abort+0x58a>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a43      	ldr	r2, [pc, #268]	@ (8005778 <HAL_DMA_Abort+0x5fc>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d04a      	beq.n	8005706 <HAL_DMA_Abort+0x58a>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a41      	ldr	r2, [pc, #260]	@ (800577c <HAL_DMA_Abort+0x600>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d045      	beq.n	8005706 <HAL_DMA_Abort+0x58a>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a40      	ldr	r2, [pc, #256]	@ (8005780 <HAL_DMA_Abort+0x604>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d040      	beq.n	8005706 <HAL_DMA_Abort+0x58a>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a3e      	ldr	r2, [pc, #248]	@ (8005784 <HAL_DMA_Abort+0x608>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d03b      	beq.n	8005706 <HAL_DMA_Abort+0x58a>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a3d      	ldr	r2, [pc, #244]	@ (8005788 <HAL_DMA_Abort+0x60c>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d036      	beq.n	8005706 <HAL_DMA_Abort+0x58a>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a3b      	ldr	r2, [pc, #236]	@ (800578c <HAL_DMA_Abort+0x610>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d031      	beq.n	8005706 <HAL_DMA_Abort+0x58a>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a3a      	ldr	r2, [pc, #232]	@ (8005790 <HAL_DMA_Abort+0x614>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d02c      	beq.n	8005706 <HAL_DMA_Abort+0x58a>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a38      	ldr	r2, [pc, #224]	@ (8005794 <HAL_DMA_Abort+0x618>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d027      	beq.n	8005706 <HAL_DMA_Abort+0x58a>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a37      	ldr	r2, [pc, #220]	@ (8005798 <HAL_DMA_Abort+0x61c>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d022      	beq.n	8005706 <HAL_DMA_Abort+0x58a>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a35      	ldr	r2, [pc, #212]	@ (800579c <HAL_DMA_Abort+0x620>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d01d      	beq.n	8005706 <HAL_DMA_Abort+0x58a>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a34      	ldr	r2, [pc, #208]	@ (80057a0 <HAL_DMA_Abort+0x624>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d018      	beq.n	8005706 <HAL_DMA_Abort+0x58a>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a32      	ldr	r2, [pc, #200]	@ (80057a4 <HAL_DMA_Abort+0x628>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d013      	beq.n	8005706 <HAL_DMA_Abort+0x58a>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a31      	ldr	r2, [pc, #196]	@ (80057a8 <HAL_DMA_Abort+0x62c>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d00e      	beq.n	8005706 <HAL_DMA_Abort+0x58a>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a2f      	ldr	r2, [pc, #188]	@ (80057ac <HAL_DMA_Abort+0x630>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d009      	beq.n	8005706 <HAL_DMA_Abort+0x58a>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a2e      	ldr	r2, [pc, #184]	@ (80057b0 <HAL_DMA_Abort+0x634>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d004      	beq.n	8005706 <HAL_DMA_Abort+0x58a>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a2c      	ldr	r2, [pc, #176]	@ (80057b4 <HAL_DMA_Abort+0x638>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d101      	bne.n	800570a <HAL_DMA_Abort+0x58e>
 8005706:	2301      	movs	r3, #1
 8005708:	e000      	b.n	800570c <HAL_DMA_Abort+0x590>
 800570a:	2300      	movs	r3, #0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d015      	beq.n	800573c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005718:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00c      	beq.n	800573c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800572c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005730:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800573a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3718      	adds	r7, #24
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	40020010 	.word	0x40020010
 800575c:	40020028 	.word	0x40020028
 8005760:	40020040 	.word	0x40020040
 8005764:	40020058 	.word	0x40020058
 8005768:	40020070 	.word	0x40020070
 800576c:	40020088 	.word	0x40020088
 8005770:	400200a0 	.word	0x400200a0
 8005774:	400200b8 	.word	0x400200b8
 8005778:	40020410 	.word	0x40020410
 800577c:	40020428 	.word	0x40020428
 8005780:	40020440 	.word	0x40020440
 8005784:	40020458 	.word	0x40020458
 8005788:	40020470 	.word	0x40020470
 800578c:	40020488 	.word	0x40020488
 8005790:	400204a0 	.word	0x400204a0
 8005794:	400204b8 	.word	0x400204b8
 8005798:	58025408 	.word	0x58025408
 800579c:	5802541c 	.word	0x5802541c
 80057a0:	58025430 	.word	0x58025430
 80057a4:	58025444 	.word	0x58025444
 80057a8:	58025458 	.word	0x58025458
 80057ac:	5802546c 	.word	0x5802546c
 80057b0:	58025480 	.word	0x58025480
 80057b4:	58025494 	.word	0x58025494

080057b8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b087      	sub	sp, #28
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
 80057dc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057e2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057e8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a7f      	ldr	r2, [pc, #508]	@ (80059ec <DMA_SetConfig+0x21c>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d072      	beq.n	80058da <DMA_SetConfig+0x10a>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a7d      	ldr	r2, [pc, #500]	@ (80059f0 <DMA_SetConfig+0x220>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d06d      	beq.n	80058da <DMA_SetConfig+0x10a>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a7c      	ldr	r2, [pc, #496]	@ (80059f4 <DMA_SetConfig+0x224>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d068      	beq.n	80058da <DMA_SetConfig+0x10a>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a7a      	ldr	r2, [pc, #488]	@ (80059f8 <DMA_SetConfig+0x228>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d063      	beq.n	80058da <DMA_SetConfig+0x10a>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a79      	ldr	r2, [pc, #484]	@ (80059fc <DMA_SetConfig+0x22c>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d05e      	beq.n	80058da <DMA_SetConfig+0x10a>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a77      	ldr	r2, [pc, #476]	@ (8005a00 <DMA_SetConfig+0x230>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d059      	beq.n	80058da <DMA_SetConfig+0x10a>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a76      	ldr	r2, [pc, #472]	@ (8005a04 <DMA_SetConfig+0x234>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d054      	beq.n	80058da <DMA_SetConfig+0x10a>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a74      	ldr	r2, [pc, #464]	@ (8005a08 <DMA_SetConfig+0x238>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d04f      	beq.n	80058da <DMA_SetConfig+0x10a>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a73      	ldr	r2, [pc, #460]	@ (8005a0c <DMA_SetConfig+0x23c>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d04a      	beq.n	80058da <DMA_SetConfig+0x10a>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a71      	ldr	r2, [pc, #452]	@ (8005a10 <DMA_SetConfig+0x240>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d045      	beq.n	80058da <DMA_SetConfig+0x10a>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a70      	ldr	r2, [pc, #448]	@ (8005a14 <DMA_SetConfig+0x244>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d040      	beq.n	80058da <DMA_SetConfig+0x10a>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a6e      	ldr	r2, [pc, #440]	@ (8005a18 <DMA_SetConfig+0x248>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d03b      	beq.n	80058da <DMA_SetConfig+0x10a>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a6d      	ldr	r2, [pc, #436]	@ (8005a1c <DMA_SetConfig+0x24c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d036      	beq.n	80058da <DMA_SetConfig+0x10a>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a6b      	ldr	r2, [pc, #428]	@ (8005a20 <DMA_SetConfig+0x250>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d031      	beq.n	80058da <DMA_SetConfig+0x10a>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a6a      	ldr	r2, [pc, #424]	@ (8005a24 <DMA_SetConfig+0x254>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d02c      	beq.n	80058da <DMA_SetConfig+0x10a>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a68      	ldr	r2, [pc, #416]	@ (8005a28 <DMA_SetConfig+0x258>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d027      	beq.n	80058da <DMA_SetConfig+0x10a>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a67      	ldr	r2, [pc, #412]	@ (8005a2c <DMA_SetConfig+0x25c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d022      	beq.n	80058da <DMA_SetConfig+0x10a>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a65      	ldr	r2, [pc, #404]	@ (8005a30 <DMA_SetConfig+0x260>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d01d      	beq.n	80058da <DMA_SetConfig+0x10a>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a64      	ldr	r2, [pc, #400]	@ (8005a34 <DMA_SetConfig+0x264>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d018      	beq.n	80058da <DMA_SetConfig+0x10a>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a62      	ldr	r2, [pc, #392]	@ (8005a38 <DMA_SetConfig+0x268>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d013      	beq.n	80058da <DMA_SetConfig+0x10a>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a61      	ldr	r2, [pc, #388]	@ (8005a3c <DMA_SetConfig+0x26c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d00e      	beq.n	80058da <DMA_SetConfig+0x10a>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a5f      	ldr	r2, [pc, #380]	@ (8005a40 <DMA_SetConfig+0x270>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d009      	beq.n	80058da <DMA_SetConfig+0x10a>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a5e      	ldr	r2, [pc, #376]	@ (8005a44 <DMA_SetConfig+0x274>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d004      	beq.n	80058da <DMA_SetConfig+0x10a>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a5c      	ldr	r2, [pc, #368]	@ (8005a48 <DMA_SetConfig+0x278>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d101      	bne.n	80058de <DMA_SetConfig+0x10e>
 80058da:	2301      	movs	r3, #1
 80058dc:	e000      	b.n	80058e0 <DMA_SetConfig+0x110>
 80058de:	2300      	movs	r3, #0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00d      	beq.n	8005900 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80058ec:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d004      	beq.n	8005900 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80058fe:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a39      	ldr	r2, [pc, #228]	@ (80059ec <DMA_SetConfig+0x21c>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d04a      	beq.n	80059a0 <DMA_SetConfig+0x1d0>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a38      	ldr	r2, [pc, #224]	@ (80059f0 <DMA_SetConfig+0x220>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d045      	beq.n	80059a0 <DMA_SetConfig+0x1d0>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a36      	ldr	r2, [pc, #216]	@ (80059f4 <DMA_SetConfig+0x224>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d040      	beq.n	80059a0 <DMA_SetConfig+0x1d0>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a35      	ldr	r2, [pc, #212]	@ (80059f8 <DMA_SetConfig+0x228>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d03b      	beq.n	80059a0 <DMA_SetConfig+0x1d0>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a33      	ldr	r2, [pc, #204]	@ (80059fc <DMA_SetConfig+0x22c>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d036      	beq.n	80059a0 <DMA_SetConfig+0x1d0>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a32      	ldr	r2, [pc, #200]	@ (8005a00 <DMA_SetConfig+0x230>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d031      	beq.n	80059a0 <DMA_SetConfig+0x1d0>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a30      	ldr	r2, [pc, #192]	@ (8005a04 <DMA_SetConfig+0x234>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d02c      	beq.n	80059a0 <DMA_SetConfig+0x1d0>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a2f      	ldr	r2, [pc, #188]	@ (8005a08 <DMA_SetConfig+0x238>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d027      	beq.n	80059a0 <DMA_SetConfig+0x1d0>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a2d      	ldr	r2, [pc, #180]	@ (8005a0c <DMA_SetConfig+0x23c>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d022      	beq.n	80059a0 <DMA_SetConfig+0x1d0>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a2c      	ldr	r2, [pc, #176]	@ (8005a10 <DMA_SetConfig+0x240>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d01d      	beq.n	80059a0 <DMA_SetConfig+0x1d0>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a2a      	ldr	r2, [pc, #168]	@ (8005a14 <DMA_SetConfig+0x244>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d018      	beq.n	80059a0 <DMA_SetConfig+0x1d0>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a29      	ldr	r2, [pc, #164]	@ (8005a18 <DMA_SetConfig+0x248>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d013      	beq.n	80059a0 <DMA_SetConfig+0x1d0>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a27      	ldr	r2, [pc, #156]	@ (8005a1c <DMA_SetConfig+0x24c>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d00e      	beq.n	80059a0 <DMA_SetConfig+0x1d0>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a26      	ldr	r2, [pc, #152]	@ (8005a20 <DMA_SetConfig+0x250>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d009      	beq.n	80059a0 <DMA_SetConfig+0x1d0>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a24      	ldr	r2, [pc, #144]	@ (8005a24 <DMA_SetConfig+0x254>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d004      	beq.n	80059a0 <DMA_SetConfig+0x1d0>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a23      	ldr	r2, [pc, #140]	@ (8005a28 <DMA_SetConfig+0x258>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d101      	bne.n	80059a4 <DMA_SetConfig+0x1d4>
 80059a0:	2301      	movs	r3, #1
 80059a2:	e000      	b.n	80059a6 <DMA_SetConfig+0x1d6>
 80059a4:	2300      	movs	r3, #0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d059      	beq.n	8005a5e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059ae:	f003 031f 	and.w	r3, r3, #31
 80059b2:	223f      	movs	r2, #63	@ 0x3f
 80059b4:	409a      	lsls	r2, r3
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80059c8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	683a      	ldr	r2, [r7, #0]
 80059d0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	2b40      	cmp	r3, #64	@ 0x40
 80059d8:	d138      	bne.n	8005a4c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80059ea:	e086      	b.n	8005afa <DMA_SetConfig+0x32a>
 80059ec:	40020010 	.word	0x40020010
 80059f0:	40020028 	.word	0x40020028
 80059f4:	40020040 	.word	0x40020040
 80059f8:	40020058 	.word	0x40020058
 80059fc:	40020070 	.word	0x40020070
 8005a00:	40020088 	.word	0x40020088
 8005a04:	400200a0 	.word	0x400200a0
 8005a08:	400200b8 	.word	0x400200b8
 8005a0c:	40020410 	.word	0x40020410
 8005a10:	40020428 	.word	0x40020428
 8005a14:	40020440 	.word	0x40020440
 8005a18:	40020458 	.word	0x40020458
 8005a1c:	40020470 	.word	0x40020470
 8005a20:	40020488 	.word	0x40020488
 8005a24:	400204a0 	.word	0x400204a0
 8005a28:	400204b8 	.word	0x400204b8
 8005a2c:	58025408 	.word	0x58025408
 8005a30:	5802541c 	.word	0x5802541c
 8005a34:	58025430 	.word	0x58025430
 8005a38:	58025444 	.word	0x58025444
 8005a3c:	58025458 	.word	0x58025458
 8005a40:	5802546c 	.word	0x5802546c
 8005a44:	58025480 	.word	0x58025480
 8005a48:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	60da      	str	r2, [r3, #12]
}
 8005a5c:	e04d      	b.n	8005afa <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a29      	ldr	r2, [pc, #164]	@ (8005b08 <DMA_SetConfig+0x338>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d022      	beq.n	8005aae <DMA_SetConfig+0x2de>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a27      	ldr	r2, [pc, #156]	@ (8005b0c <DMA_SetConfig+0x33c>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d01d      	beq.n	8005aae <DMA_SetConfig+0x2de>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a26      	ldr	r2, [pc, #152]	@ (8005b10 <DMA_SetConfig+0x340>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d018      	beq.n	8005aae <DMA_SetConfig+0x2de>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a24      	ldr	r2, [pc, #144]	@ (8005b14 <DMA_SetConfig+0x344>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d013      	beq.n	8005aae <DMA_SetConfig+0x2de>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a23      	ldr	r2, [pc, #140]	@ (8005b18 <DMA_SetConfig+0x348>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d00e      	beq.n	8005aae <DMA_SetConfig+0x2de>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a21      	ldr	r2, [pc, #132]	@ (8005b1c <DMA_SetConfig+0x34c>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d009      	beq.n	8005aae <DMA_SetConfig+0x2de>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a20      	ldr	r2, [pc, #128]	@ (8005b20 <DMA_SetConfig+0x350>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d004      	beq.n	8005aae <DMA_SetConfig+0x2de>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a1e      	ldr	r2, [pc, #120]	@ (8005b24 <DMA_SetConfig+0x354>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d101      	bne.n	8005ab2 <DMA_SetConfig+0x2e2>
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e000      	b.n	8005ab4 <DMA_SetConfig+0x2e4>
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d020      	beq.n	8005afa <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005abc:	f003 031f 	and.w	r3, r3, #31
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	409a      	lsls	r2, r3
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	683a      	ldr	r2, [r7, #0]
 8005ace:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	2b40      	cmp	r3, #64	@ 0x40
 8005ad6:	d108      	bne.n	8005aea <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	60da      	str	r2, [r3, #12]
}
 8005ae8:	e007      	b.n	8005afa <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	60da      	str	r2, [r3, #12]
}
 8005afa:	bf00      	nop
 8005afc:	371c      	adds	r7, #28
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	58025408 	.word	0x58025408
 8005b0c:	5802541c 	.word	0x5802541c
 8005b10:	58025430 	.word	0x58025430
 8005b14:	58025444 	.word	0x58025444
 8005b18:	58025458 	.word	0x58025458
 8005b1c:	5802546c 	.word	0x5802546c
 8005b20:	58025480 	.word	0x58025480
 8005b24:	58025494 	.word	0x58025494

08005b28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a42      	ldr	r2, [pc, #264]	@ (8005c40 <DMA_CalcBaseAndBitshift+0x118>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d04a      	beq.n	8005bd0 <DMA_CalcBaseAndBitshift+0xa8>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a41      	ldr	r2, [pc, #260]	@ (8005c44 <DMA_CalcBaseAndBitshift+0x11c>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d045      	beq.n	8005bd0 <DMA_CalcBaseAndBitshift+0xa8>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a3f      	ldr	r2, [pc, #252]	@ (8005c48 <DMA_CalcBaseAndBitshift+0x120>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d040      	beq.n	8005bd0 <DMA_CalcBaseAndBitshift+0xa8>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a3e      	ldr	r2, [pc, #248]	@ (8005c4c <DMA_CalcBaseAndBitshift+0x124>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d03b      	beq.n	8005bd0 <DMA_CalcBaseAndBitshift+0xa8>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a3c      	ldr	r2, [pc, #240]	@ (8005c50 <DMA_CalcBaseAndBitshift+0x128>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d036      	beq.n	8005bd0 <DMA_CalcBaseAndBitshift+0xa8>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a3b      	ldr	r2, [pc, #236]	@ (8005c54 <DMA_CalcBaseAndBitshift+0x12c>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d031      	beq.n	8005bd0 <DMA_CalcBaseAndBitshift+0xa8>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a39      	ldr	r2, [pc, #228]	@ (8005c58 <DMA_CalcBaseAndBitshift+0x130>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d02c      	beq.n	8005bd0 <DMA_CalcBaseAndBitshift+0xa8>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a38      	ldr	r2, [pc, #224]	@ (8005c5c <DMA_CalcBaseAndBitshift+0x134>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d027      	beq.n	8005bd0 <DMA_CalcBaseAndBitshift+0xa8>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a36      	ldr	r2, [pc, #216]	@ (8005c60 <DMA_CalcBaseAndBitshift+0x138>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d022      	beq.n	8005bd0 <DMA_CalcBaseAndBitshift+0xa8>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a35      	ldr	r2, [pc, #212]	@ (8005c64 <DMA_CalcBaseAndBitshift+0x13c>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d01d      	beq.n	8005bd0 <DMA_CalcBaseAndBitshift+0xa8>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a33      	ldr	r2, [pc, #204]	@ (8005c68 <DMA_CalcBaseAndBitshift+0x140>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d018      	beq.n	8005bd0 <DMA_CalcBaseAndBitshift+0xa8>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a32      	ldr	r2, [pc, #200]	@ (8005c6c <DMA_CalcBaseAndBitshift+0x144>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d013      	beq.n	8005bd0 <DMA_CalcBaseAndBitshift+0xa8>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a30      	ldr	r2, [pc, #192]	@ (8005c70 <DMA_CalcBaseAndBitshift+0x148>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d00e      	beq.n	8005bd0 <DMA_CalcBaseAndBitshift+0xa8>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a2f      	ldr	r2, [pc, #188]	@ (8005c74 <DMA_CalcBaseAndBitshift+0x14c>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d009      	beq.n	8005bd0 <DMA_CalcBaseAndBitshift+0xa8>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a2d      	ldr	r2, [pc, #180]	@ (8005c78 <DMA_CalcBaseAndBitshift+0x150>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d004      	beq.n	8005bd0 <DMA_CalcBaseAndBitshift+0xa8>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a2c      	ldr	r2, [pc, #176]	@ (8005c7c <DMA_CalcBaseAndBitshift+0x154>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d101      	bne.n	8005bd4 <DMA_CalcBaseAndBitshift+0xac>
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e000      	b.n	8005bd6 <DMA_CalcBaseAndBitshift+0xae>
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d024      	beq.n	8005c24 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	3b10      	subs	r3, #16
 8005be2:	4a27      	ldr	r2, [pc, #156]	@ (8005c80 <DMA_CalcBaseAndBitshift+0x158>)
 8005be4:	fba2 2303 	umull	r2, r3, r2, r3
 8005be8:	091b      	lsrs	r3, r3, #4
 8005bea:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f003 0307 	and.w	r3, r3, #7
 8005bf2:	4a24      	ldr	r2, [pc, #144]	@ (8005c84 <DMA_CalcBaseAndBitshift+0x15c>)
 8005bf4:	5cd3      	ldrb	r3, [r2, r3]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2b03      	cmp	r3, #3
 8005c00:	d908      	bls.n	8005c14 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	461a      	mov	r2, r3
 8005c08:	4b1f      	ldr	r3, [pc, #124]	@ (8005c88 <DMA_CalcBaseAndBitshift+0x160>)
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	1d1a      	adds	r2, r3, #4
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	659a      	str	r2, [r3, #88]	@ 0x58
 8005c12:	e00d      	b.n	8005c30 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	461a      	mov	r2, r3
 8005c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8005c88 <DMA_CalcBaseAndBitshift+0x160>)
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c22:	e005      	b.n	8005c30 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3714      	adds	r7, #20
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr
 8005c40:	40020010 	.word	0x40020010
 8005c44:	40020028 	.word	0x40020028
 8005c48:	40020040 	.word	0x40020040
 8005c4c:	40020058 	.word	0x40020058
 8005c50:	40020070 	.word	0x40020070
 8005c54:	40020088 	.word	0x40020088
 8005c58:	400200a0 	.word	0x400200a0
 8005c5c:	400200b8 	.word	0x400200b8
 8005c60:	40020410 	.word	0x40020410
 8005c64:	40020428 	.word	0x40020428
 8005c68:	40020440 	.word	0x40020440
 8005c6c:	40020458 	.word	0x40020458
 8005c70:	40020470 	.word	0x40020470
 8005c74:	40020488 	.word	0x40020488
 8005c78:	400204a0 	.word	0x400204a0
 8005c7c:	400204b8 	.word	0x400204b8
 8005c80:	aaaaaaab 	.word	0xaaaaaaab
 8005c84:	08011cb4 	.word	0x08011cb4
 8005c88:	fffffc00 	.word	0xfffffc00

08005c8c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c94:	2300      	movs	r3, #0
 8005c96:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d120      	bne.n	8005ce2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca4:	2b03      	cmp	r3, #3
 8005ca6:	d858      	bhi.n	8005d5a <DMA_CheckFifoParam+0xce>
 8005ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8005cb0 <DMA_CheckFifoParam+0x24>)
 8005caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cae:	bf00      	nop
 8005cb0:	08005cc1 	.word	0x08005cc1
 8005cb4:	08005cd3 	.word	0x08005cd3
 8005cb8:	08005cc1 	.word	0x08005cc1
 8005cbc:	08005d5b 	.word	0x08005d5b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d048      	beq.n	8005d5e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005cd0:	e045      	b.n	8005d5e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005cda:	d142      	bne.n	8005d62 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ce0:	e03f      	b.n	8005d62 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cea:	d123      	bne.n	8005d34 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cf0:	2b03      	cmp	r3, #3
 8005cf2:	d838      	bhi.n	8005d66 <DMA_CheckFifoParam+0xda>
 8005cf4:	a201      	add	r2, pc, #4	@ (adr r2, 8005cfc <DMA_CheckFifoParam+0x70>)
 8005cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfa:	bf00      	nop
 8005cfc:	08005d0d 	.word	0x08005d0d
 8005d00:	08005d13 	.word	0x08005d13
 8005d04:	08005d0d 	.word	0x08005d0d
 8005d08:	08005d25 	.word	0x08005d25
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	73fb      	strb	r3, [r7, #15]
        break;
 8005d10:	e030      	b.n	8005d74 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d16:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d025      	beq.n	8005d6a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005d22:	e022      	b.n	8005d6a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d28:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005d2c:	d11f      	bne.n	8005d6e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005d32:	e01c      	b.n	8005d6e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d902      	bls.n	8005d42 <DMA_CheckFifoParam+0xb6>
 8005d3c:	2b03      	cmp	r3, #3
 8005d3e:	d003      	beq.n	8005d48 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005d40:	e018      	b.n	8005d74 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	73fb      	strb	r3, [r7, #15]
        break;
 8005d46:	e015      	b.n	8005d74 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00e      	beq.n	8005d72 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	73fb      	strb	r3, [r7, #15]
    break;
 8005d58:	e00b      	b.n	8005d72 <DMA_CheckFifoParam+0xe6>
        break;
 8005d5a:	bf00      	nop
 8005d5c:	e00a      	b.n	8005d74 <DMA_CheckFifoParam+0xe8>
        break;
 8005d5e:	bf00      	nop
 8005d60:	e008      	b.n	8005d74 <DMA_CheckFifoParam+0xe8>
        break;
 8005d62:	bf00      	nop
 8005d64:	e006      	b.n	8005d74 <DMA_CheckFifoParam+0xe8>
        break;
 8005d66:	bf00      	nop
 8005d68:	e004      	b.n	8005d74 <DMA_CheckFifoParam+0xe8>
        break;
 8005d6a:	bf00      	nop
 8005d6c:	e002      	b.n	8005d74 <DMA_CheckFifoParam+0xe8>
        break;
 8005d6e:	bf00      	nop
 8005d70:	e000      	b.n	8005d74 <DMA_CheckFifoParam+0xe8>
    break;
 8005d72:	bf00      	nop
    }
  }

  return status;
 8005d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3714      	adds	r7, #20
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop

08005d84 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a38      	ldr	r2, [pc, #224]	@ (8005e78 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d022      	beq.n	8005de2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a36      	ldr	r2, [pc, #216]	@ (8005e7c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d01d      	beq.n	8005de2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a35      	ldr	r2, [pc, #212]	@ (8005e80 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d018      	beq.n	8005de2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a33      	ldr	r2, [pc, #204]	@ (8005e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d013      	beq.n	8005de2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a32      	ldr	r2, [pc, #200]	@ (8005e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d00e      	beq.n	8005de2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a30      	ldr	r2, [pc, #192]	@ (8005e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d009      	beq.n	8005de2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a2f      	ldr	r2, [pc, #188]	@ (8005e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d004      	beq.n	8005de2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a2d      	ldr	r2, [pc, #180]	@ (8005e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d101      	bne.n	8005de6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005de2:	2301      	movs	r3, #1
 8005de4:	e000      	b.n	8005de8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005de6:	2300      	movs	r3, #0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d01a      	beq.n	8005e22 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	3b08      	subs	r3, #8
 8005df4:	4a28      	ldr	r2, [pc, #160]	@ (8005e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005df6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dfa:	091b      	lsrs	r3, r3, #4
 8005dfc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	4b26      	ldr	r3, [pc, #152]	@ (8005e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005e02:	4413      	add	r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	461a      	mov	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a24      	ldr	r2, [pc, #144]	@ (8005ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005e10:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f003 031f 	and.w	r3, r3, #31
 8005e18:	2201      	movs	r2, #1
 8005e1a:	409a      	lsls	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005e20:	e024      	b.n	8005e6c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	3b10      	subs	r3, #16
 8005e2a:	4a1e      	ldr	r2, [pc, #120]	@ (8005ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e30:	091b      	lsrs	r3, r3, #4
 8005e32:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	4a1c      	ldr	r2, [pc, #112]	@ (8005ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d806      	bhi.n	8005e4a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	4a1b      	ldr	r2, [pc, #108]	@ (8005eac <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d902      	bls.n	8005e4a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	3308      	adds	r3, #8
 8005e48:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	4b18      	ldr	r3, [pc, #96]	@ (8005eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005e4e:	4413      	add	r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	461a      	mov	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a16      	ldr	r2, [pc, #88]	@ (8005eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005e5c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f003 031f 	and.w	r3, r3, #31
 8005e64:	2201      	movs	r2, #1
 8005e66:	409a      	lsls	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005e6c:	bf00      	nop
 8005e6e:	3714      	adds	r7, #20
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr
 8005e78:	58025408 	.word	0x58025408
 8005e7c:	5802541c 	.word	0x5802541c
 8005e80:	58025430 	.word	0x58025430
 8005e84:	58025444 	.word	0x58025444
 8005e88:	58025458 	.word	0x58025458
 8005e8c:	5802546c 	.word	0x5802546c
 8005e90:	58025480 	.word	0x58025480
 8005e94:	58025494 	.word	0x58025494
 8005e98:	cccccccd 	.word	0xcccccccd
 8005e9c:	16009600 	.word	0x16009600
 8005ea0:	58025880 	.word	0x58025880
 8005ea4:	aaaaaaab 	.word	0xaaaaaaab
 8005ea8:	400204b8 	.word	0x400204b8
 8005eac:	4002040f 	.word	0x4002040f
 8005eb0:	10008200 	.word	0x10008200
 8005eb4:	40020880 	.word	0x40020880

08005eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d04a      	beq.n	8005f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2b08      	cmp	r3, #8
 8005ed2:	d847      	bhi.n	8005f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a25      	ldr	r2, [pc, #148]	@ (8005f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d022      	beq.n	8005f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a24      	ldr	r2, [pc, #144]	@ (8005f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d01d      	beq.n	8005f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a22      	ldr	r2, [pc, #136]	@ (8005f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d018      	beq.n	8005f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a21      	ldr	r2, [pc, #132]	@ (8005f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d013      	beq.n	8005f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a1f      	ldr	r2, [pc, #124]	@ (8005f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d00e      	beq.n	8005f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8005f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d009      	beq.n	8005f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a1c      	ldr	r2, [pc, #112]	@ (8005f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d004      	beq.n	8005f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a1b      	ldr	r2, [pc, #108]	@ (8005f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d101      	bne.n	8005f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005f24:	2301      	movs	r3, #1
 8005f26:	e000      	b.n	8005f2a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00a      	beq.n	8005f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	4b17      	ldr	r3, [pc, #92]	@ (8005f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005f32:	4413      	add	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	461a      	mov	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a15      	ldr	r2, [pc, #84]	@ (8005f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005f40:	671a      	str	r2, [r3, #112]	@ 0x70
 8005f42:	e009      	b.n	8005f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	4b14      	ldr	r3, [pc, #80]	@ (8005f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005f48:	4413      	add	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a11      	ldr	r2, [pc, #68]	@ (8005f9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005f56:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	409a      	lsls	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005f64:	bf00      	nop
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	58025408 	.word	0x58025408
 8005f74:	5802541c 	.word	0x5802541c
 8005f78:	58025430 	.word	0x58025430
 8005f7c:	58025444 	.word	0x58025444
 8005f80:	58025458 	.word	0x58025458
 8005f84:	5802546c 	.word	0x5802546c
 8005f88:	58025480 	.word	0x58025480
 8005f8c:	58025494 	.word	0x58025494
 8005f90:	1600963f 	.word	0x1600963f
 8005f94:	58025940 	.word	0x58025940
 8005f98:	1000823f 	.word	0x1000823f
 8005f9c:	40020940 	.word	0x40020940

08005fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b089      	sub	sp, #36	@ 0x24
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005faa:	2300      	movs	r3, #0
 8005fac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005fae:	4b89      	ldr	r3, [pc, #548]	@ (80061d4 <HAL_GPIO_Init+0x234>)
 8005fb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005fb2:	e194      	b.n	80062de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	2101      	movs	r1, #1
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f000 8186 	beq.w	80062d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f003 0303 	and.w	r3, r3, #3
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d005      	beq.n	8005fe4 <HAL_GPIO_Init+0x44>
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	f003 0303 	and.w	r3, r3, #3
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d130      	bne.n	8006046 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	005b      	lsls	r3, r3, #1
 8005fee:	2203      	movs	r2, #3
 8005ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff4:	43db      	mvns	r3, r3
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	68da      	ldr	r2, [r3, #12]
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	005b      	lsls	r3, r3, #1
 8006004:	fa02 f303 	lsl.w	r3, r2, r3
 8006008:	69ba      	ldr	r2, [r7, #24]
 800600a:	4313      	orrs	r3, r2
 800600c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800601a:	2201      	movs	r2, #1
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	fa02 f303 	lsl.w	r3, r2, r3
 8006022:	43db      	mvns	r3, r3
 8006024:	69ba      	ldr	r2, [r7, #24]
 8006026:	4013      	ands	r3, r2
 8006028:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	091b      	lsrs	r3, r3, #4
 8006030:	f003 0201 	and.w	r2, r3, #1
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	fa02 f303 	lsl.w	r3, r2, r3
 800603a:	69ba      	ldr	r2, [r7, #24]
 800603c:	4313      	orrs	r3, r2
 800603e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	69ba      	ldr	r2, [r7, #24]
 8006044:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f003 0303 	and.w	r3, r3, #3
 800604e:	2b03      	cmp	r3, #3
 8006050:	d017      	beq.n	8006082 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	005b      	lsls	r3, r3, #1
 800605c:	2203      	movs	r2, #3
 800605e:	fa02 f303 	lsl.w	r3, r2, r3
 8006062:	43db      	mvns	r3, r3
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	4013      	ands	r3, r2
 8006068:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	689a      	ldr	r2, [r3, #8]
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	005b      	lsls	r3, r3, #1
 8006072:	fa02 f303 	lsl.w	r3, r2, r3
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	4313      	orrs	r3, r2
 800607a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	f003 0303 	and.w	r3, r3, #3
 800608a:	2b02      	cmp	r3, #2
 800608c:	d123      	bne.n	80060d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	08da      	lsrs	r2, r3, #3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	3208      	adds	r2, #8
 8006096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800609a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	f003 0307 	and.w	r3, r3, #7
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	220f      	movs	r2, #15
 80060a6:	fa02 f303 	lsl.w	r3, r2, r3
 80060aa:	43db      	mvns	r3, r3
 80060ac:	69ba      	ldr	r2, [r7, #24]
 80060ae:	4013      	ands	r3, r2
 80060b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	691a      	ldr	r2, [r3, #16]
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	f003 0307 	and.w	r3, r3, #7
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	fa02 f303 	lsl.w	r3, r2, r3
 80060c2:	69ba      	ldr	r2, [r7, #24]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	08da      	lsrs	r2, r3, #3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	3208      	adds	r2, #8
 80060d0:	69b9      	ldr	r1, [r7, #24]
 80060d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	005b      	lsls	r3, r3, #1
 80060e0:	2203      	movs	r2, #3
 80060e2:	fa02 f303 	lsl.w	r3, r2, r3
 80060e6:	43db      	mvns	r3, r3
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	4013      	ands	r3, r2
 80060ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f003 0203 	and.w	r2, r3, #3
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	005b      	lsls	r3, r3, #1
 80060fa:	fa02 f303 	lsl.w	r3, r2, r3
 80060fe:	69ba      	ldr	r2, [r7, #24]
 8006100:	4313      	orrs	r3, r2
 8006102:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006112:	2b00      	cmp	r3, #0
 8006114:	f000 80e0 	beq.w	80062d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006118:	4b2f      	ldr	r3, [pc, #188]	@ (80061d8 <HAL_GPIO_Init+0x238>)
 800611a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800611e:	4a2e      	ldr	r2, [pc, #184]	@ (80061d8 <HAL_GPIO_Init+0x238>)
 8006120:	f043 0302 	orr.w	r3, r3, #2
 8006124:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006128:	4b2b      	ldr	r3, [pc, #172]	@ (80061d8 <HAL_GPIO_Init+0x238>)
 800612a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800612e:	f003 0302 	and.w	r3, r3, #2
 8006132:	60fb      	str	r3, [r7, #12]
 8006134:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006136:	4a29      	ldr	r2, [pc, #164]	@ (80061dc <HAL_GPIO_Init+0x23c>)
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	089b      	lsrs	r3, r3, #2
 800613c:	3302      	adds	r3, #2
 800613e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006142:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	f003 0303 	and.w	r3, r3, #3
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	220f      	movs	r2, #15
 800614e:	fa02 f303 	lsl.w	r3, r2, r3
 8006152:	43db      	mvns	r3, r3
 8006154:	69ba      	ldr	r2, [r7, #24]
 8006156:	4013      	ands	r3, r2
 8006158:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a20      	ldr	r2, [pc, #128]	@ (80061e0 <HAL_GPIO_Init+0x240>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d052      	beq.n	8006208 <HAL_GPIO_Init+0x268>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a1f      	ldr	r2, [pc, #124]	@ (80061e4 <HAL_GPIO_Init+0x244>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d031      	beq.n	80061ce <HAL_GPIO_Init+0x22e>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a1e      	ldr	r2, [pc, #120]	@ (80061e8 <HAL_GPIO_Init+0x248>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d02b      	beq.n	80061ca <HAL_GPIO_Init+0x22a>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a1d      	ldr	r2, [pc, #116]	@ (80061ec <HAL_GPIO_Init+0x24c>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d025      	beq.n	80061c6 <HAL_GPIO_Init+0x226>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a1c      	ldr	r2, [pc, #112]	@ (80061f0 <HAL_GPIO_Init+0x250>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d01f      	beq.n	80061c2 <HAL_GPIO_Init+0x222>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a1b      	ldr	r2, [pc, #108]	@ (80061f4 <HAL_GPIO_Init+0x254>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d019      	beq.n	80061be <HAL_GPIO_Init+0x21e>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a1a      	ldr	r2, [pc, #104]	@ (80061f8 <HAL_GPIO_Init+0x258>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d013      	beq.n	80061ba <HAL_GPIO_Init+0x21a>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a19      	ldr	r2, [pc, #100]	@ (80061fc <HAL_GPIO_Init+0x25c>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d00d      	beq.n	80061b6 <HAL_GPIO_Init+0x216>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a18      	ldr	r2, [pc, #96]	@ (8006200 <HAL_GPIO_Init+0x260>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d007      	beq.n	80061b2 <HAL_GPIO_Init+0x212>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a17      	ldr	r2, [pc, #92]	@ (8006204 <HAL_GPIO_Init+0x264>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d101      	bne.n	80061ae <HAL_GPIO_Init+0x20e>
 80061aa:	2309      	movs	r3, #9
 80061ac:	e02d      	b.n	800620a <HAL_GPIO_Init+0x26a>
 80061ae:	230a      	movs	r3, #10
 80061b0:	e02b      	b.n	800620a <HAL_GPIO_Init+0x26a>
 80061b2:	2308      	movs	r3, #8
 80061b4:	e029      	b.n	800620a <HAL_GPIO_Init+0x26a>
 80061b6:	2307      	movs	r3, #7
 80061b8:	e027      	b.n	800620a <HAL_GPIO_Init+0x26a>
 80061ba:	2306      	movs	r3, #6
 80061bc:	e025      	b.n	800620a <HAL_GPIO_Init+0x26a>
 80061be:	2305      	movs	r3, #5
 80061c0:	e023      	b.n	800620a <HAL_GPIO_Init+0x26a>
 80061c2:	2304      	movs	r3, #4
 80061c4:	e021      	b.n	800620a <HAL_GPIO_Init+0x26a>
 80061c6:	2303      	movs	r3, #3
 80061c8:	e01f      	b.n	800620a <HAL_GPIO_Init+0x26a>
 80061ca:	2302      	movs	r3, #2
 80061cc:	e01d      	b.n	800620a <HAL_GPIO_Init+0x26a>
 80061ce:	2301      	movs	r3, #1
 80061d0:	e01b      	b.n	800620a <HAL_GPIO_Init+0x26a>
 80061d2:	bf00      	nop
 80061d4:	58000080 	.word	0x58000080
 80061d8:	58024400 	.word	0x58024400
 80061dc:	58000400 	.word	0x58000400
 80061e0:	58020000 	.word	0x58020000
 80061e4:	58020400 	.word	0x58020400
 80061e8:	58020800 	.word	0x58020800
 80061ec:	58020c00 	.word	0x58020c00
 80061f0:	58021000 	.word	0x58021000
 80061f4:	58021400 	.word	0x58021400
 80061f8:	58021800 	.word	0x58021800
 80061fc:	58021c00 	.word	0x58021c00
 8006200:	58022000 	.word	0x58022000
 8006204:	58022400 	.word	0x58022400
 8006208:	2300      	movs	r3, #0
 800620a:	69fa      	ldr	r2, [r7, #28]
 800620c:	f002 0203 	and.w	r2, r2, #3
 8006210:	0092      	lsls	r2, r2, #2
 8006212:	4093      	lsls	r3, r2
 8006214:	69ba      	ldr	r2, [r7, #24]
 8006216:	4313      	orrs	r3, r2
 8006218:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800621a:	4938      	ldr	r1, [pc, #224]	@ (80062fc <HAL_GPIO_Init+0x35c>)
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	089b      	lsrs	r3, r3, #2
 8006220:	3302      	adds	r3, #2
 8006222:	69ba      	ldr	r2, [r7, #24]
 8006224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006228:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	43db      	mvns	r3, r3
 8006234:	69ba      	ldr	r2, [r7, #24]
 8006236:	4013      	ands	r3, r2
 8006238:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d003      	beq.n	800624e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006246:	69ba      	ldr	r2, [r7, #24]
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	4313      	orrs	r3, r2
 800624c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800624e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006256:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	43db      	mvns	r3, r3
 8006262:	69ba      	ldr	r2, [r7, #24]
 8006264:	4013      	ands	r3, r2
 8006266:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d003      	beq.n	800627c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	4313      	orrs	r3, r2
 800627a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800627c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	43db      	mvns	r3, r3
 800628e:	69ba      	ldr	r2, [r7, #24]
 8006290:	4013      	ands	r3, r2
 8006292:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d003      	beq.n	80062a8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80062a0:	69ba      	ldr	r2, [r7, #24]
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	69ba      	ldr	r2, [r7, #24]
 80062ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	43db      	mvns	r3, r3
 80062b8:	69ba      	ldr	r2, [r7, #24]
 80062ba:	4013      	ands	r3, r2
 80062bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d003      	beq.n	80062d2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80062ca:	69ba      	ldr	r2, [r7, #24]
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	69ba      	ldr	r2, [r7, #24]
 80062d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	3301      	adds	r3, #1
 80062dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	fa22 f303 	lsr.w	r3, r2, r3
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f47f ae63 	bne.w	8005fb4 <HAL_GPIO_Init+0x14>
  }
}
 80062ee:	bf00      	nop
 80062f0:	bf00      	nop
 80062f2:	3724      	adds	r7, #36	@ 0x24
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr
 80062fc:	58000400 	.word	0x58000400

08006300 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006308:	4b19      	ldr	r3, [pc, #100]	@ (8006370 <HAL_PWREx_ConfigSupply+0x70>)
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	f003 0304 	and.w	r3, r3, #4
 8006310:	2b04      	cmp	r3, #4
 8006312:	d00a      	beq.n	800632a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006314:	4b16      	ldr	r3, [pc, #88]	@ (8006370 <HAL_PWREx_ConfigSupply+0x70>)
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	f003 0307 	and.w	r3, r3, #7
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	429a      	cmp	r2, r3
 8006320:	d001      	beq.n	8006326 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e01f      	b.n	8006366 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006326:	2300      	movs	r3, #0
 8006328:	e01d      	b.n	8006366 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800632a:	4b11      	ldr	r3, [pc, #68]	@ (8006370 <HAL_PWREx_ConfigSupply+0x70>)
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	f023 0207 	bic.w	r2, r3, #7
 8006332:	490f      	ldr	r1, [pc, #60]	@ (8006370 <HAL_PWREx_ConfigSupply+0x70>)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4313      	orrs	r3, r2
 8006338:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800633a:	f7fd ff95 	bl	8004268 <HAL_GetTick>
 800633e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006340:	e009      	b.n	8006356 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006342:	f7fd ff91 	bl	8004268 <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006350:	d901      	bls.n	8006356 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e007      	b.n	8006366 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006356:	4b06      	ldr	r3, [pc, #24]	@ (8006370 <HAL_PWREx_ConfigSupply+0x70>)
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800635e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006362:	d1ee      	bne.n	8006342 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	58024800 	.word	0x58024800

08006374 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b08c      	sub	sp, #48	@ 0x30
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d102      	bne.n	8006388 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	f000 bc48 	b.w	8006c18 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0301 	and.w	r3, r3, #1
 8006390:	2b00      	cmp	r3, #0
 8006392:	f000 8088 	beq.w	80064a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006396:	4b99      	ldr	r3, [pc, #612]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800639e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80063a0:	4b96      	ldr	r3, [pc, #600]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 80063a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80063a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063a8:	2b10      	cmp	r3, #16
 80063aa:	d007      	beq.n	80063bc <HAL_RCC_OscConfig+0x48>
 80063ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ae:	2b18      	cmp	r3, #24
 80063b0:	d111      	bne.n	80063d6 <HAL_RCC_OscConfig+0x62>
 80063b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b4:	f003 0303 	and.w	r3, r3, #3
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d10c      	bne.n	80063d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063bc:	4b8f      	ldr	r3, [pc, #572]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d06d      	beq.n	80064a4 <HAL_RCC_OscConfig+0x130>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d169      	bne.n	80064a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	f000 bc21 	b.w	8006c18 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063de:	d106      	bne.n	80063ee <HAL_RCC_OscConfig+0x7a>
 80063e0:	4b86      	ldr	r3, [pc, #536]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a85      	ldr	r2, [pc, #532]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 80063e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063ea:	6013      	str	r3, [r2, #0]
 80063ec:	e02e      	b.n	800644c <HAL_RCC_OscConfig+0xd8>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10c      	bne.n	8006410 <HAL_RCC_OscConfig+0x9c>
 80063f6:	4b81      	ldr	r3, [pc, #516]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a80      	ldr	r2, [pc, #512]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 80063fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006400:	6013      	str	r3, [r2, #0]
 8006402:	4b7e      	ldr	r3, [pc, #504]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a7d      	ldr	r2, [pc, #500]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 8006408:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800640c:	6013      	str	r3, [r2, #0]
 800640e:	e01d      	b.n	800644c <HAL_RCC_OscConfig+0xd8>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006418:	d10c      	bne.n	8006434 <HAL_RCC_OscConfig+0xc0>
 800641a:	4b78      	ldr	r3, [pc, #480]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a77      	ldr	r2, [pc, #476]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 8006420:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006424:	6013      	str	r3, [r2, #0]
 8006426:	4b75      	ldr	r3, [pc, #468]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a74      	ldr	r2, [pc, #464]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 800642c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006430:	6013      	str	r3, [r2, #0]
 8006432:	e00b      	b.n	800644c <HAL_RCC_OscConfig+0xd8>
 8006434:	4b71      	ldr	r3, [pc, #452]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a70      	ldr	r2, [pc, #448]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 800643a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800643e:	6013      	str	r3, [r2, #0]
 8006440:	4b6e      	ldr	r3, [pc, #440]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a6d      	ldr	r2, [pc, #436]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 8006446:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800644a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d013      	beq.n	800647c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006454:	f7fd ff08 	bl	8004268 <HAL_GetTick>
 8006458:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800645a:	e008      	b.n	800646e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800645c:	f7fd ff04 	bl	8004268 <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	2b64      	cmp	r3, #100	@ 0x64
 8006468:	d901      	bls.n	800646e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e3d4      	b.n	8006c18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800646e:	4b63      	ldr	r3, [pc, #396]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d0f0      	beq.n	800645c <HAL_RCC_OscConfig+0xe8>
 800647a:	e014      	b.n	80064a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800647c:	f7fd fef4 	bl	8004268 <HAL_GetTick>
 8006480:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006482:	e008      	b.n	8006496 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006484:	f7fd fef0 	bl	8004268 <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	2b64      	cmp	r3, #100	@ 0x64
 8006490:	d901      	bls.n	8006496 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e3c0      	b.n	8006c18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006496:	4b59      	ldr	r3, [pc, #356]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1f0      	bne.n	8006484 <HAL_RCC_OscConfig+0x110>
 80064a2:	e000      	b.n	80064a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0302 	and.w	r3, r3, #2
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f000 80ca 	beq.w	8006648 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064b4:	4b51      	ldr	r3, [pc, #324]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80064be:	4b4f      	ldr	r3, [pc, #316]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 80064c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064c2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80064c4:	6a3b      	ldr	r3, [r7, #32]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d007      	beq.n	80064da <HAL_RCC_OscConfig+0x166>
 80064ca:	6a3b      	ldr	r3, [r7, #32]
 80064cc:	2b18      	cmp	r3, #24
 80064ce:	d156      	bne.n	800657e <HAL_RCC_OscConfig+0x20a>
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	f003 0303 	and.w	r3, r3, #3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d151      	bne.n	800657e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064da:	4b48      	ldr	r3, [pc, #288]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0304 	and.w	r3, r3, #4
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d005      	beq.n	80064f2 <HAL_RCC_OscConfig+0x17e>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d101      	bne.n	80064f2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e392      	b.n	8006c18 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80064f2:	4b42      	ldr	r3, [pc, #264]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f023 0219 	bic.w	r2, r3, #25
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	493f      	ldr	r1, [pc, #252]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 8006500:	4313      	orrs	r3, r2
 8006502:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006504:	f7fd feb0 	bl	8004268 <HAL_GetTick>
 8006508:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800650a:	e008      	b.n	800651e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800650c:	f7fd feac 	bl	8004268 <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	2b02      	cmp	r3, #2
 8006518:	d901      	bls.n	800651e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e37c      	b.n	8006c18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800651e:	4b37      	ldr	r3, [pc, #220]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0304 	and.w	r3, r3, #4
 8006526:	2b00      	cmp	r3, #0
 8006528:	d0f0      	beq.n	800650c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800652a:	f7fd fecd 	bl	80042c8 <HAL_GetREVID>
 800652e:	4603      	mov	r3, r0
 8006530:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006534:	4293      	cmp	r3, r2
 8006536:	d817      	bhi.n	8006568 <HAL_RCC_OscConfig+0x1f4>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	2b40      	cmp	r3, #64	@ 0x40
 800653e:	d108      	bne.n	8006552 <HAL_RCC_OscConfig+0x1de>
 8006540:	4b2e      	ldr	r3, [pc, #184]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006548:	4a2c      	ldr	r2, [pc, #176]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 800654a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800654e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006550:	e07a      	b.n	8006648 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006552:	4b2a      	ldr	r3, [pc, #168]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	031b      	lsls	r3, r3, #12
 8006560:	4926      	ldr	r1, [pc, #152]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 8006562:	4313      	orrs	r3, r2
 8006564:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006566:	e06f      	b.n	8006648 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006568:	4b24      	ldr	r3, [pc, #144]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	061b      	lsls	r3, r3, #24
 8006576:	4921      	ldr	r1, [pc, #132]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 8006578:	4313      	orrs	r3, r2
 800657a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800657c:	e064      	b.n	8006648 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d047      	beq.n	8006616 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006586:	4b1d      	ldr	r3, [pc, #116]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f023 0219 	bic.w	r2, r3, #25
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	491a      	ldr	r1, [pc, #104]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 8006594:	4313      	orrs	r3, r2
 8006596:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006598:	f7fd fe66 	bl	8004268 <HAL_GetTick>
 800659c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800659e:	e008      	b.n	80065b2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065a0:	f7fd fe62 	bl	8004268 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d901      	bls.n	80065b2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e332      	b.n	8006c18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065b2:	4b12      	ldr	r3, [pc, #72]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0304 	and.w	r3, r3, #4
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d0f0      	beq.n	80065a0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065be:	f7fd fe83 	bl	80042c8 <HAL_GetREVID>
 80065c2:	4603      	mov	r3, r0
 80065c4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d819      	bhi.n	8006600 <HAL_RCC_OscConfig+0x28c>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	2b40      	cmp	r3, #64	@ 0x40
 80065d2:	d108      	bne.n	80065e6 <HAL_RCC_OscConfig+0x272>
 80065d4:	4b09      	ldr	r3, [pc, #36]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80065dc:	4a07      	ldr	r2, [pc, #28]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 80065de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065e2:	6053      	str	r3, [r2, #4]
 80065e4:	e030      	b.n	8006648 <HAL_RCC_OscConfig+0x2d4>
 80065e6:	4b05      	ldr	r3, [pc, #20]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	031b      	lsls	r3, r3, #12
 80065f4:	4901      	ldr	r1, [pc, #4]	@ (80065fc <HAL_RCC_OscConfig+0x288>)
 80065f6:	4313      	orrs	r3, r2
 80065f8:	604b      	str	r3, [r1, #4]
 80065fa:	e025      	b.n	8006648 <HAL_RCC_OscConfig+0x2d4>
 80065fc:	58024400 	.word	0x58024400
 8006600:	4b9a      	ldr	r3, [pc, #616]	@ (800686c <HAL_RCC_OscConfig+0x4f8>)
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	061b      	lsls	r3, r3, #24
 800660e:	4997      	ldr	r1, [pc, #604]	@ (800686c <HAL_RCC_OscConfig+0x4f8>)
 8006610:	4313      	orrs	r3, r2
 8006612:	604b      	str	r3, [r1, #4]
 8006614:	e018      	b.n	8006648 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006616:	4b95      	ldr	r3, [pc, #596]	@ (800686c <HAL_RCC_OscConfig+0x4f8>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a94      	ldr	r2, [pc, #592]	@ (800686c <HAL_RCC_OscConfig+0x4f8>)
 800661c:	f023 0301 	bic.w	r3, r3, #1
 8006620:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006622:	f7fd fe21 	bl	8004268 <HAL_GetTick>
 8006626:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006628:	e008      	b.n	800663c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800662a:	f7fd fe1d 	bl	8004268 <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	2b02      	cmp	r3, #2
 8006636:	d901      	bls.n	800663c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e2ed      	b.n	8006c18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800663c:	4b8b      	ldr	r3, [pc, #556]	@ (800686c <HAL_RCC_OscConfig+0x4f8>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0304 	and.w	r3, r3, #4
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1f0      	bne.n	800662a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0310 	and.w	r3, r3, #16
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 80a9 	beq.w	80067a8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006656:	4b85      	ldr	r3, [pc, #532]	@ (800686c <HAL_RCC_OscConfig+0x4f8>)
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800665e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006660:	4b82      	ldr	r3, [pc, #520]	@ (800686c <HAL_RCC_OscConfig+0x4f8>)
 8006662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006664:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	2b08      	cmp	r3, #8
 800666a:	d007      	beq.n	800667c <HAL_RCC_OscConfig+0x308>
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	2b18      	cmp	r3, #24
 8006670:	d13a      	bne.n	80066e8 <HAL_RCC_OscConfig+0x374>
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f003 0303 	and.w	r3, r3, #3
 8006678:	2b01      	cmp	r3, #1
 800667a:	d135      	bne.n	80066e8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800667c:	4b7b      	ldr	r3, [pc, #492]	@ (800686c <HAL_RCC_OscConfig+0x4f8>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006684:	2b00      	cmp	r3, #0
 8006686:	d005      	beq.n	8006694 <HAL_RCC_OscConfig+0x320>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	69db      	ldr	r3, [r3, #28]
 800668c:	2b80      	cmp	r3, #128	@ 0x80
 800668e:	d001      	beq.n	8006694 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e2c1      	b.n	8006c18 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006694:	f7fd fe18 	bl	80042c8 <HAL_GetREVID>
 8006698:	4603      	mov	r3, r0
 800669a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800669e:	4293      	cmp	r3, r2
 80066a0:	d817      	bhi.n	80066d2 <HAL_RCC_OscConfig+0x35e>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	2b20      	cmp	r3, #32
 80066a8:	d108      	bne.n	80066bc <HAL_RCC_OscConfig+0x348>
 80066aa:	4b70      	ldr	r3, [pc, #448]	@ (800686c <HAL_RCC_OscConfig+0x4f8>)
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80066b2:	4a6e      	ldr	r2, [pc, #440]	@ (800686c <HAL_RCC_OscConfig+0x4f8>)
 80066b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066b8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066ba:	e075      	b.n	80067a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066bc:	4b6b      	ldr	r3, [pc, #428]	@ (800686c <HAL_RCC_OscConfig+0x4f8>)
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a1b      	ldr	r3, [r3, #32]
 80066c8:	069b      	lsls	r3, r3, #26
 80066ca:	4968      	ldr	r1, [pc, #416]	@ (800686c <HAL_RCC_OscConfig+0x4f8>)
 80066cc:	4313      	orrs	r3, r2
 80066ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066d0:	e06a      	b.n	80067a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066d2:	4b66      	ldr	r3, [pc, #408]	@ (800686c <HAL_RCC_OscConfig+0x4f8>)
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a1b      	ldr	r3, [r3, #32]
 80066de:	061b      	lsls	r3, r3, #24
 80066e0:	4962      	ldr	r1, [pc, #392]	@ (800686c <HAL_RCC_OscConfig+0x4f8>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066e6:	e05f      	b.n	80067a8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	69db      	ldr	r3, [r3, #28]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d042      	beq.n	8006776 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80066f0:	4b5e      	ldr	r3, [pc, #376]	@ (800686c <HAL_RCC_OscConfig+0x4f8>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a5d      	ldr	r2, [pc, #372]	@ (800686c <HAL_RCC_OscConfig+0x4f8>)
 80066f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066fc:	f7fd fdb4 	bl	8004268 <HAL_GetTick>
 8006700:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006702:	e008      	b.n	8006716 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006704:	f7fd fdb0 	bl	8004268 <HAL_GetTick>
 8006708:	4602      	mov	r2, r0
 800670a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	2b02      	cmp	r3, #2
 8006710:	d901      	bls.n	8006716 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	e280      	b.n	8006c18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006716:	4b55      	ldr	r3, [pc, #340]	@ (800686c <HAL_RCC_OscConfig+0x4f8>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800671e:	2b00      	cmp	r3, #0
 8006720:	d0f0      	beq.n	8006704 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006722:	f7fd fdd1 	bl	80042c8 <HAL_GetREVID>
 8006726:	4603      	mov	r3, r0
 8006728:	f241 0203 	movw	r2, #4099	@ 0x1003
 800672c:	4293      	cmp	r3, r2
 800672e:	d817      	bhi.n	8006760 <HAL_RCC_OscConfig+0x3ec>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a1b      	ldr	r3, [r3, #32]
 8006734:	2b20      	cmp	r3, #32
 8006736:	d108      	bne.n	800674a <HAL_RCC_OscConfig+0x3d6>
 8006738:	4b4c      	ldr	r3, [pc, #304]	@ (800686c <HAL_RCC_OscConfig+0x4f8>)
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006740:	4a4a      	ldr	r2, [pc, #296]	@ (800686c <HAL_RCC_OscConfig+0x4f8>)
 8006742:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006746:	6053      	str	r3, [r2, #4]
 8006748:	e02e      	b.n	80067a8 <HAL_RCC_OscConfig+0x434>
 800674a:	4b48      	ldr	r3, [pc, #288]	@ (800686c <HAL_RCC_OscConfig+0x4f8>)
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	069b      	lsls	r3, r3, #26
 8006758:	4944      	ldr	r1, [pc, #272]	@ (800686c <HAL_RCC_OscConfig+0x4f8>)
 800675a:	4313      	orrs	r3, r2
 800675c:	604b      	str	r3, [r1, #4]
 800675e:	e023      	b.n	80067a8 <HAL_RCC_OscConfig+0x434>
 8006760:	4b42      	ldr	r3, [pc, #264]	@ (800686c <HAL_RCC_OscConfig+0x4f8>)
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a1b      	ldr	r3, [r3, #32]
 800676c:	061b      	lsls	r3, r3, #24
 800676e:	493f      	ldr	r1, [pc, #252]	@ (800686c <HAL_RCC_OscConfig+0x4f8>)
 8006770:	4313      	orrs	r3, r2
 8006772:	60cb      	str	r3, [r1, #12]
 8006774:	e018      	b.n	80067a8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006776:	4b3d      	ldr	r3, [pc, #244]	@ (800686c <HAL_RCC_OscConfig+0x4f8>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a3c      	ldr	r2, [pc, #240]	@ (800686c <HAL_RCC_OscConfig+0x4f8>)
 800677c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006780:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006782:	f7fd fd71 	bl	8004268 <HAL_GetTick>
 8006786:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006788:	e008      	b.n	800679c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800678a:	f7fd fd6d 	bl	8004268 <HAL_GetTick>
 800678e:	4602      	mov	r2, r0
 8006790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	2b02      	cmp	r3, #2
 8006796:	d901      	bls.n	800679c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e23d      	b.n	8006c18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800679c:	4b33      	ldr	r3, [pc, #204]	@ (800686c <HAL_RCC_OscConfig+0x4f8>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1f0      	bne.n	800678a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0308 	and.w	r3, r3, #8
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d036      	beq.n	8006822 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	695b      	ldr	r3, [r3, #20]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d019      	beq.n	80067f0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067bc:	4b2b      	ldr	r3, [pc, #172]	@ (800686c <HAL_RCC_OscConfig+0x4f8>)
 80067be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067c0:	4a2a      	ldr	r2, [pc, #168]	@ (800686c <HAL_RCC_OscConfig+0x4f8>)
 80067c2:	f043 0301 	orr.w	r3, r3, #1
 80067c6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067c8:	f7fd fd4e 	bl	8004268 <HAL_GetTick>
 80067cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80067ce:	e008      	b.n	80067e2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067d0:	f7fd fd4a 	bl	8004268 <HAL_GetTick>
 80067d4:	4602      	mov	r2, r0
 80067d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	2b02      	cmp	r3, #2
 80067dc:	d901      	bls.n	80067e2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e21a      	b.n	8006c18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80067e2:	4b22      	ldr	r3, [pc, #136]	@ (800686c <HAL_RCC_OscConfig+0x4f8>)
 80067e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d0f0      	beq.n	80067d0 <HAL_RCC_OscConfig+0x45c>
 80067ee:	e018      	b.n	8006822 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067f0:	4b1e      	ldr	r3, [pc, #120]	@ (800686c <HAL_RCC_OscConfig+0x4f8>)
 80067f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067f4:	4a1d      	ldr	r2, [pc, #116]	@ (800686c <HAL_RCC_OscConfig+0x4f8>)
 80067f6:	f023 0301 	bic.w	r3, r3, #1
 80067fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067fc:	f7fd fd34 	bl	8004268 <HAL_GetTick>
 8006800:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006802:	e008      	b.n	8006816 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006804:	f7fd fd30 	bl	8004268 <HAL_GetTick>
 8006808:	4602      	mov	r2, r0
 800680a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	2b02      	cmp	r3, #2
 8006810:	d901      	bls.n	8006816 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	e200      	b.n	8006c18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006816:	4b15      	ldr	r3, [pc, #84]	@ (800686c <HAL_RCC_OscConfig+0x4f8>)
 8006818:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800681a:	f003 0302 	and.w	r3, r3, #2
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1f0      	bne.n	8006804 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0320 	and.w	r3, r3, #32
 800682a:	2b00      	cmp	r3, #0
 800682c:	d039      	beq.n	80068a2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d01c      	beq.n	8006870 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006836:	4b0d      	ldr	r3, [pc, #52]	@ (800686c <HAL_RCC_OscConfig+0x4f8>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a0c      	ldr	r2, [pc, #48]	@ (800686c <HAL_RCC_OscConfig+0x4f8>)
 800683c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006840:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006842:	f7fd fd11 	bl	8004268 <HAL_GetTick>
 8006846:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006848:	e008      	b.n	800685c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800684a:	f7fd fd0d 	bl	8004268 <HAL_GetTick>
 800684e:	4602      	mov	r2, r0
 8006850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	2b02      	cmp	r3, #2
 8006856:	d901      	bls.n	800685c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e1dd      	b.n	8006c18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800685c:	4b03      	ldr	r3, [pc, #12]	@ (800686c <HAL_RCC_OscConfig+0x4f8>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d0f0      	beq.n	800684a <HAL_RCC_OscConfig+0x4d6>
 8006868:	e01b      	b.n	80068a2 <HAL_RCC_OscConfig+0x52e>
 800686a:	bf00      	nop
 800686c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006870:	4b9b      	ldr	r3, [pc, #620]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a9a      	ldr	r2, [pc, #616]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 8006876:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800687a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800687c:	f7fd fcf4 	bl	8004268 <HAL_GetTick>
 8006880:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006882:	e008      	b.n	8006896 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006884:	f7fd fcf0 	bl	8004268 <HAL_GetTick>
 8006888:	4602      	mov	r2, r0
 800688a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	2b02      	cmp	r3, #2
 8006890:	d901      	bls.n	8006896 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e1c0      	b.n	8006c18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006896:	4b92      	ldr	r3, [pc, #584]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1f0      	bne.n	8006884 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0304 	and.w	r3, r3, #4
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f000 8081 	beq.w	80069b2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80068b0:	4b8c      	ldr	r3, [pc, #560]	@ (8006ae4 <HAL_RCC_OscConfig+0x770>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a8b      	ldr	r2, [pc, #556]	@ (8006ae4 <HAL_RCC_OscConfig+0x770>)
 80068b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068bc:	f7fd fcd4 	bl	8004268 <HAL_GetTick>
 80068c0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068c2:	e008      	b.n	80068d6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068c4:	f7fd fcd0 	bl	8004268 <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	2b64      	cmp	r3, #100	@ 0x64
 80068d0:	d901      	bls.n	80068d6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e1a0      	b.n	8006c18 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068d6:	4b83      	ldr	r3, [pc, #524]	@ (8006ae4 <HAL_RCC_OscConfig+0x770>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d0f0      	beq.n	80068c4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d106      	bne.n	80068f8 <HAL_RCC_OscConfig+0x584>
 80068ea:	4b7d      	ldr	r3, [pc, #500]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 80068ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ee:	4a7c      	ldr	r2, [pc, #496]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 80068f0:	f043 0301 	orr.w	r3, r3, #1
 80068f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80068f6:	e02d      	b.n	8006954 <HAL_RCC_OscConfig+0x5e0>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d10c      	bne.n	800691a <HAL_RCC_OscConfig+0x5a6>
 8006900:	4b77      	ldr	r3, [pc, #476]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 8006902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006904:	4a76      	ldr	r2, [pc, #472]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 8006906:	f023 0301 	bic.w	r3, r3, #1
 800690a:	6713      	str	r3, [r2, #112]	@ 0x70
 800690c:	4b74      	ldr	r3, [pc, #464]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 800690e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006910:	4a73      	ldr	r2, [pc, #460]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 8006912:	f023 0304 	bic.w	r3, r3, #4
 8006916:	6713      	str	r3, [r2, #112]	@ 0x70
 8006918:	e01c      	b.n	8006954 <HAL_RCC_OscConfig+0x5e0>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	2b05      	cmp	r3, #5
 8006920:	d10c      	bne.n	800693c <HAL_RCC_OscConfig+0x5c8>
 8006922:	4b6f      	ldr	r3, [pc, #444]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 8006924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006926:	4a6e      	ldr	r2, [pc, #440]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 8006928:	f043 0304 	orr.w	r3, r3, #4
 800692c:	6713      	str	r3, [r2, #112]	@ 0x70
 800692e:	4b6c      	ldr	r3, [pc, #432]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 8006930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006932:	4a6b      	ldr	r2, [pc, #428]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 8006934:	f043 0301 	orr.w	r3, r3, #1
 8006938:	6713      	str	r3, [r2, #112]	@ 0x70
 800693a:	e00b      	b.n	8006954 <HAL_RCC_OscConfig+0x5e0>
 800693c:	4b68      	ldr	r3, [pc, #416]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 800693e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006940:	4a67      	ldr	r2, [pc, #412]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 8006942:	f023 0301 	bic.w	r3, r3, #1
 8006946:	6713      	str	r3, [r2, #112]	@ 0x70
 8006948:	4b65      	ldr	r3, [pc, #404]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 800694a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800694c:	4a64      	ldr	r2, [pc, #400]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 800694e:	f023 0304 	bic.w	r3, r3, #4
 8006952:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d015      	beq.n	8006988 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800695c:	f7fd fc84 	bl	8004268 <HAL_GetTick>
 8006960:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006962:	e00a      	b.n	800697a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006964:	f7fd fc80 	bl	8004268 <HAL_GetTick>
 8006968:	4602      	mov	r2, r0
 800696a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006972:	4293      	cmp	r3, r2
 8006974:	d901      	bls.n	800697a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e14e      	b.n	8006c18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800697a:	4b59      	ldr	r3, [pc, #356]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 800697c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800697e:	f003 0302 	and.w	r3, r3, #2
 8006982:	2b00      	cmp	r3, #0
 8006984:	d0ee      	beq.n	8006964 <HAL_RCC_OscConfig+0x5f0>
 8006986:	e014      	b.n	80069b2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006988:	f7fd fc6e 	bl	8004268 <HAL_GetTick>
 800698c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800698e:	e00a      	b.n	80069a6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006990:	f7fd fc6a 	bl	8004268 <HAL_GetTick>
 8006994:	4602      	mov	r2, r0
 8006996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800699e:	4293      	cmp	r3, r2
 80069a0:	d901      	bls.n	80069a6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e138      	b.n	8006c18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80069a6:	4b4e      	ldr	r3, [pc, #312]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 80069a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1ee      	bne.n	8006990 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f000 812d 	beq.w	8006c16 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80069bc:	4b48      	ldr	r3, [pc, #288]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069c4:	2b18      	cmp	r3, #24
 80069c6:	f000 80bd 	beq.w	8006b44 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	f040 809e 	bne.w	8006b10 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069d4:	4b42      	ldr	r3, [pc, #264]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a41      	ldr	r2, [pc, #260]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 80069da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e0:	f7fd fc42 	bl	8004268 <HAL_GetTick>
 80069e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069e6:	e008      	b.n	80069fa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069e8:	f7fd fc3e 	bl	8004268 <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d901      	bls.n	80069fa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e10e      	b.n	8006c18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069fa:	4b39      	ldr	r3, [pc, #228]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1f0      	bne.n	80069e8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a06:	4b36      	ldr	r3, [pc, #216]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 8006a08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a0a:	4b37      	ldr	r3, [pc, #220]	@ (8006ae8 <HAL_RCC_OscConfig+0x774>)
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006a16:	0112      	lsls	r2, r2, #4
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	4931      	ldr	r1, [pc, #196]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a24:	3b01      	subs	r3, #1
 8006a26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	025b      	lsls	r3, r3, #9
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	431a      	orrs	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	041b      	lsls	r3, r3, #16
 8006a3e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006a42:	431a      	orrs	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	061b      	lsls	r3, r3, #24
 8006a4c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006a50:	4923      	ldr	r1, [pc, #140]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006a56:	4b22      	ldr	r3, [pc, #136]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 8006a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a5a:	4a21      	ldr	r2, [pc, #132]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 8006a5c:	f023 0301 	bic.w	r3, r3, #1
 8006a60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006a62:	4b1f      	ldr	r3, [pc, #124]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 8006a64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a66:	4b21      	ldr	r3, [pc, #132]	@ (8006aec <HAL_RCC_OscConfig+0x778>)
 8006a68:	4013      	ands	r3, r2
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006a6e:	00d2      	lsls	r2, r2, #3
 8006a70:	491b      	ldr	r1, [pc, #108]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 8006a72:	4313      	orrs	r3, r2
 8006a74:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006a76:	4b1a      	ldr	r3, [pc, #104]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 8006a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a7a:	f023 020c 	bic.w	r2, r3, #12
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a82:	4917      	ldr	r1, [pc, #92]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 8006a84:	4313      	orrs	r3, r2
 8006a86:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006a88:	4b15      	ldr	r3, [pc, #84]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 8006a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a8c:	f023 0202 	bic.w	r2, r3, #2
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a94:	4912      	ldr	r1, [pc, #72]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 8006a96:	4313      	orrs	r3, r2
 8006a98:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006a9a:	4b11      	ldr	r3, [pc, #68]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 8006a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a9e:	4a10      	ldr	r2, [pc, #64]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 8006aa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006aa4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 8006aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aaa:	4a0d      	ldr	r2, [pc, #52]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 8006aac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ab0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 8006ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 8006ab8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006abc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006abe:	4b08      	ldr	r3, [pc, #32]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 8006ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac2:	4a07      	ldr	r2, [pc, #28]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 8006ac4:	f043 0301 	orr.w	r3, r3, #1
 8006ac8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006aca:	4b05      	ldr	r3, [pc, #20]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a04      	ldr	r2, [pc, #16]	@ (8006ae0 <HAL_RCC_OscConfig+0x76c>)
 8006ad0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad6:	f7fd fbc7 	bl	8004268 <HAL_GetTick>
 8006ada:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006adc:	e011      	b.n	8006b02 <HAL_RCC_OscConfig+0x78e>
 8006ade:	bf00      	nop
 8006ae0:	58024400 	.word	0x58024400
 8006ae4:	58024800 	.word	0x58024800
 8006ae8:	fffffc0c 	.word	0xfffffc0c
 8006aec:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006af0:	f7fd fbba 	bl	8004268 <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d901      	bls.n	8006b02 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e08a      	b.n	8006c18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b02:	4b47      	ldr	r3, [pc, #284]	@ (8006c20 <HAL_RCC_OscConfig+0x8ac>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d0f0      	beq.n	8006af0 <HAL_RCC_OscConfig+0x77c>
 8006b0e:	e082      	b.n	8006c16 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b10:	4b43      	ldr	r3, [pc, #268]	@ (8006c20 <HAL_RCC_OscConfig+0x8ac>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a42      	ldr	r2, [pc, #264]	@ (8006c20 <HAL_RCC_OscConfig+0x8ac>)
 8006b16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b1c:	f7fd fba4 	bl	8004268 <HAL_GetTick>
 8006b20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b22:	e008      	b.n	8006b36 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b24:	f7fd fba0 	bl	8004268 <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d901      	bls.n	8006b36 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e070      	b.n	8006c18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b36:	4b3a      	ldr	r3, [pc, #232]	@ (8006c20 <HAL_RCC_OscConfig+0x8ac>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1f0      	bne.n	8006b24 <HAL_RCC_OscConfig+0x7b0>
 8006b42:	e068      	b.n	8006c16 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006b44:	4b36      	ldr	r3, [pc, #216]	@ (8006c20 <HAL_RCC_OscConfig+0x8ac>)
 8006b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b48:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006b4a:	4b35      	ldr	r3, [pc, #212]	@ (8006c20 <HAL_RCC_OscConfig+0x8ac>)
 8006b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b4e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d031      	beq.n	8006bbc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	f003 0203 	and.w	r2, r3, #3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d12a      	bne.n	8006bbc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	091b      	lsrs	r3, r3, #4
 8006b6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d122      	bne.n	8006bbc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b80:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d11a      	bne.n	8006bbc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	0a5b      	lsrs	r3, r3, #9
 8006b8a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b92:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d111      	bne.n	8006bbc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	0c1b      	lsrs	r3, r3, #16
 8006b9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ba4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d108      	bne.n	8006bbc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	0e1b      	lsrs	r3, r3, #24
 8006bae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bb6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d001      	beq.n	8006bc0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e02b      	b.n	8006c18 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006bc0:	4b17      	ldr	r3, [pc, #92]	@ (8006c20 <HAL_RCC_OscConfig+0x8ac>)
 8006bc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bc4:	08db      	lsrs	r3, r3, #3
 8006bc6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d01f      	beq.n	8006c16 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006bd6:	4b12      	ldr	r3, [pc, #72]	@ (8006c20 <HAL_RCC_OscConfig+0x8ac>)
 8006bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bda:	4a11      	ldr	r2, [pc, #68]	@ (8006c20 <HAL_RCC_OscConfig+0x8ac>)
 8006bdc:	f023 0301 	bic.w	r3, r3, #1
 8006be0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006be2:	f7fd fb41 	bl	8004268 <HAL_GetTick>
 8006be6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006be8:	bf00      	nop
 8006bea:	f7fd fb3d 	bl	8004268 <HAL_GetTick>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d0f9      	beq.n	8006bea <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8006c20 <HAL_RCC_OscConfig+0x8ac>)
 8006bf8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8006c24 <HAL_RCC_OscConfig+0x8b0>)
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006c02:	00d2      	lsls	r2, r2, #3
 8006c04:	4906      	ldr	r1, [pc, #24]	@ (8006c20 <HAL_RCC_OscConfig+0x8ac>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006c0a:	4b05      	ldr	r3, [pc, #20]	@ (8006c20 <HAL_RCC_OscConfig+0x8ac>)
 8006c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c0e:	4a04      	ldr	r2, [pc, #16]	@ (8006c20 <HAL_RCC_OscConfig+0x8ac>)
 8006c10:	f043 0301 	orr.w	r3, r3, #1
 8006c14:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3730      	adds	r7, #48	@ 0x30
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	58024400 	.word	0x58024400
 8006c24:	ffff0007 	.word	0xffff0007

08006c28 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d101      	bne.n	8006c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e19c      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c3c:	4b8a      	ldr	r3, [pc, #552]	@ (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 030f 	and.w	r3, r3, #15
 8006c44:	683a      	ldr	r2, [r7, #0]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d910      	bls.n	8006c6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c4a:	4b87      	ldr	r3, [pc, #540]	@ (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f023 020f 	bic.w	r2, r3, #15
 8006c52:	4985      	ldr	r1, [pc, #532]	@ (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c5a:	4b83      	ldr	r3, [pc, #524]	@ (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 030f 	and.w	r3, r3, #15
 8006c62:	683a      	ldr	r2, [r7, #0]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d001      	beq.n	8006c6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e184      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0304 	and.w	r3, r3, #4
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d010      	beq.n	8006c9a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	691a      	ldr	r2, [r3, #16]
 8006c7c:	4b7b      	ldr	r3, [pc, #492]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d908      	bls.n	8006c9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c88:	4b78      	ldr	r3, [pc, #480]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006c8a:	699b      	ldr	r3, [r3, #24]
 8006c8c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	4975      	ldr	r1, [pc, #468]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0308 	and.w	r3, r3, #8
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d010      	beq.n	8006cc8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	695a      	ldr	r2, [r3, #20]
 8006caa:	4b70      	ldr	r3, [pc, #448]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d908      	bls.n	8006cc8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006cb6:	4b6d      	ldr	r3, [pc, #436]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	496a      	ldr	r1, [pc, #424]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0310 	and.w	r3, r3, #16
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d010      	beq.n	8006cf6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	699a      	ldr	r2, [r3, #24]
 8006cd8:	4b64      	ldr	r3, [pc, #400]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006cda:	69db      	ldr	r3, [r3, #28]
 8006cdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d908      	bls.n	8006cf6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ce4:	4b61      	ldr	r3, [pc, #388]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006ce6:	69db      	ldr	r3, [r3, #28]
 8006ce8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	495e      	ldr	r1, [pc, #376]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0320 	and.w	r3, r3, #32
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d010      	beq.n	8006d24 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	69da      	ldr	r2, [r3, #28]
 8006d06:	4b59      	ldr	r3, [pc, #356]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d08:	6a1b      	ldr	r3, [r3, #32]
 8006d0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d908      	bls.n	8006d24 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006d12:	4b56      	ldr	r3, [pc, #344]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d14:	6a1b      	ldr	r3, [r3, #32]
 8006d16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	69db      	ldr	r3, [r3, #28]
 8006d1e:	4953      	ldr	r1, [pc, #332]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d20:	4313      	orrs	r3, r2
 8006d22:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0302 	and.w	r3, r3, #2
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d010      	beq.n	8006d52 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	68da      	ldr	r2, [r3, #12]
 8006d34:	4b4d      	ldr	r3, [pc, #308]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	f003 030f 	and.w	r3, r3, #15
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d908      	bls.n	8006d52 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d40:	4b4a      	ldr	r3, [pc, #296]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	f023 020f 	bic.w	r2, r3, #15
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	4947      	ldr	r1, [pc, #284]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0301 	and.w	r3, r3, #1
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d055      	beq.n	8006e0a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006d5e:	4b43      	ldr	r3, [pc, #268]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	4940      	ldr	r1, [pc, #256]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d107      	bne.n	8006d88 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d78:	4b3c      	ldr	r3, [pc, #240]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d121      	bne.n	8006dc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e0f6      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	2b03      	cmp	r3, #3
 8006d8e:	d107      	bne.n	8006da0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d90:	4b36      	ldr	r3, [pc, #216]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d115      	bne.n	8006dc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e0ea      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d107      	bne.n	8006db8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006da8:	4b30      	ldr	r3, [pc, #192]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d109      	bne.n	8006dc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e0de      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006db8:	4b2c      	ldr	r3, [pc, #176]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0304 	and.w	r3, r3, #4
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e0d6      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006dc8:	4b28      	ldr	r3, [pc, #160]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	f023 0207 	bic.w	r2, r3, #7
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	4925      	ldr	r1, [pc, #148]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dda:	f7fd fa45 	bl	8004268 <HAL_GetTick>
 8006dde:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006de0:	e00a      	b.n	8006df8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006de2:	f7fd fa41 	bl	8004268 <HAL_GetTick>
 8006de6:	4602      	mov	r2, r0
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d901      	bls.n	8006df8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006df4:	2303      	movs	r3, #3
 8006df6:	e0be      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006df8:	4b1c      	ldr	r3, [pc, #112]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	00db      	lsls	r3, r3, #3
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d1eb      	bne.n	8006de2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0302 	and.w	r3, r3, #2
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d010      	beq.n	8006e38 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68da      	ldr	r2, [r3, #12]
 8006e1a:	4b14      	ldr	r3, [pc, #80]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006e1c:	699b      	ldr	r3, [r3, #24]
 8006e1e:	f003 030f 	and.w	r3, r3, #15
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d208      	bcs.n	8006e38 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e26:	4b11      	ldr	r3, [pc, #68]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	f023 020f 	bic.w	r2, r3, #15
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	490e      	ldr	r1, [pc, #56]	@ (8006e6c <HAL_RCC_ClockConfig+0x244>)
 8006e34:	4313      	orrs	r3, r2
 8006e36:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e38:	4b0b      	ldr	r3, [pc, #44]	@ (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 030f 	and.w	r3, r3, #15
 8006e40:	683a      	ldr	r2, [r7, #0]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d214      	bcs.n	8006e70 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e46:	4b08      	ldr	r3, [pc, #32]	@ (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f023 020f 	bic.w	r2, r3, #15
 8006e4e:	4906      	ldr	r1, [pc, #24]	@ (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e56:	4b04      	ldr	r3, [pc, #16]	@ (8006e68 <HAL_RCC_ClockConfig+0x240>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 030f 	and.w	r3, r3, #15
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d005      	beq.n	8006e70 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e086      	b.n	8006f76 <HAL_RCC_ClockConfig+0x34e>
 8006e68:	52002000 	.word	0x52002000
 8006e6c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0304 	and.w	r3, r3, #4
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d010      	beq.n	8006e9e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	691a      	ldr	r2, [r3, #16]
 8006e80:	4b3f      	ldr	r3, [pc, #252]	@ (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d208      	bcs.n	8006e9e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e8c:	4b3c      	ldr	r3, [pc, #240]	@ (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	4939      	ldr	r1, [pc, #228]	@ (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0308 	and.w	r3, r3, #8
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d010      	beq.n	8006ecc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	695a      	ldr	r2, [r3, #20]
 8006eae:	4b34      	ldr	r3, [pc, #208]	@ (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d208      	bcs.n	8006ecc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006eba:	4b31      	ldr	r3, [pc, #196]	@ (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006ebc:	69db      	ldr	r3, [r3, #28]
 8006ebe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	492e      	ldr	r1, [pc, #184]	@ (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0310 	and.w	r3, r3, #16
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d010      	beq.n	8006efa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	699a      	ldr	r2, [r3, #24]
 8006edc:	4b28      	ldr	r3, [pc, #160]	@ (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006ede:	69db      	ldr	r3, [r3, #28]
 8006ee0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d208      	bcs.n	8006efa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ee8:	4b25      	ldr	r3, [pc, #148]	@ (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006eea:	69db      	ldr	r3, [r3, #28]
 8006eec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	699b      	ldr	r3, [r3, #24]
 8006ef4:	4922      	ldr	r1, [pc, #136]	@ (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0320 	and.w	r3, r3, #32
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d010      	beq.n	8006f28 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	69da      	ldr	r2, [r3, #28]
 8006f0a:	4b1d      	ldr	r3, [pc, #116]	@ (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006f0c:	6a1b      	ldr	r3, [r3, #32]
 8006f0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d208      	bcs.n	8006f28 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006f16:	4b1a      	ldr	r3, [pc, #104]	@ (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006f18:	6a1b      	ldr	r3, [r3, #32]
 8006f1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	69db      	ldr	r3, [r3, #28]
 8006f22:	4917      	ldr	r1, [pc, #92]	@ (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006f28:	f000 f834 	bl	8006f94 <HAL_RCC_GetSysClockFreq>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	4b14      	ldr	r3, [pc, #80]	@ (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	0a1b      	lsrs	r3, r3, #8
 8006f34:	f003 030f 	and.w	r3, r3, #15
 8006f38:	4912      	ldr	r1, [pc, #72]	@ (8006f84 <HAL_RCC_ClockConfig+0x35c>)
 8006f3a:	5ccb      	ldrb	r3, [r1, r3]
 8006f3c:	f003 031f 	and.w	r3, r3, #31
 8006f40:	fa22 f303 	lsr.w	r3, r2, r3
 8006f44:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f46:	4b0e      	ldr	r3, [pc, #56]	@ (8006f80 <HAL_RCC_ClockConfig+0x358>)
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	f003 030f 	and.w	r3, r3, #15
 8006f4e:	4a0d      	ldr	r2, [pc, #52]	@ (8006f84 <HAL_RCC_ClockConfig+0x35c>)
 8006f50:	5cd3      	ldrb	r3, [r2, r3]
 8006f52:	f003 031f 	and.w	r3, r3, #31
 8006f56:	693a      	ldr	r2, [r7, #16]
 8006f58:	fa22 f303 	lsr.w	r3, r2, r3
 8006f5c:	4a0a      	ldr	r2, [pc, #40]	@ (8006f88 <HAL_RCC_ClockConfig+0x360>)
 8006f5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f60:	4a0a      	ldr	r2, [pc, #40]	@ (8006f8c <HAL_RCC_ClockConfig+0x364>)
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006f66:	4b0a      	ldr	r3, [pc, #40]	@ (8006f90 <HAL_RCC_ClockConfig+0x368>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fd f932 	bl	80041d4 <HAL_InitTick>
 8006f70:	4603      	mov	r3, r0
 8006f72:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3718      	adds	r7, #24
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	58024400 	.word	0x58024400
 8006f84:	08011c50 	.word	0x08011c50
 8006f88:	24000054 	.word	0x24000054
 8006f8c:	24000050 	.word	0x24000050
 8006f90:	24000058 	.word	0x24000058

08006f94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b089      	sub	sp, #36	@ 0x24
 8006f98:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f9a:	4bb3      	ldr	r3, [pc, #716]	@ (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006fa2:	2b18      	cmp	r3, #24
 8006fa4:	f200 8155 	bhi.w	8007252 <HAL_RCC_GetSysClockFreq+0x2be>
 8006fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8006fb0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fae:	bf00      	nop
 8006fb0:	08007015 	.word	0x08007015
 8006fb4:	08007253 	.word	0x08007253
 8006fb8:	08007253 	.word	0x08007253
 8006fbc:	08007253 	.word	0x08007253
 8006fc0:	08007253 	.word	0x08007253
 8006fc4:	08007253 	.word	0x08007253
 8006fc8:	08007253 	.word	0x08007253
 8006fcc:	08007253 	.word	0x08007253
 8006fd0:	0800703b 	.word	0x0800703b
 8006fd4:	08007253 	.word	0x08007253
 8006fd8:	08007253 	.word	0x08007253
 8006fdc:	08007253 	.word	0x08007253
 8006fe0:	08007253 	.word	0x08007253
 8006fe4:	08007253 	.word	0x08007253
 8006fe8:	08007253 	.word	0x08007253
 8006fec:	08007253 	.word	0x08007253
 8006ff0:	08007041 	.word	0x08007041
 8006ff4:	08007253 	.word	0x08007253
 8006ff8:	08007253 	.word	0x08007253
 8006ffc:	08007253 	.word	0x08007253
 8007000:	08007253 	.word	0x08007253
 8007004:	08007253 	.word	0x08007253
 8007008:	08007253 	.word	0x08007253
 800700c:	08007253 	.word	0x08007253
 8007010:	08007047 	.word	0x08007047
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007014:	4b94      	ldr	r3, [pc, #592]	@ (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0320 	and.w	r3, r3, #32
 800701c:	2b00      	cmp	r3, #0
 800701e:	d009      	beq.n	8007034 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007020:	4b91      	ldr	r3, [pc, #580]	@ (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	08db      	lsrs	r3, r3, #3
 8007026:	f003 0303 	and.w	r3, r3, #3
 800702a:	4a90      	ldr	r2, [pc, #576]	@ (800726c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800702c:	fa22 f303 	lsr.w	r3, r2, r3
 8007030:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007032:	e111      	b.n	8007258 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007034:	4b8d      	ldr	r3, [pc, #564]	@ (800726c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007036:	61bb      	str	r3, [r7, #24]
      break;
 8007038:	e10e      	b.n	8007258 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800703a:	4b8d      	ldr	r3, [pc, #564]	@ (8007270 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800703c:	61bb      	str	r3, [r7, #24]
      break;
 800703e:	e10b      	b.n	8007258 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007040:	4b8c      	ldr	r3, [pc, #560]	@ (8007274 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007042:	61bb      	str	r3, [r7, #24]
      break;
 8007044:	e108      	b.n	8007258 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007046:	4b88      	ldr	r3, [pc, #544]	@ (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800704a:	f003 0303 	and.w	r3, r3, #3
 800704e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007050:	4b85      	ldr	r3, [pc, #532]	@ (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007054:	091b      	lsrs	r3, r3, #4
 8007056:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800705a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800705c:	4b82      	ldr	r3, [pc, #520]	@ (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800705e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007060:	f003 0301 	and.w	r3, r3, #1
 8007064:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007066:	4b80      	ldr	r3, [pc, #512]	@ (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800706a:	08db      	lsrs	r3, r3, #3
 800706c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	fb02 f303 	mul.w	r3, r2, r3
 8007076:	ee07 3a90 	vmov	s15, r3
 800707a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	2b00      	cmp	r3, #0
 8007086:	f000 80e1 	beq.w	800724c <HAL_RCC_GetSysClockFreq+0x2b8>
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	2b02      	cmp	r3, #2
 800708e:	f000 8083 	beq.w	8007198 <HAL_RCC_GetSysClockFreq+0x204>
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	2b02      	cmp	r3, #2
 8007096:	f200 80a1 	bhi.w	80071dc <HAL_RCC_GetSysClockFreq+0x248>
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d003      	beq.n	80070a8 <HAL_RCC_GetSysClockFreq+0x114>
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d056      	beq.n	8007154 <HAL_RCC_GetSysClockFreq+0x1c0>
 80070a6:	e099      	b.n	80071dc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070a8:	4b6f      	ldr	r3, [pc, #444]	@ (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0320 	and.w	r3, r3, #32
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d02d      	beq.n	8007110 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070b4:	4b6c      	ldr	r3, [pc, #432]	@ (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	08db      	lsrs	r3, r3, #3
 80070ba:	f003 0303 	and.w	r3, r3, #3
 80070be:	4a6b      	ldr	r2, [pc, #428]	@ (800726c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80070c0:	fa22 f303 	lsr.w	r3, r2, r3
 80070c4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	ee07 3a90 	vmov	s15, r3
 80070cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	ee07 3a90 	vmov	s15, r3
 80070d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070de:	4b62      	ldr	r3, [pc, #392]	@ (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070e6:	ee07 3a90 	vmov	s15, r3
 80070ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80070f2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007278 <HAL_RCC_GetSysClockFreq+0x2e4>
 80070f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800710a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800710e:	e087      	b.n	8007220 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	ee07 3a90 	vmov	s15, r3
 8007116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800711a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800727c <HAL_RCC_GetSysClockFreq+0x2e8>
 800711e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007122:	4b51      	ldr	r3, [pc, #324]	@ (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800712a:	ee07 3a90 	vmov	s15, r3
 800712e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007132:	ed97 6a02 	vldr	s12, [r7, #8]
 8007136:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007278 <HAL_RCC_GetSysClockFreq+0x2e4>
 800713a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800713e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007142:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800714a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800714e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007152:	e065      	b.n	8007220 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	ee07 3a90 	vmov	s15, r3
 800715a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007280 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007166:	4b40      	ldr	r3, [pc, #256]	@ (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800716a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800716e:	ee07 3a90 	vmov	s15, r3
 8007172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007176:	ed97 6a02 	vldr	s12, [r7, #8]
 800717a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007278 <HAL_RCC_GetSysClockFreq+0x2e4>
 800717e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007186:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800718a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800718e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007192:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007196:	e043      	b.n	8007220 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	ee07 3a90 	vmov	s15, r3
 800719e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071a2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007284 <HAL_RCC_GetSysClockFreq+0x2f0>
 80071a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071aa:	4b2f      	ldr	r3, [pc, #188]	@ (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071b2:	ee07 3a90 	vmov	s15, r3
 80071b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80071be:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007278 <HAL_RCC_GetSysClockFreq+0x2e4>
 80071c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80071da:	e021      	b.n	8007220 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	ee07 3a90 	vmov	s15, r3
 80071e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007280 <HAL_RCC_GetSysClockFreq+0x2ec>
 80071ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ee:	4b1e      	ldr	r3, [pc, #120]	@ (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071f6:	ee07 3a90 	vmov	s15, r3
 80071fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8007202:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007278 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800720a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800720e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800721a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800721e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007220:	4b11      	ldr	r3, [pc, #68]	@ (8007268 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007224:	0a5b      	lsrs	r3, r3, #9
 8007226:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800722a:	3301      	adds	r3, #1
 800722c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	ee07 3a90 	vmov	s15, r3
 8007234:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007238:	edd7 6a07 	vldr	s13, [r7, #28]
 800723c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007240:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007244:	ee17 3a90 	vmov	r3, s15
 8007248:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800724a:	e005      	b.n	8007258 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800724c:	2300      	movs	r3, #0
 800724e:	61bb      	str	r3, [r7, #24]
      break;
 8007250:	e002      	b.n	8007258 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007252:	4b07      	ldr	r3, [pc, #28]	@ (8007270 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007254:	61bb      	str	r3, [r7, #24]
      break;
 8007256:	bf00      	nop
  }

  return sysclockfreq;
 8007258:	69bb      	ldr	r3, [r7, #24]
}
 800725a:	4618      	mov	r0, r3
 800725c:	3724      	adds	r7, #36	@ 0x24
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	58024400 	.word	0x58024400
 800726c:	03d09000 	.word	0x03d09000
 8007270:	003d0900 	.word	0x003d0900
 8007274:	017d7840 	.word	0x017d7840
 8007278:	46000000 	.word	0x46000000
 800727c:	4c742400 	.word	0x4c742400
 8007280:	4a742400 	.word	0x4a742400
 8007284:	4bbebc20 	.word	0x4bbebc20

08007288 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800728e:	f7ff fe81 	bl	8006f94 <HAL_RCC_GetSysClockFreq>
 8007292:	4602      	mov	r2, r0
 8007294:	4b10      	ldr	r3, [pc, #64]	@ (80072d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	0a1b      	lsrs	r3, r3, #8
 800729a:	f003 030f 	and.w	r3, r3, #15
 800729e:	490f      	ldr	r1, [pc, #60]	@ (80072dc <HAL_RCC_GetHCLKFreq+0x54>)
 80072a0:	5ccb      	ldrb	r3, [r1, r3]
 80072a2:	f003 031f 	and.w	r3, r3, #31
 80072a6:	fa22 f303 	lsr.w	r3, r2, r3
 80072aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80072ac:	4b0a      	ldr	r3, [pc, #40]	@ (80072d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	f003 030f 	and.w	r3, r3, #15
 80072b4:	4a09      	ldr	r2, [pc, #36]	@ (80072dc <HAL_RCC_GetHCLKFreq+0x54>)
 80072b6:	5cd3      	ldrb	r3, [r2, r3]
 80072b8:	f003 031f 	and.w	r3, r3, #31
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	fa22 f303 	lsr.w	r3, r2, r3
 80072c2:	4a07      	ldr	r2, [pc, #28]	@ (80072e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80072c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80072c6:	4a07      	ldr	r2, [pc, #28]	@ (80072e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80072cc:	4b04      	ldr	r3, [pc, #16]	@ (80072e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80072ce:	681b      	ldr	r3, [r3, #0]
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3708      	adds	r7, #8
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	58024400 	.word	0x58024400
 80072dc:	08011c50 	.word	0x08011c50
 80072e0:	24000054 	.word	0x24000054
 80072e4:	24000050 	.word	0x24000050

080072e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80072ec:	f7ff ffcc 	bl	8007288 <HAL_RCC_GetHCLKFreq>
 80072f0:	4602      	mov	r2, r0
 80072f2:	4b06      	ldr	r3, [pc, #24]	@ (800730c <HAL_RCC_GetPCLK1Freq+0x24>)
 80072f4:	69db      	ldr	r3, [r3, #28]
 80072f6:	091b      	lsrs	r3, r3, #4
 80072f8:	f003 0307 	and.w	r3, r3, #7
 80072fc:	4904      	ldr	r1, [pc, #16]	@ (8007310 <HAL_RCC_GetPCLK1Freq+0x28>)
 80072fe:	5ccb      	ldrb	r3, [r1, r3]
 8007300:	f003 031f 	and.w	r3, r3, #31
 8007304:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007308:	4618      	mov	r0, r3
 800730a:	bd80      	pop	{r7, pc}
 800730c:	58024400 	.word	0x58024400
 8007310:	08011c50 	.word	0x08011c50

08007314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007318:	f7ff ffb6 	bl	8007288 <HAL_RCC_GetHCLKFreq>
 800731c:	4602      	mov	r2, r0
 800731e:	4b06      	ldr	r3, [pc, #24]	@ (8007338 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007320:	69db      	ldr	r3, [r3, #28]
 8007322:	0a1b      	lsrs	r3, r3, #8
 8007324:	f003 0307 	and.w	r3, r3, #7
 8007328:	4904      	ldr	r1, [pc, #16]	@ (800733c <HAL_RCC_GetPCLK2Freq+0x28>)
 800732a:	5ccb      	ldrb	r3, [r1, r3]
 800732c:	f003 031f 	and.w	r3, r3, #31
 8007330:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007334:	4618      	mov	r0, r3
 8007336:	bd80      	pop	{r7, pc}
 8007338:	58024400 	.word	0x58024400
 800733c:	08011c50 	.word	0x08011c50

08007340 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007344:	b0ca      	sub	sp, #296	@ 0x128
 8007346:	af00      	add	r7, sp, #0
 8007348:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800734c:	2300      	movs	r3, #0
 800734e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007352:	2300      	movs	r3, #0
 8007354:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800735c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007360:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007364:	2500      	movs	r5, #0
 8007366:	ea54 0305 	orrs.w	r3, r4, r5
 800736a:	d049      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800736c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007370:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007372:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007376:	d02f      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007378:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800737c:	d828      	bhi.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800737e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007382:	d01a      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007384:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007388:	d822      	bhi.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800738a:	2b00      	cmp	r3, #0
 800738c:	d003      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800738e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007392:	d007      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007394:	e01c      	b.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007396:	4bb8      	ldr	r3, [pc, #736]	@ (8007678 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800739a:	4ab7      	ldr	r2, [pc, #732]	@ (8007678 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800739c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80073a2:	e01a      	b.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80073a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073a8:	3308      	adds	r3, #8
 80073aa:	2102      	movs	r1, #2
 80073ac:	4618      	mov	r0, r3
 80073ae:	f002 fb61 	bl	8009a74 <RCCEx_PLL2_Config>
 80073b2:	4603      	mov	r3, r0
 80073b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80073b8:	e00f      	b.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80073ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073be:	3328      	adds	r3, #40	@ 0x28
 80073c0:	2102      	movs	r1, #2
 80073c2:	4618      	mov	r0, r3
 80073c4:	f002 fc08 	bl	8009bd8 <RCCEx_PLL3_Config>
 80073c8:	4603      	mov	r3, r0
 80073ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80073ce:	e004      	b.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073d6:	e000      	b.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80073d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10a      	bne.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80073e2:	4ba5      	ldr	r3, [pc, #660]	@ (8007678 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80073ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073f0:	4aa1      	ldr	r2, [pc, #644]	@ (8007678 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073f2:	430b      	orrs	r3, r1
 80073f4:	6513      	str	r3, [r2, #80]	@ 0x50
 80073f6:	e003      	b.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007408:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800740c:	f04f 0900 	mov.w	r9, #0
 8007410:	ea58 0309 	orrs.w	r3, r8, r9
 8007414:	d047      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800741a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800741c:	2b04      	cmp	r3, #4
 800741e:	d82a      	bhi.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007420:	a201      	add	r2, pc, #4	@ (adr r2, 8007428 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007426:	bf00      	nop
 8007428:	0800743d 	.word	0x0800743d
 800742c:	0800744b 	.word	0x0800744b
 8007430:	08007461 	.word	0x08007461
 8007434:	0800747f 	.word	0x0800747f
 8007438:	0800747f 	.word	0x0800747f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800743c:	4b8e      	ldr	r3, [pc, #568]	@ (8007678 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800743e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007440:	4a8d      	ldr	r2, [pc, #564]	@ (8007678 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007442:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007446:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007448:	e01a      	b.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800744a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800744e:	3308      	adds	r3, #8
 8007450:	2100      	movs	r1, #0
 8007452:	4618      	mov	r0, r3
 8007454:	f002 fb0e 	bl	8009a74 <RCCEx_PLL2_Config>
 8007458:	4603      	mov	r3, r0
 800745a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800745e:	e00f      	b.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007464:	3328      	adds	r3, #40	@ 0x28
 8007466:	2100      	movs	r1, #0
 8007468:	4618      	mov	r0, r3
 800746a:	f002 fbb5 	bl	8009bd8 <RCCEx_PLL3_Config>
 800746e:	4603      	mov	r3, r0
 8007470:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007474:	e004      	b.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800747c:	e000      	b.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800747e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007480:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007484:	2b00      	cmp	r3, #0
 8007486:	d10a      	bne.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007488:	4b7b      	ldr	r3, [pc, #492]	@ (8007678 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800748a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800748c:	f023 0107 	bic.w	r1, r3, #7
 8007490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007496:	4a78      	ldr	r2, [pc, #480]	@ (8007678 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007498:	430b      	orrs	r3, r1
 800749a:	6513      	str	r3, [r2, #80]	@ 0x50
 800749c:	e003      	b.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800749e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80074a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ae:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80074b2:	f04f 0b00 	mov.w	fp, #0
 80074b6:	ea5a 030b 	orrs.w	r3, sl, fp
 80074ba:	d04c      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80074bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074c6:	d030      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80074c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074cc:	d829      	bhi.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80074ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80074d0:	d02d      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80074d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80074d4:	d825      	bhi.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80074d6:	2b80      	cmp	r3, #128	@ 0x80
 80074d8:	d018      	beq.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80074da:	2b80      	cmp	r3, #128	@ 0x80
 80074dc:	d821      	bhi.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d002      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80074e2:	2b40      	cmp	r3, #64	@ 0x40
 80074e4:	d007      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80074e6:	e01c      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074e8:	4b63      	ldr	r3, [pc, #396]	@ (8007678 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ec:	4a62      	ldr	r2, [pc, #392]	@ (8007678 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80074f4:	e01c      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074fa:	3308      	adds	r3, #8
 80074fc:	2100      	movs	r1, #0
 80074fe:	4618      	mov	r0, r3
 8007500:	f002 fab8 	bl	8009a74 <RCCEx_PLL2_Config>
 8007504:	4603      	mov	r3, r0
 8007506:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800750a:	e011      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800750c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007510:	3328      	adds	r3, #40	@ 0x28
 8007512:	2100      	movs	r1, #0
 8007514:	4618      	mov	r0, r3
 8007516:	f002 fb5f 	bl	8009bd8 <RCCEx_PLL3_Config>
 800751a:	4603      	mov	r3, r0
 800751c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007520:	e006      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007528:	e002      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800752a:	bf00      	nop
 800752c:	e000      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800752e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007530:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007534:	2b00      	cmp	r3, #0
 8007536:	d10a      	bne.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007538:	4b4f      	ldr	r3, [pc, #316]	@ (8007678 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800753a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800753c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007546:	4a4c      	ldr	r2, [pc, #304]	@ (8007678 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007548:	430b      	orrs	r3, r1
 800754a:	6513      	str	r3, [r2, #80]	@ 0x50
 800754c:	e003      	b.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800754e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007552:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800755a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007562:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007566:	2300      	movs	r3, #0
 8007568:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800756c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007570:	460b      	mov	r3, r1
 8007572:	4313      	orrs	r3, r2
 8007574:	d053      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800757a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800757e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007582:	d035      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007584:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007588:	d82e      	bhi.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800758a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800758e:	d031      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007590:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007594:	d828      	bhi.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007596:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800759a:	d01a      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800759c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80075a0:	d822      	bhi.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d003      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80075a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80075aa:	d007      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80075ac:	e01c      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075ae:	4b32      	ldr	r3, [pc, #200]	@ (8007678 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b2:	4a31      	ldr	r2, [pc, #196]	@ (8007678 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075ba:	e01c      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075c0:	3308      	adds	r3, #8
 80075c2:	2100      	movs	r1, #0
 80075c4:	4618      	mov	r0, r3
 80075c6:	f002 fa55 	bl	8009a74 <RCCEx_PLL2_Config>
 80075ca:	4603      	mov	r3, r0
 80075cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80075d0:	e011      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d6:	3328      	adds	r3, #40	@ 0x28
 80075d8:	2100      	movs	r1, #0
 80075da:	4618      	mov	r0, r3
 80075dc:	f002 fafc 	bl	8009bd8 <RCCEx_PLL3_Config>
 80075e0:	4603      	mov	r3, r0
 80075e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075e6:	e006      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075ee:	e002      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80075f0:	bf00      	nop
 80075f2:	e000      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80075f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d10b      	bne.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80075fe:	4b1e      	ldr	r3, [pc, #120]	@ (8007678 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007602:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800760a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800760e:	4a1a      	ldr	r2, [pc, #104]	@ (8007678 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007610:	430b      	orrs	r3, r1
 8007612:	6593      	str	r3, [r2, #88]	@ 0x58
 8007614:	e003      	b.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007616:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800761a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800761e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007626:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800762a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800762e:	2300      	movs	r3, #0
 8007630:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007634:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007638:	460b      	mov	r3, r1
 800763a:	4313      	orrs	r3, r2
 800763c:	d056      	beq.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800763e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007642:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007646:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800764a:	d038      	beq.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800764c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007650:	d831      	bhi.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007652:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007656:	d034      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007658:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800765c:	d82b      	bhi.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800765e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007662:	d01d      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007664:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007668:	d825      	bhi.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800766a:	2b00      	cmp	r3, #0
 800766c:	d006      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800766e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007672:	d00a      	beq.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007674:	e01f      	b.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007676:	bf00      	nop
 8007678:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800767c:	4ba2      	ldr	r3, [pc, #648]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800767e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007680:	4aa1      	ldr	r2, [pc, #644]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007682:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007686:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007688:	e01c      	b.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800768a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800768e:	3308      	adds	r3, #8
 8007690:	2100      	movs	r1, #0
 8007692:	4618      	mov	r0, r3
 8007694:	f002 f9ee 	bl	8009a74 <RCCEx_PLL2_Config>
 8007698:	4603      	mov	r3, r0
 800769a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800769e:	e011      	b.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80076a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076a4:	3328      	adds	r3, #40	@ 0x28
 80076a6:	2100      	movs	r1, #0
 80076a8:	4618      	mov	r0, r3
 80076aa:	f002 fa95 	bl	8009bd8 <RCCEx_PLL3_Config>
 80076ae:	4603      	mov	r3, r0
 80076b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80076b4:	e006      	b.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076bc:	e002      	b.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80076be:	bf00      	nop
 80076c0:	e000      	b.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80076c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10b      	bne.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80076cc:	4b8e      	ldr	r3, [pc, #568]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076d0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80076d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80076dc:	4a8a      	ldr	r2, [pc, #552]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076de:	430b      	orrs	r3, r1
 80076e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80076e2:	e003      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80076ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80076f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80076fc:	2300      	movs	r3, #0
 80076fe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007702:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007706:	460b      	mov	r3, r1
 8007708:	4313      	orrs	r3, r2
 800770a:	d03a      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800770c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007712:	2b30      	cmp	r3, #48	@ 0x30
 8007714:	d01f      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007716:	2b30      	cmp	r3, #48	@ 0x30
 8007718:	d819      	bhi.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800771a:	2b20      	cmp	r3, #32
 800771c:	d00c      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800771e:	2b20      	cmp	r3, #32
 8007720:	d815      	bhi.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007722:	2b00      	cmp	r3, #0
 8007724:	d019      	beq.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007726:	2b10      	cmp	r3, #16
 8007728:	d111      	bne.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800772a:	4b77      	ldr	r3, [pc, #476]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800772c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800772e:	4a76      	ldr	r2, [pc, #472]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007730:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007734:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007736:	e011      	b.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800773c:	3308      	adds	r3, #8
 800773e:	2102      	movs	r1, #2
 8007740:	4618      	mov	r0, r3
 8007742:	f002 f997 	bl	8009a74 <RCCEx_PLL2_Config>
 8007746:	4603      	mov	r3, r0
 8007748:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800774c:	e006      	b.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007754:	e002      	b.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007756:	bf00      	nop
 8007758:	e000      	b.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800775a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800775c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007760:	2b00      	cmp	r3, #0
 8007762:	d10a      	bne.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007764:	4b68      	ldr	r3, [pc, #416]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007768:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800776c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007772:	4a65      	ldr	r2, [pc, #404]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007774:	430b      	orrs	r3, r1
 8007776:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007778:	e003      	b.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800777a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800777e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800778e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007792:	2300      	movs	r3, #0
 8007794:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007798:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800779c:	460b      	mov	r3, r1
 800779e:	4313      	orrs	r3, r2
 80077a0:	d051      	beq.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80077a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077ac:	d035      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80077ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077b2:	d82e      	bhi.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80077b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80077b8:	d031      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80077ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80077be:	d828      	bhi.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80077c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077c4:	d01a      	beq.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80077c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077ca:	d822      	bhi.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d003      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80077d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077d4:	d007      	beq.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80077d6:	e01c      	b.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077d8:	4b4b      	ldr	r3, [pc, #300]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077dc:	4a4a      	ldr	r2, [pc, #296]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80077e4:	e01c      	b.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ea:	3308      	adds	r3, #8
 80077ec:	2100      	movs	r1, #0
 80077ee:	4618      	mov	r0, r3
 80077f0:	f002 f940 	bl	8009a74 <RCCEx_PLL2_Config>
 80077f4:	4603      	mov	r3, r0
 80077f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80077fa:	e011      	b.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007800:	3328      	adds	r3, #40	@ 0x28
 8007802:	2100      	movs	r1, #0
 8007804:	4618      	mov	r0, r3
 8007806:	f002 f9e7 	bl	8009bd8 <RCCEx_PLL3_Config>
 800780a:	4603      	mov	r3, r0
 800780c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007810:	e006      	b.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007818:	e002      	b.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800781a:	bf00      	nop
 800781c:	e000      	b.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800781e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007820:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007824:	2b00      	cmp	r3, #0
 8007826:	d10a      	bne.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007828:	4b37      	ldr	r3, [pc, #220]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800782a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800782c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007836:	4a34      	ldr	r2, [pc, #208]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007838:	430b      	orrs	r3, r1
 800783a:	6513      	str	r3, [r2, #80]	@ 0x50
 800783c:	e003      	b.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800783e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007842:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800784a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007852:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007856:	2300      	movs	r3, #0
 8007858:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800785c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007860:	460b      	mov	r3, r1
 8007862:	4313      	orrs	r3, r2
 8007864:	d056      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800786a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800786c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007870:	d033      	beq.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007872:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007876:	d82c      	bhi.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007878:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800787c:	d02f      	beq.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800787e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007882:	d826      	bhi.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007884:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007888:	d02b      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800788a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800788e:	d820      	bhi.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007890:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007894:	d012      	beq.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007896:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800789a:	d81a      	bhi.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800789c:	2b00      	cmp	r3, #0
 800789e:	d022      	beq.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80078a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078a4:	d115      	bne.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80078a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078aa:	3308      	adds	r3, #8
 80078ac:	2101      	movs	r1, #1
 80078ae:	4618      	mov	r0, r3
 80078b0:	f002 f8e0 	bl	8009a74 <RCCEx_PLL2_Config>
 80078b4:	4603      	mov	r3, r0
 80078b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80078ba:	e015      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80078bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078c0:	3328      	adds	r3, #40	@ 0x28
 80078c2:	2101      	movs	r1, #1
 80078c4:	4618      	mov	r0, r3
 80078c6:	f002 f987 	bl	8009bd8 <RCCEx_PLL3_Config>
 80078ca:	4603      	mov	r3, r0
 80078cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80078d0:	e00a      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078d8:	e006      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80078da:	bf00      	nop
 80078dc:	e004      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80078de:	bf00      	nop
 80078e0:	e002      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80078e2:	bf00      	nop
 80078e4:	e000      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80078e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d10d      	bne.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80078f0:	4b05      	ldr	r3, [pc, #20]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078f4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80078f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078fe:	4a02      	ldr	r2, [pc, #8]	@ (8007908 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007900:	430b      	orrs	r3, r1
 8007902:	6513      	str	r3, [r2, #80]	@ 0x50
 8007904:	e006      	b.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007906:	bf00      	nop
 8007908:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800790c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007910:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007920:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007924:	2300      	movs	r3, #0
 8007926:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800792a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800792e:	460b      	mov	r3, r1
 8007930:	4313      	orrs	r3, r2
 8007932:	d055      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007938:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800793c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007940:	d033      	beq.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007942:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007946:	d82c      	bhi.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007948:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800794c:	d02f      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800794e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007952:	d826      	bhi.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007954:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007958:	d02b      	beq.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800795a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800795e:	d820      	bhi.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007960:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007964:	d012      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007966:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800796a:	d81a      	bhi.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800796c:	2b00      	cmp	r3, #0
 800796e:	d022      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007970:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007974:	d115      	bne.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800797a:	3308      	adds	r3, #8
 800797c:	2101      	movs	r1, #1
 800797e:	4618      	mov	r0, r3
 8007980:	f002 f878 	bl	8009a74 <RCCEx_PLL2_Config>
 8007984:	4603      	mov	r3, r0
 8007986:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800798a:	e015      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800798c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007990:	3328      	adds	r3, #40	@ 0x28
 8007992:	2101      	movs	r1, #1
 8007994:	4618      	mov	r0, r3
 8007996:	f002 f91f 	bl	8009bd8 <RCCEx_PLL3_Config>
 800799a:	4603      	mov	r3, r0
 800799c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80079a0:	e00a      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079a8:	e006      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80079aa:	bf00      	nop
 80079ac:	e004      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80079ae:	bf00      	nop
 80079b0:	e002      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80079b2:	bf00      	nop
 80079b4:	e000      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80079b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d10b      	bne.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80079c0:	4ba3      	ldr	r3, [pc, #652]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079c4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80079c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80079d0:	4a9f      	ldr	r2, [pc, #636]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079d2:	430b      	orrs	r3, r1
 80079d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80079d6:	e003      	b.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80079e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80079ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80079f0:	2300      	movs	r3, #0
 80079f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80079f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80079fa:	460b      	mov	r3, r1
 80079fc:	4313      	orrs	r3, r2
 80079fe:	d037      	beq.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a0a:	d00e      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007a0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a10:	d816      	bhi.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d018      	beq.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007a16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a1a:	d111      	bne.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a1c:	4b8c      	ldr	r3, [pc, #560]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a20:	4a8b      	ldr	r2, [pc, #556]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007a28:	e00f      	b.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a2e:	3308      	adds	r3, #8
 8007a30:	2101      	movs	r1, #1
 8007a32:	4618      	mov	r0, r3
 8007a34:	f002 f81e 	bl	8009a74 <RCCEx_PLL2_Config>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007a3e:	e004      	b.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a46:	e000      	b.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007a48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10a      	bne.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007a52:	4b7f      	ldr	r3, [pc, #508]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a56:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a60:	4a7b      	ldr	r2, [pc, #492]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a62:	430b      	orrs	r3, r1
 8007a64:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a66:	e003      	b.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a78:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007a7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a80:	2300      	movs	r3, #0
 8007a82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007a86:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	d039      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a96:	2b03      	cmp	r3, #3
 8007a98:	d81c      	bhi.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa0:	08007add 	.word	0x08007add
 8007aa4:	08007ab1 	.word	0x08007ab1
 8007aa8:	08007abf 	.word	0x08007abf
 8007aac:	08007add 	.word	0x08007add
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ab0:	4b67      	ldr	r3, [pc, #412]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab4:	4a66      	ldr	r2, [pc, #408]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ab6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007aba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007abc:	e00f      	b.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ac2:	3308      	adds	r3, #8
 8007ac4:	2102      	movs	r1, #2
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f001 ffd4 	bl	8009a74 <RCCEx_PLL2_Config>
 8007acc:	4603      	mov	r3, r0
 8007ace:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007ad2:	e004      	b.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ada:	e000      	b.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007adc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ade:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d10a      	bne.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007ae6:	4b5a      	ldr	r3, [pc, #360]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007aea:	f023 0103 	bic.w	r1, r3, #3
 8007aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007af2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007af4:	4a56      	ldr	r2, [pc, #344]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007af6:	430b      	orrs	r3, r1
 8007af8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007afa:	e003      	b.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007afc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007b10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b14:	2300      	movs	r3, #0
 8007b16:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007b1a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007b1e:	460b      	mov	r3, r1
 8007b20:	4313      	orrs	r3, r2
 8007b22:	f000 809f 	beq.w	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b26:	4b4b      	ldr	r3, [pc, #300]	@ (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a4a      	ldr	r2, [pc, #296]	@ (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007b2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b32:	f7fc fb99 	bl	8004268 <HAL_GetTick>
 8007b36:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b3a:	e00b      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b3c:	f7fc fb94 	bl	8004268 <HAL_GetTick>
 8007b40:	4602      	mov	r2, r0
 8007b42:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007b46:	1ad3      	subs	r3, r2, r3
 8007b48:	2b64      	cmp	r3, #100	@ 0x64
 8007b4a:	d903      	bls.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b52:	e005      	b.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b54:	4b3f      	ldr	r3, [pc, #252]	@ (8007c54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d0ed      	beq.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007b60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d179      	bne.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007b68:	4b39      	ldr	r3, [pc, #228]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b6a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007b74:	4053      	eors	r3, r2
 8007b76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d015      	beq.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b7e:	4b34      	ldr	r3, [pc, #208]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b86:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b8a:	4b31      	ldr	r3, [pc, #196]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b8e:	4a30      	ldr	r2, [pc, #192]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b94:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b96:	4b2e      	ldr	r3, [pc, #184]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b9a:	4a2d      	ldr	r2, [pc, #180]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ba0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007ba2:	4a2b      	ldr	r2, [pc, #172]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ba4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007ba8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007bb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bb6:	d118      	bne.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bb8:	f7fc fb56 	bl	8004268 <HAL_GetTick>
 8007bbc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007bc0:	e00d      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bc2:	f7fc fb51 	bl	8004268 <HAL_GetTick>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007bcc:	1ad2      	subs	r2, r2, r3
 8007bce:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d903      	bls.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007bdc:	e005      	b.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007bde:	4b1c      	ldr	r3, [pc, #112]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007be2:	f003 0302 	and.w	r3, r3, #2
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d0eb      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007bea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d129      	bne.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bf6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007bfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bfe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c02:	d10e      	bne.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007c04:	4b12      	ldr	r3, [pc, #72]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007c14:	091a      	lsrs	r2, r3, #4
 8007c16:	4b10      	ldr	r3, [pc, #64]	@ (8007c58 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007c18:	4013      	ands	r3, r2
 8007c1a:	4a0d      	ldr	r2, [pc, #52]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c1c:	430b      	orrs	r3, r1
 8007c1e:	6113      	str	r3, [r2, #16]
 8007c20:	e005      	b.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007c22:	4b0b      	ldr	r3, [pc, #44]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	4a0a      	ldr	r2, [pc, #40]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c28:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007c2c:	6113      	str	r3, [r2, #16]
 8007c2e:	4b08      	ldr	r3, [pc, #32]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c30:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007c3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c3e:	4a04      	ldr	r2, [pc, #16]	@ (8007c50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c40:	430b      	orrs	r3, r1
 8007c42:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c44:	e00e      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007c4e:	e009      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007c50:	58024400 	.word	0x58024400
 8007c54:	58024800 	.word	0x58024800
 8007c58:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6c:	f002 0301 	and.w	r3, r2, #1
 8007c70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c74:	2300      	movs	r3, #0
 8007c76:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007c7a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007c7e:	460b      	mov	r3, r1
 8007c80:	4313      	orrs	r3, r2
 8007c82:	f000 8089 	beq.w	8007d98 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c8c:	2b28      	cmp	r3, #40	@ 0x28
 8007c8e:	d86b      	bhi.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007c90:	a201      	add	r2, pc, #4	@ (adr r2, 8007c98 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c96:	bf00      	nop
 8007c98:	08007d71 	.word	0x08007d71
 8007c9c:	08007d69 	.word	0x08007d69
 8007ca0:	08007d69 	.word	0x08007d69
 8007ca4:	08007d69 	.word	0x08007d69
 8007ca8:	08007d69 	.word	0x08007d69
 8007cac:	08007d69 	.word	0x08007d69
 8007cb0:	08007d69 	.word	0x08007d69
 8007cb4:	08007d69 	.word	0x08007d69
 8007cb8:	08007d3d 	.word	0x08007d3d
 8007cbc:	08007d69 	.word	0x08007d69
 8007cc0:	08007d69 	.word	0x08007d69
 8007cc4:	08007d69 	.word	0x08007d69
 8007cc8:	08007d69 	.word	0x08007d69
 8007ccc:	08007d69 	.word	0x08007d69
 8007cd0:	08007d69 	.word	0x08007d69
 8007cd4:	08007d69 	.word	0x08007d69
 8007cd8:	08007d53 	.word	0x08007d53
 8007cdc:	08007d69 	.word	0x08007d69
 8007ce0:	08007d69 	.word	0x08007d69
 8007ce4:	08007d69 	.word	0x08007d69
 8007ce8:	08007d69 	.word	0x08007d69
 8007cec:	08007d69 	.word	0x08007d69
 8007cf0:	08007d69 	.word	0x08007d69
 8007cf4:	08007d69 	.word	0x08007d69
 8007cf8:	08007d71 	.word	0x08007d71
 8007cfc:	08007d69 	.word	0x08007d69
 8007d00:	08007d69 	.word	0x08007d69
 8007d04:	08007d69 	.word	0x08007d69
 8007d08:	08007d69 	.word	0x08007d69
 8007d0c:	08007d69 	.word	0x08007d69
 8007d10:	08007d69 	.word	0x08007d69
 8007d14:	08007d69 	.word	0x08007d69
 8007d18:	08007d71 	.word	0x08007d71
 8007d1c:	08007d69 	.word	0x08007d69
 8007d20:	08007d69 	.word	0x08007d69
 8007d24:	08007d69 	.word	0x08007d69
 8007d28:	08007d69 	.word	0x08007d69
 8007d2c:	08007d69 	.word	0x08007d69
 8007d30:	08007d69 	.word	0x08007d69
 8007d34:	08007d69 	.word	0x08007d69
 8007d38:	08007d71 	.word	0x08007d71
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d40:	3308      	adds	r3, #8
 8007d42:	2101      	movs	r1, #1
 8007d44:	4618      	mov	r0, r3
 8007d46:	f001 fe95 	bl	8009a74 <RCCEx_PLL2_Config>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007d50:	e00f      	b.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d56:	3328      	adds	r3, #40	@ 0x28
 8007d58:	2101      	movs	r1, #1
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f001 ff3c 	bl	8009bd8 <RCCEx_PLL3_Config>
 8007d60:	4603      	mov	r3, r0
 8007d62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007d66:	e004      	b.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d6e:	e000      	b.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007d70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d10a      	bne.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007d7a:	4bbf      	ldr	r3, [pc, #764]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d7e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d88:	4abb      	ldr	r2, [pc, #748]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d8a:	430b      	orrs	r3, r1
 8007d8c:	6553      	str	r3, [r2, #84]	@ 0x54
 8007d8e:	e003      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da0:	f002 0302 	and.w	r3, r2, #2
 8007da4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007da8:	2300      	movs	r3, #0
 8007daa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007dae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007db2:	460b      	mov	r3, r1
 8007db4:	4313      	orrs	r3, r2
 8007db6:	d041      	beq.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007dbe:	2b05      	cmp	r3, #5
 8007dc0:	d824      	bhi.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8007dc8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc8:	08007e15 	.word	0x08007e15
 8007dcc:	08007de1 	.word	0x08007de1
 8007dd0:	08007df7 	.word	0x08007df7
 8007dd4:	08007e15 	.word	0x08007e15
 8007dd8:	08007e15 	.word	0x08007e15
 8007ddc:	08007e15 	.word	0x08007e15
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007de4:	3308      	adds	r3, #8
 8007de6:	2101      	movs	r1, #1
 8007de8:	4618      	mov	r0, r3
 8007dea:	f001 fe43 	bl	8009a74 <RCCEx_PLL2_Config>
 8007dee:	4603      	mov	r3, r0
 8007df0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007df4:	e00f      	b.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dfa:	3328      	adds	r3, #40	@ 0x28
 8007dfc:	2101      	movs	r1, #1
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f001 feea 	bl	8009bd8 <RCCEx_PLL3_Config>
 8007e04:	4603      	mov	r3, r0
 8007e06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007e0a:	e004      	b.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e12:	e000      	b.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007e14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d10a      	bne.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007e1e:	4b96      	ldr	r3, [pc, #600]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e22:	f023 0107 	bic.w	r1, r3, #7
 8007e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e2c:	4a92      	ldr	r2, [pc, #584]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e2e:	430b      	orrs	r3, r1
 8007e30:	6553      	str	r3, [r2, #84]	@ 0x54
 8007e32:	e003      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e44:	f002 0304 	and.w	r3, r2, #4
 8007e48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e52:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007e56:	460b      	mov	r3, r1
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	d044      	beq.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e64:	2b05      	cmp	r3, #5
 8007e66:	d825      	bhi.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007e68:	a201      	add	r2, pc, #4	@ (adr r2, 8007e70 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e6e:	bf00      	nop
 8007e70:	08007ebd 	.word	0x08007ebd
 8007e74:	08007e89 	.word	0x08007e89
 8007e78:	08007e9f 	.word	0x08007e9f
 8007e7c:	08007ebd 	.word	0x08007ebd
 8007e80:	08007ebd 	.word	0x08007ebd
 8007e84:	08007ebd 	.word	0x08007ebd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e8c:	3308      	adds	r3, #8
 8007e8e:	2101      	movs	r1, #1
 8007e90:	4618      	mov	r0, r3
 8007e92:	f001 fdef 	bl	8009a74 <RCCEx_PLL2_Config>
 8007e96:	4603      	mov	r3, r0
 8007e98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007e9c:	e00f      	b.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ea2:	3328      	adds	r3, #40	@ 0x28
 8007ea4:	2101      	movs	r1, #1
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f001 fe96 	bl	8009bd8 <RCCEx_PLL3_Config>
 8007eac:	4603      	mov	r3, r0
 8007eae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007eb2:	e004      	b.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007eba:	e000      	b.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007ebc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d10b      	bne.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007ec6:	4b6c      	ldr	r3, [pc, #432]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007eca:	f023 0107 	bic.w	r1, r3, #7
 8007ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ed6:	4a68      	ldr	r2, [pc, #416]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ed8:	430b      	orrs	r3, r1
 8007eda:	6593      	str	r3, [r2, #88]	@ 0x58
 8007edc:	e003      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ede:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ee2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eee:	f002 0320 	and.w	r3, r2, #32
 8007ef2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007efc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007f00:	460b      	mov	r3, r1
 8007f02:	4313      	orrs	r3, r2
 8007f04:	d055      	beq.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f12:	d033      	beq.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007f14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f18:	d82c      	bhi.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f1e:	d02f      	beq.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007f20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f24:	d826      	bhi.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007f26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007f2a:	d02b      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007f2c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007f30:	d820      	bhi.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007f32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f36:	d012      	beq.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007f38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f3c:	d81a      	bhi.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d022      	beq.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007f42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f46:	d115      	bne.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f4c:	3308      	adds	r3, #8
 8007f4e:	2100      	movs	r1, #0
 8007f50:	4618      	mov	r0, r3
 8007f52:	f001 fd8f 	bl	8009a74 <RCCEx_PLL2_Config>
 8007f56:	4603      	mov	r3, r0
 8007f58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007f5c:	e015      	b.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f62:	3328      	adds	r3, #40	@ 0x28
 8007f64:	2102      	movs	r1, #2
 8007f66:	4618      	mov	r0, r3
 8007f68:	f001 fe36 	bl	8009bd8 <RCCEx_PLL3_Config>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007f72:	e00a      	b.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f7a:	e006      	b.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f7c:	bf00      	nop
 8007f7e:	e004      	b.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f80:	bf00      	nop
 8007f82:	e002      	b.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f84:	bf00      	nop
 8007f86:	e000      	b.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d10b      	bne.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007f92:	4b39      	ldr	r3, [pc, #228]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f96:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fa2:	4a35      	ldr	r2, [pc, #212]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007fa4:	430b      	orrs	r3, r1
 8007fa6:	6553      	str	r3, [r2, #84]	@ 0x54
 8007fa8:	e003      	b.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007faa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fba:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007fbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007fc8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007fcc:	460b      	mov	r3, r1
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	d058      	beq.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007fda:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007fde:	d033      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007fe0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007fe4:	d82c      	bhi.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007fe6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fea:	d02f      	beq.n	800804c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007fec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ff0:	d826      	bhi.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007ff2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ff6:	d02b      	beq.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007ff8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ffc:	d820      	bhi.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007ffe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008002:	d012      	beq.n	800802a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008004:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008008:	d81a      	bhi.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800800a:	2b00      	cmp	r3, #0
 800800c:	d022      	beq.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800800e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008012:	d115      	bne.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008018:	3308      	adds	r3, #8
 800801a:	2100      	movs	r1, #0
 800801c:	4618      	mov	r0, r3
 800801e:	f001 fd29 	bl	8009a74 <RCCEx_PLL2_Config>
 8008022:	4603      	mov	r3, r0
 8008024:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008028:	e015      	b.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800802a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800802e:	3328      	adds	r3, #40	@ 0x28
 8008030:	2102      	movs	r1, #2
 8008032:	4618      	mov	r0, r3
 8008034:	f001 fdd0 	bl	8009bd8 <RCCEx_PLL3_Config>
 8008038:	4603      	mov	r3, r0
 800803a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800803e:	e00a      	b.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008046:	e006      	b.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008048:	bf00      	nop
 800804a:	e004      	b.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800804c:	bf00      	nop
 800804e:	e002      	b.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008050:	bf00      	nop
 8008052:	e000      	b.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008054:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008056:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800805a:	2b00      	cmp	r3, #0
 800805c:	d10e      	bne.n	800807c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800805e:	4b06      	ldr	r3, [pc, #24]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008062:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800806a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800806e:	4a02      	ldr	r2, [pc, #8]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008070:	430b      	orrs	r3, r1
 8008072:	6593      	str	r3, [r2, #88]	@ 0x58
 8008074:	e006      	b.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008076:	bf00      	nop
 8008078:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800807c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008080:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008090:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008094:	2300      	movs	r3, #0
 8008096:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800809a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800809e:	460b      	mov	r3, r1
 80080a0:	4313      	orrs	r3, r2
 80080a2:	d055      	beq.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80080a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80080ac:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80080b0:	d033      	beq.n	800811a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80080b2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80080b6:	d82c      	bhi.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80080b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080bc:	d02f      	beq.n	800811e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80080be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080c2:	d826      	bhi.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80080c4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80080c8:	d02b      	beq.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80080ca:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80080ce:	d820      	bhi.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80080d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080d4:	d012      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80080d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080da:	d81a      	bhi.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d022      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80080e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080e4:	d115      	bne.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ea:	3308      	adds	r3, #8
 80080ec:	2100      	movs	r1, #0
 80080ee:	4618      	mov	r0, r3
 80080f0:	f001 fcc0 	bl	8009a74 <RCCEx_PLL2_Config>
 80080f4:	4603      	mov	r3, r0
 80080f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80080fa:	e015      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008100:	3328      	adds	r3, #40	@ 0x28
 8008102:	2102      	movs	r1, #2
 8008104:	4618      	mov	r0, r3
 8008106:	f001 fd67 	bl	8009bd8 <RCCEx_PLL3_Config>
 800810a:	4603      	mov	r3, r0
 800810c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008110:	e00a      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008118:	e006      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800811a:	bf00      	nop
 800811c:	e004      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800811e:	bf00      	nop
 8008120:	e002      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008122:	bf00      	nop
 8008124:	e000      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008126:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008128:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800812c:	2b00      	cmp	r3, #0
 800812e:	d10b      	bne.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008130:	4ba1      	ldr	r3, [pc, #644]	@ (80083b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008134:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800813c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008140:	4a9d      	ldr	r2, [pc, #628]	@ (80083b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008142:	430b      	orrs	r3, r1
 8008144:	6593      	str	r3, [r2, #88]	@ 0x58
 8008146:	e003      	b.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008148:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800814c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008158:	f002 0308 	and.w	r3, r2, #8
 800815c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008160:	2300      	movs	r3, #0
 8008162:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008166:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800816a:	460b      	mov	r3, r1
 800816c:	4313      	orrs	r3, r2
 800816e:	d01e      	beq.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008174:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008178:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800817c:	d10c      	bne.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800817e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008182:	3328      	adds	r3, #40	@ 0x28
 8008184:	2102      	movs	r1, #2
 8008186:	4618      	mov	r0, r3
 8008188:	f001 fd26 	bl	8009bd8 <RCCEx_PLL3_Config>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d002      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008198:	4b87      	ldr	r3, [pc, #540]	@ (80083b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800819a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800819c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80081a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081a8:	4a83      	ldr	r2, [pc, #524]	@ (80083b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081aa:	430b      	orrs	r3, r1
 80081ac:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80081ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b6:	f002 0310 	and.w	r3, r2, #16
 80081ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80081be:	2300      	movs	r3, #0
 80081c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80081c4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80081c8:	460b      	mov	r3, r1
 80081ca:	4313      	orrs	r3, r2
 80081cc:	d01e      	beq.n	800820c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80081ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80081d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80081da:	d10c      	bne.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80081dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081e0:	3328      	adds	r3, #40	@ 0x28
 80081e2:	2102      	movs	r1, #2
 80081e4:	4618      	mov	r0, r3
 80081e6:	f001 fcf7 	bl	8009bd8 <RCCEx_PLL3_Config>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d002      	beq.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80081f6:	4b70      	ldr	r3, [pc, #448]	@ (80083b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80081fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008202:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008206:	4a6c      	ldr	r2, [pc, #432]	@ (80083b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008208:	430b      	orrs	r3, r1
 800820a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800820c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008214:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008218:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800821c:	2300      	movs	r3, #0
 800821e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008222:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008226:	460b      	mov	r3, r1
 8008228:	4313      	orrs	r3, r2
 800822a:	d03e      	beq.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800822c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008230:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008234:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008238:	d022      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800823a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800823e:	d81b      	bhi.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008240:	2b00      	cmp	r3, #0
 8008242:	d003      	beq.n	800824c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008248:	d00b      	beq.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800824a:	e015      	b.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800824c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008250:	3308      	adds	r3, #8
 8008252:	2100      	movs	r1, #0
 8008254:	4618      	mov	r0, r3
 8008256:	f001 fc0d 	bl	8009a74 <RCCEx_PLL2_Config>
 800825a:	4603      	mov	r3, r0
 800825c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008260:	e00f      	b.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008266:	3328      	adds	r3, #40	@ 0x28
 8008268:	2102      	movs	r1, #2
 800826a:	4618      	mov	r0, r3
 800826c:	f001 fcb4 	bl	8009bd8 <RCCEx_PLL3_Config>
 8008270:	4603      	mov	r3, r0
 8008272:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008276:	e004      	b.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800827e:	e000      	b.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008282:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008286:	2b00      	cmp	r3, #0
 8008288:	d10b      	bne.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800828a:	4b4b      	ldr	r3, [pc, #300]	@ (80083b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800828c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800828e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008296:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800829a:	4a47      	ldr	r2, [pc, #284]	@ (80083b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800829c:	430b      	orrs	r3, r1
 800829e:	6593      	str	r3, [r2, #88]	@ 0x58
 80082a0:	e003      	b.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80082aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80082b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80082b8:	2300      	movs	r3, #0
 80082ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80082bc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80082c0:	460b      	mov	r3, r1
 80082c2:	4313      	orrs	r3, r2
 80082c4:	d03b      	beq.n	800833e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80082c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80082d2:	d01f      	beq.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80082d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80082d8:	d818      	bhi.n	800830c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80082da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082de:	d003      	beq.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80082e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80082e4:	d007      	beq.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80082e6:	e011      	b.n	800830c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082e8:	4b33      	ldr	r3, [pc, #204]	@ (80083b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ec:	4a32      	ldr	r2, [pc, #200]	@ (80083b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80082f4:	e00f      	b.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082fa:	3328      	adds	r3, #40	@ 0x28
 80082fc:	2101      	movs	r1, #1
 80082fe:	4618      	mov	r0, r3
 8008300:	f001 fc6a 	bl	8009bd8 <RCCEx_PLL3_Config>
 8008304:	4603      	mov	r3, r0
 8008306:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800830a:	e004      	b.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008312:	e000      	b.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008314:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008316:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800831a:	2b00      	cmp	r3, #0
 800831c:	d10b      	bne.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800831e:	4b26      	ldr	r3, [pc, #152]	@ (80083b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008322:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800832a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800832e:	4a22      	ldr	r2, [pc, #136]	@ (80083b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008330:	430b      	orrs	r3, r1
 8008332:	6553      	str	r3, [r2, #84]	@ 0x54
 8008334:	e003      	b.n	800833e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008336:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800833a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800833e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008346:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800834a:	673b      	str	r3, [r7, #112]	@ 0x70
 800834c:	2300      	movs	r3, #0
 800834e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008350:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008354:	460b      	mov	r3, r1
 8008356:	4313      	orrs	r3, r2
 8008358:	d034      	beq.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800835a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800835e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008360:	2b00      	cmp	r3, #0
 8008362:	d003      	beq.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008364:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008368:	d007      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800836a:	e011      	b.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800836c:	4b12      	ldr	r3, [pc, #72]	@ (80083b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800836e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008370:	4a11      	ldr	r2, [pc, #68]	@ (80083b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008372:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008376:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008378:	e00e      	b.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800837a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800837e:	3308      	adds	r3, #8
 8008380:	2102      	movs	r1, #2
 8008382:	4618      	mov	r0, r3
 8008384:	f001 fb76 	bl	8009a74 <RCCEx_PLL2_Config>
 8008388:	4603      	mov	r3, r0
 800838a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800838e:	e003      	b.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008396:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008398:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800839c:	2b00      	cmp	r3, #0
 800839e:	d10d      	bne.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80083a0:	4b05      	ldr	r3, [pc, #20]	@ (80083b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083a4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80083a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083ae:	4a02      	ldr	r2, [pc, #8]	@ (80083b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083b0:	430b      	orrs	r3, r1
 80083b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80083b4:	e006      	b.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80083b6:	bf00      	nop
 80083b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80083c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083cc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80083d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80083d2:	2300      	movs	r3, #0
 80083d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80083d6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80083da:	460b      	mov	r3, r1
 80083dc:	4313      	orrs	r3, r2
 80083de:	d00c      	beq.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80083e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083e4:	3328      	adds	r3, #40	@ 0x28
 80083e6:	2102      	movs	r1, #2
 80083e8:	4618      	mov	r0, r3
 80083ea:	f001 fbf5 	bl	8009bd8 <RCCEx_PLL3_Config>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d002      	beq.n	80083fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80083fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008402:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008406:	663b      	str	r3, [r7, #96]	@ 0x60
 8008408:	2300      	movs	r3, #0
 800840a:	667b      	str	r3, [r7, #100]	@ 0x64
 800840c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008410:	460b      	mov	r3, r1
 8008412:	4313      	orrs	r3, r2
 8008414:	d038      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800841a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800841e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008422:	d018      	beq.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008424:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008428:	d811      	bhi.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800842a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800842e:	d014      	beq.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008430:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008434:	d80b      	bhi.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008436:	2b00      	cmp	r3, #0
 8008438:	d011      	beq.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800843a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800843e:	d106      	bne.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008440:	4bc3      	ldr	r3, [pc, #780]	@ (8008750 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008444:	4ac2      	ldr	r2, [pc, #776]	@ (8008750 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008446:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800844a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800844c:	e008      	b.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008454:	e004      	b.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008456:	bf00      	nop
 8008458:	e002      	b.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800845a:	bf00      	nop
 800845c:	e000      	b.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800845e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008460:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008464:	2b00      	cmp	r3, #0
 8008466:	d10b      	bne.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008468:	4bb9      	ldr	r3, [pc, #740]	@ (8008750 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800846a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800846c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008474:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008478:	4ab5      	ldr	r2, [pc, #724]	@ (8008750 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800847a:	430b      	orrs	r3, r1
 800847c:	6553      	str	r3, [r2, #84]	@ 0x54
 800847e:	e003      	b.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008480:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008484:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800848c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008490:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008494:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008496:	2300      	movs	r3, #0
 8008498:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800849a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800849e:	460b      	mov	r3, r1
 80084a0:	4313      	orrs	r3, r2
 80084a2:	d009      	beq.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80084a4:	4baa      	ldr	r3, [pc, #680]	@ (8008750 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80084ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084b2:	4aa7      	ldr	r2, [pc, #668]	@ (8008750 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084b4:	430b      	orrs	r3, r1
 80084b6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80084b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80084c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80084c6:	2300      	movs	r3, #0
 80084c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80084ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80084ce:	460b      	mov	r3, r1
 80084d0:	4313      	orrs	r3, r2
 80084d2:	d00a      	beq.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80084d4:	4b9e      	ldr	r3, [pc, #632]	@ (8008750 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80084dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80084e4:	4a9a      	ldr	r2, [pc, #616]	@ (8008750 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084e6:	430b      	orrs	r3, r1
 80084e8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80084ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80084f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084f8:	2300      	movs	r3, #0
 80084fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084fc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008500:	460b      	mov	r3, r1
 8008502:	4313      	orrs	r3, r2
 8008504:	d009      	beq.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008506:	4b92      	ldr	r3, [pc, #584]	@ (8008750 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008508:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800850a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800850e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008512:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008514:	4a8e      	ldr	r2, [pc, #568]	@ (8008750 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008516:	430b      	orrs	r3, r1
 8008518:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800851a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800851e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008522:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008526:	643b      	str	r3, [r7, #64]	@ 0x40
 8008528:	2300      	movs	r3, #0
 800852a:	647b      	str	r3, [r7, #68]	@ 0x44
 800852c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008530:	460b      	mov	r3, r1
 8008532:	4313      	orrs	r3, r2
 8008534:	d00e      	beq.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008536:	4b86      	ldr	r3, [pc, #536]	@ (8008750 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	4a85      	ldr	r2, [pc, #532]	@ (8008750 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800853c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008540:	6113      	str	r3, [r2, #16]
 8008542:	4b83      	ldr	r3, [pc, #524]	@ (8008750 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008544:	6919      	ldr	r1, [r3, #16]
 8008546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800854a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800854e:	4a80      	ldr	r2, [pc, #512]	@ (8008750 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008550:	430b      	orrs	r3, r1
 8008552:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008560:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008562:	2300      	movs	r3, #0
 8008564:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008566:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800856a:	460b      	mov	r3, r1
 800856c:	4313      	orrs	r3, r2
 800856e:	d009      	beq.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008570:	4b77      	ldr	r3, [pc, #476]	@ (8008750 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008574:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800857c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800857e:	4a74      	ldr	r2, [pc, #464]	@ (8008750 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008580:	430b      	orrs	r3, r1
 8008582:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008590:	633b      	str	r3, [r7, #48]	@ 0x30
 8008592:	2300      	movs	r3, #0
 8008594:	637b      	str	r3, [r7, #52]	@ 0x34
 8008596:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800859a:	460b      	mov	r3, r1
 800859c:	4313      	orrs	r3, r2
 800859e:	d00a      	beq.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80085a0:	4b6b      	ldr	r3, [pc, #428]	@ (8008750 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085a4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80085a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085b0:	4a67      	ldr	r2, [pc, #412]	@ (8008750 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085b2:	430b      	orrs	r3, r1
 80085b4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80085b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085be:	2100      	movs	r1, #0
 80085c0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80085c2:	f003 0301 	and.w	r3, r3, #1
 80085c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80085c8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80085cc:	460b      	mov	r3, r1
 80085ce:	4313      	orrs	r3, r2
 80085d0:	d011      	beq.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085d6:	3308      	adds	r3, #8
 80085d8:	2100      	movs	r1, #0
 80085da:	4618      	mov	r0, r3
 80085dc:	f001 fa4a 	bl	8009a74 <RCCEx_PLL2_Config>
 80085e0:	4603      	mov	r3, r0
 80085e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80085e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d003      	beq.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80085f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fe:	2100      	movs	r1, #0
 8008600:	6239      	str	r1, [r7, #32]
 8008602:	f003 0302 	and.w	r3, r3, #2
 8008606:	627b      	str	r3, [r7, #36]	@ 0x24
 8008608:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800860c:	460b      	mov	r3, r1
 800860e:	4313      	orrs	r3, r2
 8008610:	d011      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008616:	3308      	adds	r3, #8
 8008618:	2101      	movs	r1, #1
 800861a:	4618      	mov	r0, r3
 800861c:	f001 fa2a 	bl	8009a74 <RCCEx_PLL2_Config>
 8008620:	4603      	mov	r3, r0
 8008622:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008626:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800862a:	2b00      	cmp	r3, #0
 800862c:	d003      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800862e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008632:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800863a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863e:	2100      	movs	r1, #0
 8008640:	61b9      	str	r1, [r7, #24]
 8008642:	f003 0304 	and.w	r3, r3, #4
 8008646:	61fb      	str	r3, [r7, #28]
 8008648:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800864c:	460b      	mov	r3, r1
 800864e:	4313      	orrs	r3, r2
 8008650:	d011      	beq.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008656:	3308      	adds	r3, #8
 8008658:	2102      	movs	r1, #2
 800865a:	4618      	mov	r0, r3
 800865c:	f001 fa0a 	bl	8009a74 <RCCEx_PLL2_Config>
 8008660:	4603      	mov	r3, r0
 8008662:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008666:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800866a:	2b00      	cmp	r3, #0
 800866c:	d003      	beq.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800866e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008672:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800867a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867e:	2100      	movs	r1, #0
 8008680:	6139      	str	r1, [r7, #16]
 8008682:	f003 0308 	and.w	r3, r3, #8
 8008686:	617b      	str	r3, [r7, #20]
 8008688:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800868c:	460b      	mov	r3, r1
 800868e:	4313      	orrs	r3, r2
 8008690:	d011      	beq.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008696:	3328      	adds	r3, #40	@ 0x28
 8008698:	2100      	movs	r1, #0
 800869a:	4618      	mov	r0, r3
 800869c:	f001 fa9c 	bl	8009bd8 <RCCEx_PLL3_Config>
 80086a0:	4603      	mov	r3, r0
 80086a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80086a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d003      	beq.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80086b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086be:	2100      	movs	r1, #0
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	f003 0310 	and.w	r3, r3, #16
 80086c6:	60fb      	str	r3, [r7, #12]
 80086c8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80086cc:	460b      	mov	r3, r1
 80086ce:	4313      	orrs	r3, r2
 80086d0:	d011      	beq.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086d6:	3328      	adds	r3, #40	@ 0x28
 80086d8:	2101      	movs	r1, #1
 80086da:	4618      	mov	r0, r3
 80086dc:	f001 fa7c 	bl	8009bd8 <RCCEx_PLL3_Config>
 80086e0:	4603      	mov	r3, r0
 80086e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80086e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d003      	beq.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80086f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fe:	2100      	movs	r1, #0
 8008700:	6039      	str	r1, [r7, #0]
 8008702:	f003 0320 	and.w	r3, r3, #32
 8008706:	607b      	str	r3, [r7, #4]
 8008708:	e9d7 1200 	ldrd	r1, r2, [r7]
 800870c:	460b      	mov	r3, r1
 800870e:	4313      	orrs	r3, r2
 8008710:	d011      	beq.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008716:	3328      	adds	r3, #40	@ 0x28
 8008718:	2102      	movs	r1, #2
 800871a:	4618      	mov	r0, r3
 800871c:	f001 fa5c 	bl	8009bd8 <RCCEx_PLL3_Config>
 8008720:	4603      	mov	r3, r0
 8008722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008726:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800872a:	2b00      	cmp	r3, #0
 800872c:	d003      	beq.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800872e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008732:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008736:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800873a:	2b00      	cmp	r3, #0
 800873c:	d101      	bne.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800873e:	2300      	movs	r3, #0
 8008740:	e000      	b.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008742:	2301      	movs	r3, #1
}
 8008744:	4618      	mov	r0, r3
 8008746:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800874a:	46bd      	mov	sp, r7
 800874c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008750:	58024400 	.word	0x58024400

08008754 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b090      	sub	sp, #64	@ 0x40
 8008758:	af00      	add	r7, sp, #0
 800875a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800875e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008762:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008766:	430b      	orrs	r3, r1
 8008768:	f040 8094 	bne.w	8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800876c:	4b9e      	ldr	r3, [pc, #632]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800876e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008770:	f003 0307 	and.w	r3, r3, #7
 8008774:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008778:	2b04      	cmp	r3, #4
 800877a:	f200 8087 	bhi.w	800888c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800877e:	a201      	add	r2, pc, #4	@ (adr r2, 8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008784:	08008799 	.word	0x08008799
 8008788:	080087c1 	.word	0x080087c1
 800878c:	080087e9 	.word	0x080087e9
 8008790:	08008885 	.word	0x08008885
 8008794:	08008811 	.word	0x08008811
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008798:	4b93      	ldr	r3, [pc, #588]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80087a4:	d108      	bne.n	80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087aa:	4618      	mov	r0, r3
 80087ac:	f001 f810 	bl	80097d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80087b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087b4:	f000 bd45 	b.w	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087b8:	2300      	movs	r3, #0
 80087ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087bc:	f000 bd41 	b.w	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087c0:	4b89      	ldr	r3, [pc, #548]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087cc:	d108      	bne.n	80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087ce:	f107 0318 	add.w	r3, r7, #24
 80087d2:	4618      	mov	r0, r3
 80087d4:	f000 fd54 	bl	8009280 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087dc:	f000 bd31 	b.w	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087e0:	2300      	movs	r3, #0
 80087e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087e4:	f000 bd2d 	b.w	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087e8:	4b7f      	ldr	r3, [pc, #508]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80087f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087f4:	d108      	bne.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087f6:	f107 030c 	add.w	r3, r7, #12
 80087fa:	4618      	mov	r0, r3
 80087fc:	f000 fe94 	bl	8009528 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008804:	f000 bd1d 	b.w	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008808:	2300      	movs	r3, #0
 800880a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800880c:	f000 bd19 	b.w	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008810:	4b75      	ldr	r3, [pc, #468]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008814:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008818:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800881a:	4b73      	ldr	r3, [pc, #460]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f003 0304 	and.w	r3, r3, #4
 8008822:	2b04      	cmp	r3, #4
 8008824:	d10c      	bne.n	8008840 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008828:	2b00      	cmp	r3, #0
 800882a:	d109      	bne.n	8008840 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800882c:	4b6e      	ldr	r3, [pc, #440]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	08db      	lsrs	r3, r3, #3
 8008832:	f003 0303 	and.w	r3, r3, #3
 8008836:	4a6d      	ldr	r2, [pc, #436]	@ (80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008838:	fa22 f303 	lsr.w	r3, r2, r3
 800883c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800883e:	e01f      	b.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008840:	4b69      	ldr	r3, [pc, #420]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008848:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800884c:	d106      	bne.n	800885c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800884e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008850:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008854:	d102      	bne.n	800885c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008856:	4b66      	ldr	r3, [pc, #408]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008858:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800885a:	e011      	b.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800885c:	4b62      	ldr	r3, [pc, #392]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008864:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008868:	d106      	bne.n	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800886a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800886c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008870:	d102      	bne.n	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008872:	4b60      	ldr	r3, [pc, #384]	@ (80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008874:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008876:	e003      	b.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008878:	2300      	movs	r3, #0
 800887a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800887c:	f000 bce1 	b.w	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008880:	f000 bcdf 	b.w	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008884:	4b5c      	ldr	r3, [pc, #368]	@ (80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008888:	f000 bcdb 	b.w	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800888c:	2300      	movs	r3, #0
 800888e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008890:	f000 bcd7 	b.w	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008894:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008898:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800889c:	430b      	orrs	r3, r1
 800889e:	f040 80ad 	bne.w	80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80088a2:	4b51      	ldr	r3, [pc, #324]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80088a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088a6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80088aa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80088ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088b2:	d056      	beq.n	8008962 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80088b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088ba:	f200 8090 	bhi.w	80089de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80088be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c0:	2bc0      	cmp	r3, #192	@ 0xc0
 80088c2:	f000 8088 	beq.w	80089d6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80088c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c8:	2bc0      	cmp	r3, #192	@ 0xc0
 80088ca:	f200 8088 	bhi.w	80089de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80088ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d0:	2b80      	cmp	r3, #128	@ 0x80
 80088d2:	d032      	beq.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80088d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d6:	2b80      	cmp	r3, #128	@ 0x80
 80088d8:	f200 8081 	bhi.w	80089de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80088dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d003      	beq.n	80088ea <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80088e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e4:	2b40      	cmp	r3, #64	@ 0x40
 80088e6:	d014      	beq.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80088e8:	e079      	b.n	80089de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80088ea:	4b3f      	ldr	r3, [pc, #252]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80088f6:	d108      	bne.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80088fc:	4618      	mov	r0, r3
 80088fe:	f000 ff67 	bl	80097d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008906:	f000 bc9c 	b.w	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800890a:	2300      	movs	r3, #0
 800890c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800890e:	f000 bc98 	b.w	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008912:	4b35      	ldr	r3, [pc, #212]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800891a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800891e:	d108      	bne.n	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008920:	f107 0318 	add.w	r3, r7, #24
 8008924:	4618      	mov	r0, r3
 8008926:	f000 fcab 	bl	8009280 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800892e:	f000 bc88 	b.w	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008932:	2300      	movs	r3, #0
 8008934:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008936:	f000 bc84 	b.w	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800893a:	4b2b      	ldr	r3, [pc, #172]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008942:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008946:	d108      	bne.n	800895a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008948:	f107 030c 	add.w	r3, r7, #12
 800894c:	4618      	mov	r0, r3
 800894e:	f000 fdeb 	bl	8009528 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008956:	f000 bc74 	b.w	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800895a:	2300      	movs	r3, #0
 800895c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800895e:	f000 bc70 	b.w	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008962:	4b21      	ldr	r3, [pc, #132]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008966:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800896a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800896c:	4b1e      	ldr	r3, [pc, #120]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f003 0304 	and.w	r3, r3, #4
 8008974:	2b04      	cmp	r3, #4
 8008976:	d10c      	bne.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800897a:	2b00      	cmp	r3, #0
 800897c:	d109      	bne.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800897e:	4b1a      	ldr	r3, [pc, #104]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	08db      	lsrs	r3, r3, #3
 8008984:	f003 0303 	and.w	r3, r3, #3
 8008988:	4a18      	ldr	r2, [pc, #96]	@ (80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800898a:	fa22 f303 	lsr.w	r3, r2, r3
 800898e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008990:	e01f      	b.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008992:	4b15      	ldr	r3, [pc, #84]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800899a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800899e:	d106      	bne.n	80089ae <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80089a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089a6:	d102      	bne.n	80089ae <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80089a8:	4b11      	ldr	r3, [pc, #68]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80089aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089ac:	e011      	b.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80089ae:	4b0e      	ldr	r3, [pc, #56]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089ba:	d106      	bne.n	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80089bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089c2:	d102      	bne.n	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80089c4:	4b0b      	ldr	r3, [pc, #44]	@ (80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80089c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089c8:	e003      	b.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80089ca:	2300      	movs	r3, #0
 80089cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80089ce:	f000 bc38 	b.w	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80089d2:	f000 bc36 	b.w	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80089d6:	4b08      	ldr	r3, [pc, #32]	@ (80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80089d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089da:	f000 bc32 	b.w	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80089de:	2300      	movs	r3, #0
 80089e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089e2:	f000 bc2e 	b.w	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80089e6:	bf00      	nop
 80089e8:	58024400 	.word	0x58024400
 80089ec:	03d09000 	.word	0x03d09000
 80089f0:	003d0900 	.word	0x003d0900
 80089f4:	017d7840 	.word	0x017d7840
 80089f8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80089fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a00:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008a04:	430b      	orrs	r3, r1
 8008a06:	f040 809c 	bne.w	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008a0a:	4b9e      	ldr	r3, [pc, #632]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a0e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008a12:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a16:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008a1a:	d054      	beq.n	8008ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008a22:	f200 808b 	bhi.w	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a28:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008a2c:	f000 8083 	beq.w	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a32:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008a36:	f200 8081 	bhi.w	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a40:	d02f      	beq.n	8008aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a48:	d878      	bhi.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d004      	beq.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008a56:	d012      	beq.n	8008a7e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008a58:	e070      	b.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a5a:	4b8a      	ldr	r3, [pc, #552]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a66:	d107      	bne.n	8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f000 feaf 	bl	80097d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a76:	e3e4      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a7c:	e3e1      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a7e:	4b81      	ldr	r3, [pc, #516]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a8a:	d107      	bne.n	8008a9c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a8c:	f107 0318 	add.w	r3, r7, #24
 8008a90:	4618      	mov	r0, r3
 8008a92:	f000 fbf5 	bl	8009280 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a96:	69bb      	ldr	r3, [r7, #24]
 8008a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a9a:	e3d2      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aa0:	e3cf      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008aa2:	4b78      	ldr	r3, [pc, #480]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008aaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008aae:	d107      	bne.n	8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ab0:	f107 030c 	add.w	r3, r7, #12
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f000 fd37 	bl	8009528 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008abe:	e3c0      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ac4:	e3bd      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ac6:	4b6f      	ldr	r3, [pc, #444]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008aca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008ace:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ad0:	4b6c      	ldr	r3, [pc, #432]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 0304 	and.w	r3, r3, #4
 8008ad8:	2b04      	cmp	r3, #4
 8008ada:	d10c      	bne.n	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d109      	bne.n	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ae2:	4b68      	ldr	r3, [pc, #416]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	08db      	lsrs	r3, r3, #3
 8008ae8:	f003 0303 	and.w	r3, r3, #3
 8008aec:	4a66      	ldr	r2, [pc, #408]	@ (8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008aee:	fa22 f303 	lsr.w	r3, r2, r3
 8008af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008af4:	e01e      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008af6:	4b63      	ldr	r3, [pc, #396]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008afe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b02:	d106      	bne.n	8008b12 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b0a:	d102      	bne.n	8008b12 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008b0c:	4b5f      	ldr	r3, [pc, #380]	@ (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b10:	e010      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b12:	4b5c      	ldr	r3, [pc, #368]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b1e:	d106      	bne.n	8008b2e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b26:	d102      	bne.n	8008b2e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008b28:	4b59      	ldr	r3, [pc, #356]	@ (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b2c:	e002      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008b32:	e386      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008b34:	e385      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008b36:	4b57      	ldr	r3, [pc, #348]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b3a:	e382      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b40:	e37f      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008b42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b46:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008b4a:	430b      	orrs	r3, r1
 8008b4c:	f040 80a7 	bne.w	8008c9e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008b50:	4b4c      	ldr	r3, [pc, #304]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b54:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008b58:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008b60:	d055      	beq.n	8008c0e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008b68:	f200 8096 	bhi.w	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b6e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008b72:	f000 8084 	beq.w	8008c7e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b78:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008b7c:	f200 808c 	bhi.w	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b86:	d030      	beq.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b8e:	f200 8083 	bhi.w	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d004      	beq.n	8008ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b9e:	d012      	beq.n	8008bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008ba0:	e07a      	b.n	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ba2:	4b38      	ldr	r3, [pc, #224]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008baa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008bae:	d107      	bne.n	8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008bb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f000 fe0b 	bl	80097d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bbe:	e340      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bc4:	e33d      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bc6:	4b2f      	ldr	r3, [pc, #188]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008bce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bd2:	d107      	bne.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bd4:	f107 0318 	add.w	r3, r7, #24
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f000 fb51 	bl	8009280 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008be2:	e32e      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008be4:	2300      	movs	r3, #0
 8008be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008be8:	e32b      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bea:	4b26      	ldr	r3, [pc, #152]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bf6:	d107      	bne.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bf8:	f107 030c 	add.w	r3, r7, #12
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f000 fc93 	bl	8009528 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c06:	e31c      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c0c:	e319      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c12:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008c16:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c18:	4b1a      	ldr	r3, [pc, #104]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f003 0304 	and.w	r3, r3, #4
 8008c20:	2b04      	cmp	r3, #4
 8008c22:	d10c      	bne.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d109      	bne.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c2a:	4b16      	ldr	r3, [pc, #88]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	08db      	lsrs	r3, r3, #3
 8008c30:	f003 0303 	and.w	r3, r3, #3
 8008c34:	4a14      	ldr	r2, [pc, #80]	@ (8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008c36:	fa22 f303 	lsr.w	r3, r2, r3
 8008c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c3c:	e01e      	b.n	8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c3e:	4b11      	ldr	r3, [pc, #68]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c4a:	d106      	bne.n	8008c5a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c52:	d102      	bne.n	8008c5a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008c54:	4b0d      	ldr	r3, [pc, #52]	@ (8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c58:	e010      	b.n	8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c66:	d106      	bne.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c6e:	d102      	bne.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008c70:	4b07      	ldr	r3, [pc, #28]	@ (8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c74:	e002      	b.n	8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008c76:	2300      	movs	r3, #0
 8008c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008c7a:	e2e2      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c7c:	e2e1      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008c7e:	4b05      	ldr	r3, [pc, #20]	@ (8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c82:	e2de      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c84:	58024400 	.word	0x58024400
 8008c88:	03d09000 	.word	0x03d09000
 8008c8c:	003d0900 	.word	0x003d0900
 8008c90:	017d7840 	.word	0x017d7840
 8008c94:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c9c:	e2d1      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008c9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ca2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008ca6:	430b      	orrs	r3, r1
 8008ca8:	f040 809c 	bne.w	8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008cac:	4b93      	ldr	r3, [pc, #588]	@ (8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008cae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cb0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008cb4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008cbc:	d054      	beq.n	8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008cc4:	f200 808b 	bhi.w	8008dde <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008cce:	f000 8083 	beq.w	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008cd8:	f200 8081 	bhi.w	8008dde <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ce2:	d02f      	beq.n	8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008cea:	d878      	bhi.n	8008dde <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d004      	beq.n	8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cf4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cf8:	d012      	beq.n	8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008cfa:	e070      	b.n	8008dde <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008cfc:	4b7f      	ldr	r3, [pc, #508]	@ (8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d08:	d107      	bne.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f000 fd5e 	bl	80097d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d18:	e293      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d1e:	e290      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d20:	4b76      	ldr	r3, [pc, #472]	@ (8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d2c:	d107      	bne.n	8008d3e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d2e:	f107 0318 	add.w	r3, r7, #24
 8008d32:	4618      	mov	r0, r3
 8008d34:	f000 faa4 	bl	8009280 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d38:	69bb      	ldr	r3, [r7, #24]
 8008d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d3c:	e281      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d42:	e27e      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d44:	4b6d      	ldr	r3, [pc, #436]	@ (8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d50:	d107      	bne.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d52:	f107 030c 	add.w	r3, r7, #12
 8008d56:	4618      	mov	r0, r3
 8008d58:	f000 fbe6 	bl	8009528 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d60:	e26f      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d62:	2300      	movs	r3, #0
 8008d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d66:	e26c      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d68:	4b64      	ldr	r3, [pc, #400]	@ (8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d6c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008d70:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d72:	4b62      	ldr	r3, [pc, #392]	@ (8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f003 0304 	and.w	r3, r3, #4
 8008d7a:	2b04      	cmp	r3, #4
 8008d7c:	d10c      	bne.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d109      	bne.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d84:	4b5d      	ldr	r3, [pc, #372]	@ (8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	08db      	lsrs	r3, r3, #3
 8008d8a:	f003 0303 	and.w	r3, r3, #3
 8008d8e:	4a5c      	ldr	r2, [pc, #368]	@ (8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008d90:	fa22 f303 	lsr.w	r3, r2, r3
 8008d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d96:	e01e      	b.n	8008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d98:	4b58      	ldr	r3, [pc, #352]	@ (8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008da0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008da4:	d106      	bne.n	8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008da8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008dac:	d102      	bne.n	8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008dae:	4b55      	ldr	r3, [pc, #340]	@ (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008db2:	e010      	b.n	8008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008db4:	4b51      	ldr	r3, [pc, #324]	@ (8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008dc0:	d106      	bne.n	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008dc8:	d102      	bne.n	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008dca:	4b4f      	ldr	r3, [pc, #316]	@ (8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008dce:	e002      	b.n	8008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008dd4:	e235      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008dd6:	e234      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008dd8:	4b4c      	ldr	r3, [pc, #304]	@ (8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ddc:	e231      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008dde:	2300      	movs	r3, #0
 8008de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008de2:	e22e      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008de4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008de8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008dec:	430b      	orrs	r3, r1
 8008dee:	f040 808f 	bne.w	8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008df2:	4b42      	ldr	r3, [pc, #264]	@ (8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008df4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008df6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dfe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008e02:	d06b      	beq.n	8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e06:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008e0a:	d874      	bhi.n	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e0e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008e12:	d056      	beq.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e16:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008e1a:	d86c      	bhi.n	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e1e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008e22:	d03b      	beq.n	8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e26:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008e2a:	d864      	bhi.n	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e32:	d021      	beq.n	8008e78 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e3a:	d85c      	bhi.n	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d004      	beq.n	8008e4c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e48:	d004      	beq.n	8008e54 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008e4a:	e054      	b.n	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008e4c:	f7fe fa4c 	bl	80072e8 <HAL_RCC_GetPCLK1Freq>
 8008e50:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008e52:	e1f6      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e54:	4b29      	ldr	r3, [pc, #164]	@ (8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e60:	d107      	bne.n	8008e72 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e62:	f107 0318 	add.w	r3, r7, #24
 8008e66:	4618      	mov	r0, r3
 8008e68:	f000 fa0a 	bl	8009280 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e70:	e1e7      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e72:	2300      	movs	r3, #0
 8008e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e76:	e1e4      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e78:	4b20      	ldr	r3, [pc, #128]	@ (8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e84:	d107      	bne.n	8008e96 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e86:	f107 030c 	add.w	r3, r7, #12
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f000 fb4c 	bl	8009528 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e94:	e1d5      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e96:	2300      	movs	r3, #0
 8008e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e9a:	e1d2      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e9c:	4b17      	ldr	r3, [pc, #92]	@ (8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f003 0304 	and.w	r3, r3, #4
 8008ea4:	2b04      	cmp	r3, #4
 8008ea6:	d109      	bne.n	8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ea8:	4b14      	ldr	r3, [pc, #80]	@ (8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	08db      	lsrs	r3, r3, #3
 8008eae:	f003 0303 	and.w	r3, r3, #3
 8008eb2:	4a13      	ldr	r2, [pc, #76]	@ (8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8008eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008eba:	e1c2      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ec0:	e1bf      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008eca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ece:	d102      	bne.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ed4:	e1b5      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eda:	e1b2      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008edc:	4b07      	ldr	r3, [pc, #28]	@ (8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ee4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ee8:	d102      	bne.n	8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008eea:	4b07      	ldr	r3, [pc, #28]	@ (8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008eee:	e1a8      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ef4:	e1a5      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008efa:	e1a2      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008efc:	58024400 	.word	0x58024400
 8008f00:	03d09000 	.word	0x03d09000
 8008f04:	003d0900 	.word	0x003d0900
 8008f08:	017d7840 	.word	0x017d7840
 8008f0c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008f10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f14:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008f18:	430b      	orrs	r3, r1
 8008f1a:	d173      	bne.n	8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008f1c:	4b9c      	ldr	r3, [pc, #624]	@ (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008f24:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f2c:	d02f      	beq.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f34:	d863      	bhi.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d004      	beq.n	8008f46 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f42:	d012      	beq.n	8008f6a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008f44:	e05b      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f46:	4b92      	ldr	r3, [pc, #584]	@ (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f52:	d107      	bne.n	8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f54:	f107 0318 	add.w	r3, r7, #24
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f000 f991 	bl	8009280 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f62:	e16e      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f64:	2300      	movs	r3, #0
 8008f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f68:	e16b      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f6a:	4b89      	ldr	r3, [pc, #548]	@ (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f76:	d107      	bne.n	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f78:	f107 030c 	add.w	r3, r7, #12
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f000 fad3 	bl	8009528 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f86:	e15c      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f8c:	e159      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f8e:	4b80      	ldr	r3, [pc, #512]	@ (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f92:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008f96:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f98:	4b7d      	ldr	r3, [pc, #500]	@ (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 0304 	and.w	r3, r3, #4
 8008fa0:	2b04      	cmp	r3, #4
 8008fa2:	d10c      	bne.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d109      	bne.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008faa:	4b79      	ldr	r3, [pc, #484]	@ (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	08db      	lsrs	r3, r3, #3
 8008fb0:	f003 0303 	and.w	r3, r3, #3
 8008fb4:	4a77      	ldr	r2, [pc, #476]	@ (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8008fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fbc:	e01e      	b.n	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008fbe:	4b74      	ldr	r3, [pc, #464]	@ (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fca:	d106      	bne.n	8008fda <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008fd2:	d102      	bne.n	8008fda <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008fd4:	4b70      	ldr	r3, [pc, #448]	@ (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fd8:	e010      	b.n	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008fda:	4b6d      	ldr	r3, [pc, #436]	@ (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fe2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008fe6:	d106      	bne.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fee:	d102      	bne.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008ff0:	4b6a      	ldr	r3, [pc, #424]	@ (800919c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ff4:	e002      	b.n	8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008ffa:	e122      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008ffc:	e121      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008ffe:	2300      	movs	r3, #0
 8009000:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009002:	e11e      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009004:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009008:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800900c:	430b      	orrs	r3, r1
 800900e:	d133      	bne.n	8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009010:	4b5f      	ldr	r3, [pc, #380]	@ (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009014:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009018:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800901a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800901c:	2b00      	cmp	r3, #0
 800901e:	d004      	beq.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009022:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009026:	d012      	beq.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009028:	e023      	b.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800902a:	4b59      	ldr	r3, [pc, #356]	@ (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009032:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009036:	d107      	bne.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009038:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800903c:	4618      	mov	r0, r3
 800903e:	f000 fbc7 	bl	80097d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009044:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009046:	e0fc      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009048:	2300      	movs	r3, #0
 800904a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800904c:	e0f9      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800904e:	4b50      	ldr	r3, [pc, #320]	@ (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009056:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800905a:	d107      	bne.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800905c:	f107 0318 	add.w	r3, r7, #24
 8009060:	4618      	mov	r0, r3
 8009062:	f000 f90d 	bl	8009280 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009066:	6a3b      	ldr	r3, [r7, #32]
 8009068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800906a:	e0ea      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800906c:	2300      	movs	r3, #0
 800906e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009070:	e0e7      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009072:	2300      	movs	r3, #0
 8009074:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009076:	e0e4      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009078:	e9d7 2300 	ldrd	r2, r3, [r7]
 800907c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009080:	430b      	orrs	r3, r1
 8009082:	f040 808d 	bne.w	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009086:	4b42      	ldr	r3, [pc, #264]	@ (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800908a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800908e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009092:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009096:	d06b      	beq.n	8009170 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800909a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800909e:	d874      	bhi.n	800918a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80090a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090a6:	d056      	beq.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80090a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090ae:	d86c      	bhi.n	800918a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80090b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80090b6:	d03b      	beq.n	8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80090b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80090be:	d864      	bhi.n	800918a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80090c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090c6:	d021      	beq.n	800910c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80090c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090ce:	d85c      	bhi.n	800918a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80090d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d004      	beq.n	80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80090d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090dc:	d004      	beq.n	80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80090de:	e054      	b.n	800918a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80090e0:	f000 f8b8 	bl	8009254 <HAL_RCCEx_GetD3PCLK1Freq>
 80090e4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80090e6:	e0ac      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090e8:	4b29      	ldr	r3, [pc, #164]	@ (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80090f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80090f4:	d107      	bne.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090f6:	f107 0318 	add.w	r3, r7, #24
 80090fa:	4618      	mov	r0, r3
 80090fc:	f000 f8c0 	bl	8009280 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009100:	69fb      	ldr	r3, [r7, #28]
 8009102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009104:	e09d      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009106:	2300      	movs	r3, #0
 8009108:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800910a:	e09a      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800910c:	4b20      	ldr	r3, [pc, #128]	@ (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009114:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009118:	d107      	bne.n	800912a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800911a:	f107 030c 	add.w	r3, r7, #12
 800911e:	4618      	mov	r0, r3
 8009120:	f000 fa02 	bl	8009528 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009128:	e08b      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800912a:	2300      	movs	r3, #0
 800912c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800912e:	e088      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009130:	4b17      	ldr	r3, [pc, #92]	@ (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f003 0304 	and.w	r3, r3, #4
 8009138:	2b04      	cmp	r3, #4
 800913a:	d109      	bne.n	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800913c:	4b14      	ldr	r3, [pc, #80]	@ (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	08db      	lsrs	r3, r3, #3
 8009142:	f003 0303 	and.w	r3, r3, #3
 8009146:	4a13      	ldr	r2, [pc, #76]	@ (8009194 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009148:	fa22 f303 	lsr.w	r3, r2, r3
 800914c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800914e:	e078      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009150:	2300      	movs	r3, #0
 8009152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009154:	e075      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009156:	4b0e      	ldr	r3, [pc, #56]	@ (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800915e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009162:	d102      	bne.n	800916a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009164:	4b0c      	ldr	r3, [pc, #48]	@ (8009198 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009168:	e06b      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800916a:	2300      	movs	r3, #0
 800916c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800916e:	e068      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009170:	4b07      	ldr	r3, [pc, #28]	@ (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009178:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800917c:	d102      	bne.n	8009184 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800917e:	4b07      	ldr	r3, [pc, #28]	@ (800919c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009180:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009182:	e05e      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009184:	2300      	movs	r3, #0
 8009186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009188:	e05b      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800918a:	2300      	movs	r3, #0
 800918c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800918e:	e058      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009190:	58024400 	.word	0x58024400
 8009194:	03d09000 	.word	0x03d09000
 8009198:	003d0900 	.word	0x003d0900
 800919c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80091a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091a4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80091a8:	430b      	orrs	r3, r1
 80091aa:	d148      	bne.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80091ac:	4b27      	ldr	r3, [pc, #156]	@ (800924c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80091ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80091b4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80091b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091bc:	d02a      	beq.n	8009214 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80091be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091c4:	d838      	bhi.n	8009238 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80091c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d004      	beq.n	80091d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80091cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80091d2:	d00d      	beq.n	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80091d4:	e030      	b.n	8009238 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80091d6:	4b1d      	ldr	r3, [pc, #116]	@ (800924c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091e2:	d102      	bne.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80091e4:	4b1a      	ldr	r3, [pc, #104]	@ (8009250 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80091e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091e8:	e02b      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091ea:	2300      	movs	r3, #0
 80091ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091ee:	e028      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091f0:	4b16      	ldr	r3, [pc, #88]	@ (800924c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80091f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80091fc:	d107      	bne.n	800920e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009202:	4618      	mov	r0, r3
 8009204:	f000 fae4 	bl	80097d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800920a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800920c:	e019      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800920e:	2300      	movs	r3, #0
 8009210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009212:	e016      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009214:	4b0d      	ldr	r3, [pc, #52]	@ (800924c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800921c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009220:	d107      	bne.n	8009232 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009222:	f107 0318 	add.w	r3, r7, #24
 8009226:	4618      	mov	r0, r3
 8009228:	f000 f82a 	bl	8009280 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009230:	e007      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009232:	2300      	movs	r3, #0
 8009234:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009236:	e004      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009238:	2300      	movs	r3, #0
 800923a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800923c:	e001      	b.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800923e:	2300      	movs	r3, #0
 8009240:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009244:	4618      	mov	r0, r3
 8009246:	3740      	adds	r7, #64	@ 0x40
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}
 800924c:	58024400 	.word	0x58024400
 8009250:	017d7840 	.word	0x017d7840

08009254 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009258:	f7fe f816 	bl	8007288 <HAL_RCC_GetHCLKFreq>
 800925c:	4602      	mov	r2, r0
 800925e:	4b06      	ldr	r3, [pc, #24]	@ (8009278 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009260:	6a1b      	ldr	r3, [r3, #32]
 8009262:	091b      	lsrs	r3, r3, #4
 8009264:	f003 0307 	and.w	r3, r3, #7
 8009268:	4904      	ldr	r1, [pc, #16]	@ (800927c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800926a:	5ccb      	ldrb	r3, [r1, r3]
 800926c:	f003 031f 	and.w	r3, r3, #31
 8009270:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009274:	4618      	mov	r0, r3
 8009276:	bd80      	pop	{r7, pc}
 8009278:	58024400 	.word	0x58024400
 800927c:	08011c50 	.word	0x08011c50

08009280 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009280:	b480      	push	{r7}
 8009282:	b089      	sub	sp, #36	@ 0x24
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009288:	4ba1      	ldr	r3, [pc, #644]	@ (8009510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800928a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800928c:	f003 0303 	and.w	r3, r3, #3
 8009290:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009292:	4b9f      	ldr	r3, [pc, #636]	@ (8009510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009296:	0b1b      	lsrs	r3, r3, #12
 8009298:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800929c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800929e:	4b9c      	ldr	r3, [pc, #624]	@ (8009510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092a2:	091b      	lsrs	r3, r3, #4
 80092a4:	f003 0301 	and.w	r3, r3, #1
 80092a8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80092aa:	4b99      	ldr	r3, [pc, #612]	@ (8009510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092ae:	08db      	lsrs	r3, r3, #3
 80092b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80092b4:	693a      	ldr	r2, [r7, #16]
 80092b6:	fb02 f303 	mul.w	r3, r2, r3
 80092ba:	ee07 3a90 	vmov	s15, r3
 80092be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	f000 8111 	beq.w	80094f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	2b02      	cmp	r3, #2
 80092d2:	f000 8083 	beq.w	80093dc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	2b02      	cmp	r3, #2
 80092da:	f200 80a1 	bhi.w	8009420 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d003      	beq.n	80092ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80092e4:	69bb      	ldr	r3, [r7, #24]
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d056      	beq.n	8009398 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80092ea:	e099      	b.n	8009420 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092ec:	4b88      	ldr	r3, [pc, #544]	@ (8009510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f003 0320 	and.w	r3, r3, #32
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d02d      	beq.n	8009354 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092f8:	4b85      	ldr	r3, [pc, #532]	@ (8009510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	08db      	lsrs	r3, r3, #3
 80092fe:	f003 0303 	and.w	r3, r3, #3
 8009302:	4a84      	ldr	r2, [pc, #528]	@ (8009514 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009304:	fa22 f303 	lsr.w	r3, r2, r3
 8009308:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	ee07 3a90 	vmov	s15, r3
 8009310:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	ee07 3a90 	vmov	s15, r3
 800931a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800931e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009322:	4b7b      	ldr	r3, [pc, #492]	@ (8009510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800932a:	ee07 3a90 	vmov	s15, r3
 800932e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009332:	ed97 6a03 	vldr	s12, [r7, #12]
 8009336:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800933a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800933e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009342:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800934a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800934e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009352:	e087      	b.n	8009464 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	ee07 3a90 	vmov	s15, r3
 800935a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800935e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800951c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009366:	4b6a      	ldr	r3, [pc, #424]	@ (8009510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800936a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800936e:	ee07 3a90 	vmov	s15, r3
 8009372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009376:	ed97 6a03 	vldr	s12, [r7, #12]
 800937a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800937e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009386:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800938a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800938e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009392:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009396:	e065      	b.n	8009464 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	ee07 3a90 	vmov	s15, r3
 800939e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093a2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80093a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093aa:	4b59      	ldr	r3, [pc, #356]	@ (8009510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093b2:	ee07 3a90 	vmov	s15, r3
 80093b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80093be:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093da:	e043      	b.n	8009464 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	ee07 3a90 	vmov	s15, r3
 80093e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093e6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009524 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80093ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093ee:	4b48      	ldr	r3, [pc, #288]	@ (8009510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093f6:	ee07 3a90 	vmov	s15, r3
 80093fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009402:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800940a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800940e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800941a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800941e:	e021      	b.n	8009464 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	ee07 3a90 	vmov	s15, r3
 8009426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800942a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800942e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009432:	4b37      	ldr	r3, [pc, #220]	@ (8009510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800943a:	ee07 3a90 	vmov	s15, r3
 800943e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009442:	ed97 6a03 	vldr	s12, [r7, #12]
 8009446:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800944a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800944e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009452:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800945a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800945e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009462:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009464:	4b2a      	ldr	r3, [pc, #168]	@ (8009510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009468:	0a5b      	lsrs	r3, r3, #9
 800946a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800946e:	ee07 3a90 	vmov	s15, r3
 8009472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009476:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800947a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800947e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009482:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009486:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800948a:	ee17 2a90 	vmov	r2, s15
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009492:	4b1f      	ldr	r3, [pc, #124]	@ (8009510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009496:	0c1b      	lsrs	r3, r3, #16
 8009498:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800949c:	ee07 3a90 	vmov	s15, r3
 80094a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80094b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094b8:	ee17 2a90 	vmov	r2, s15
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80094c0:	4b13      	ldr	r3, [pc, #76]	@ (8009510 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094c4:	0e1b      	lsrs	r3, r3, #24
 80094c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094ca:	ee07 3a90 	vmov	s15, r3
 80094ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094da:	edd7 6a07 	vldr	s13, [r7, #28]
 80094de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094e6:	ee17 2a90 	vmov	r2, s15
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80094ee:	e008      	b.n	8009502 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2200      	movs	r2, #0
 80094f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	609a      	str	r2, [r3, #8]
}
 8009502:	bf00      	nop
 8009504:	3724      	adds	r7, #36	@ 0x24
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	58024400 	.word	0x58024400
 8009514:	03d09000 	.word	0x03d09000
 8009518:	46000000 	.word	0x46000000
 800951c:	4c742400 	.word	0x4c742400
 8009520:	4a742400 	.word	0x4a742400
 8009524:	4bbebc20 	.word	0x4bbebc20

08009528 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009528:	b480      	push	{r7}
 800952a:	b089      	sub	sp, #36	@ 0x24
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009530:	4ba1      	ldr	r3, [pc, #644]	@ (80097b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009534:	f003 0303 	and.w	r3, r3, #3
 8009538:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800953a:	4b9f      	ldr	r3, [pc, #636]	@ (80097b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800953c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800953e:	0d1b      	lsrs	r3, r3, #20
 8009540:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009544:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009546:	4b9c      	ldr	r3, [pc, #624]	@ (80097b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800954a:	0a1b      	lsrs	r3, r3, #8
 800954c:	f003 0301 	and.w	r3, r3, #1
 8009550:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009552:	4b99      	ldr	r3, [pc, #612]	@ (80097b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009556:	08db      	lsrs	r3, r3, #3
 8009558:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800955c:	693a      	ldr	r2, [r7, #16]
 800955e:	fb02 f303 	mul.w	r3, r2, r3
 8009562:	ee07 3a90 	vmov	s15, r3
 8009566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800956a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	2b00      	cmp	r3, #0
 8009572:	f000 8111 	beq.w	8009798 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	2b02      	cmp	r3, #2
 800957a:	f000 8083 	beq.w	8009684 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800957e:	69bb      	ldr	r3, [r7, #24]
 8009580:	2b02      	cmp	r3, #2
 8009582:	f200 80a1 	bhi.w	80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d003      	beq.n	8009594 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800958c:	69bb      	ldr	r3, [r7, #24]
 800958e:	2b01      	cmp	r3, #1
 8009590:	d056      	beq.n	8009640 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009592:	e099      	b.n	80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009594:	4b88      	ldr	r3, [pc, #544]	@ (80097b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f003 0320 	and.w	r3, r3, #32
 800959c:	2b00      	cmp	r3, #0
 800959e:	d02d      	beq.n	80095fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095a0:	4b85      	ldr	r3, [pc, #532]	@ (80097b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	08db      	lsrs	r3, r3, #3
 80095a6:	f003 0303 	and.w	r3, r3, #3
 80095aa:	4a84      	ldr	r2, [pc, #528]	@ (80097bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80095ac:	fa22 f303 	lsr.w	r3, r2, r3
 80095b0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	ee07 3a90 	vmov	s15, r3
 80095b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	ee07 3a90 	vmov	s15, r3
 80095c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095ca:	4b7b      	ldr	r3, [pc, #492]	@ (80097b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095d2:	ee07 3a90 	vmov	s15, r3
 80095d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095da:	ed97 6a03 	vldr	s12, [r7, #12]
 80095de:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80095fa:	e087      	b.n	800970c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	ee07 3a90 	vmov	s15, r3
 8009602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009606:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80097c4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800960a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800960e:	4b6a      	ldr	r3, [pc, #424]	@ (80097b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009616:	ee07 3a90 	vmov	s15, r3
 800961a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800961e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009622:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800962a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800962e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800963a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800963e:	e065      	b.n	800970c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	ee07 3a90 	vmov	s15, r3
 8009646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800964a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800964e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009652:	4b59      	ldr	r3, [pc, #356]	@ (80097b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800965a:	ee07 3a90 	vmov	s15, r3
 800965e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009662:	ed97 6a03 	vldr	s12, [r7, #12]
 8009666:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800966a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800966e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009672:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800967a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800967e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009682:	e043      	b.n	800970c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	ee07 3a90 	vmov	s15, r3
 800968a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800968e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80097cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009696:	4b48      	ldr	r3, [pc, #288]	@ (80097b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800969a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800969e:	ee07 3a90 	vmov	s15, r3
 80096a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80096aa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096c6:	e021      	b.n	800970c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	ee07 3a90 	vmov	s15, r3
 80096ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096d2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80096d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096da:	4b37      	ldr	r3, [pc, #220]	@ (80097b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096e2:	ee07 3a90 	vmov	s15, r3
 80096e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80096ee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009706:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800970a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800970c:	4b2a      	ldr	r3, [pc, #168]	@ (80097b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800970e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009710:	0a5b      	lsrs	r3, r3, #9
 8009712:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009716:	ee07 3a90 	vmov	s15, r3
 800971a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800971e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009722:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009726:	edd7 6a07 	vldr	s13, [r7, #28]
 800972a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800972e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009732:	ee17 2a90 	vmov	r2, s15
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800973a:	4b1f      	ldr	r3, [pc, #124]	@ (80097b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800973c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800973e:	0c1b      	lsrs	r3, r3, #16
 8009740:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009744:	ee07 3a90 	vmov	s15, r3
 8009748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800974c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009750:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009754:	edd7 6a07 	vldr	s13, [r7, #28]
 8009758:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800975c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009760:	ee17 2a90 	vmov	r2, s15
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009768:	4b13      	ldr	r3, [pc, #76]	@ (80097b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800976a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800976c:	0e1b      	lsrs	r3, r3, #24
 800976e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009772:	ee07 3a90 	vmov	s15, r3
 8009776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800977a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800977e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009782:	edd7 6a07 	vldr	s13, [r7, #28]
 8009786:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800978a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800978e:	ee17 2a90 	vmov	r2, s15
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009796:	e008      	b.n	80097aa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2200      	movs	r2, #0
 80097a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	609a      	str	r2, [r3, #8]
}
 80097aa:	bf00      	nop
 80097ac:	3724      	adds	r7, #36	@ 0x24
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr
 80097b6:	bf00      	nop
 80097b8:	58024400 	.word	0x58024400
 80097bc:	03d09000 	.word	0x03d09000
 80097c0:	46000000 	.word	0x46000000
 80097c4:	4c742400 	.word	0x4c742400
 80097c8:	4a742400 	.word	0x4a742400
 80097cc:	4bbebc20 	.word	0x4bbebc20

080097d0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b089      	sub	sp, #36	@ 0x24
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097d8:	4ba0      	ldr	r3, [pc, #640]	@ (8009a5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097dc:	f003 0303 	and.w	r3, r3, #3
 80097e0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80097e2:	4b9e      	ldr	r3, [pc, #632]	@ (8009a5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097e6:	091b      	lsrs	r3, r3, #4
 80097e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80097ec:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80097ee:	4b9b      	ldr	r3, [pc, #620]	@ (8009a5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097f2:	f003 0301 	and.w	r3, r3, #1
 80097f6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80097f8:	4b98      	ldr	r3, [pc, #608]	@ (8009a5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097fc:	08db      	lsrs	r3, r3, #3
 80097fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009802:	693a      	ldr	r2, [r7, #16]
 8009804:	fb02 f303 	mul.w	r3, r2, r3
 8009808:	ee07 3a90 	vmov	s15, r3
 800980c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009810:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	2b00      	cmp	r3, #0
 8009818:	f000 8111 	beq.w	8009a3e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800981c:	69bb      	ldr	r3, [r7, #24]
 800981e:	2b02      	cmp	r3, #2
 8009820:	f000 8083 	beq.w	800992a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	2b02      	cmp	r3, #2
 8009828:	f200 80a1 	bhi.w	800996e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d003      	beq.n	800983a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009832:	69bb      	ldr	r3, [r7, #24]
 8009834:	2b01      	cmp	r3, #1
 8009836:	d056      	beq.n	80098e6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009838:	e099      	b.n	800996e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800983a:	4b88      	ldr	r3, [pc, #544]	@ (8009a5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f003 0320 	and.w	r3, r3, #32
 8009842:	2b00      	cmp	r3, #0
 8009844:	d02d      	beq.n	80098a2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009846:	4b85      	ldr	r3, [pc, #532]	@ (8009a5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	08db      	lsrs	r3, r3, #3
 800984c:	f003 0303 	and.w	r3, r3, #3
 8009850:	4a83      	ldr	r2, [pc, #524]	@ (8009a60 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009852:	fa22 f303 	lsr.w	r3, r2, r3
 8009856:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	ee07 3a90 	vmov	s15, r3
 800985e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	ee07 3a90 	vmov	s15, r3
 8009868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800986c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009870:	4b7a      	ldr	r3, [pc, #488]	@ (8009a5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009878:	ee07 3a90 	vmov	s15, r3
 800987c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009880:	ed97 6a03 	vldr	s12, [r7, #12]
 8009884:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009a64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009888:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800988c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009890:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009894:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800989c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80098a0:	e087      	b.n	80099b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	ee07 3a90 	vmov	s15, r3
 80098a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098ac:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009a68 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80098b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098b4:	4b69      	ldr	r3, [pc, #420]	@ (8009a5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098bc:	ee07 3a90 	vmov	s15, r3
 80098c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80098c8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009a64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80098cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098e4:	e065      	b.n	80099b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	ee07 3a90 	vmov	s15, r3
 80098ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098f0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009a6c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80098f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098f8:	4b58      	ldr	r3, [pc, #352]	@ (8009a5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009900:	ee07 3a90 	vmov	s15, r3
 8009904:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009908:	ed97 6a03 	vldr	s12, [r7, #12]
 800990c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009a64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009910:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009914:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009918:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800991c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009920:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009924:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009928:	e043      	b.n	80099b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	ee07 3a90 	vmov	s15, r3
 8009930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009934:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009a70 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009938:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800993c:	4b47      	ldr	r3, [pc, #284]	@ (8009a5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800993e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009944:	ee07 3a90 	vmov	s15, r3
 8009948:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800994c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009950:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009a64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009954:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009958:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800995c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009960:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009968:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800996c:	e021      	b.n	80099b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	ee07 3a90 	vmov	s15, r3
 8009974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009978:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009a68 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800997c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009980:	4b36      	ldr	r3, [pc, #216]	@ (8009a5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009988:	ee07 3a90 	vmov	s15, r3
 800998c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009990:	ed97 6a03 	vldr	s12, [r7, #12]
 8009994:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009a64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009998:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800999c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80099a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099b0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80099b2:	4b2a      	ldr	r3, [pc, #168]	@ (8009a5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099b6:	0a5b      	lsrs	r3, r3, #9
 80099b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099bc:	ee07 3a90 	vmov	s15, r3
 80099c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80099c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80099d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099d8:	ee17 2a90 	vmov	r2, s15
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80099e0:	4b1e      	ldr	r3, [pc, #120]	@ (8009a5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099e4:	0c1b      	lsrs	r3, r3, #16
 80099e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099ea:	ee07 3a90 	vmov	s15, r3
 80099ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80099f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80099fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a06:	ee17 2a90 	vmov	r2, s15
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009a0e:	4b13      	ldr	r3, [pc, #76]	@ (8009a5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a12:	0e1b      	lsrs	r3, r3, #24
 8009a14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a18:	ee07 3a90 	vmov	s15, r3
 8009a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009a24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a28:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a34:	ee17 2a90 	vmov	r2, s15
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009a3c:	e008      	b.n	8009a50 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2200      	movs	r2, #0
 8009a42:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	609a      	str	r2, [r3, #8]
}
 8009a50:	bf00      	nop
 8009a52:	3724      	adds	r7, #36	@ 0x24
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr
 8009a5c:	58024400 	.word	0x58024400
 8009a60:	03d09000 	.word	0x03d09000
 8009a64:	46000000 	.word	0x46000000
 8009a68:	4c742400 	.word	0x4c742400
 8009a6c:	4a742400 	.word	0x4a742400
 8009a70:	4bbebc20 	.word	0x4bbebc20

08009a74 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a82:	4b53      	ldr	r3, [pc, #332]	@ (8009bd0 <RCCEx_PLL2_Config+0x15c>)
 8009a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a86:	f003 0303 	and.w	r3, r3, #3
 8009a8a:	2b03      	cmp	r3, #3
 8009a8c:	d101      	bne.n	8009a92 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e099      	b.n	8009bc6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009a92:	4b4f      	ldr	r3, [pc, #316]	@ (8009bd0 <RCCEx_PLL2_Config+0x15c>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a4e      	ldr	r2, [pc, #312]	@ (8009bd0 <RCCEx_PLL2_Config+0x15c>)
 8009a98:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009a9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a9e:	f7fa fbe3 	bl	8004268 <HAL_GetTick>
 8009aa2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009aa4:	e008      	b.n	8009ab8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009aa6:	f7fa fbdf 	bl	8004268 <HAL_GetTick>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	1ad3      	subs	r3, r2, r3
 8009ab0:	2b02      	cmp	r3, #2
 8009ab2:	d901      	bls.n	8009ab8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009ab4:	2303      	movs	r3, #3
 8009ab6:	e086      	b.n	8009bc6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009ab8:	4b45      	ldr	r3, [pc, #276]	@ (8009bd0 <RCCEx_PLL2_Config+0x15c>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d1f0      	bne.n	8009aa6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009ac4:	4b42      	ldr	r3, [pc, #264]	@ (8009bd0 <RCCEx_PLL2_Config+0x15c>)
 8009ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ac8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	031b      	lsls	r3, r3, #12
 8009ad2:	493f      	ldr	r1, [pc, #252]	@ (8009bd0 <RCCEx_PLL2_Config+0x15c>)
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	628b      	str	r3, [r1, #40]	@ 0x28
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	3b01      	subs	r3, #1
 8009ade:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	689b      	ldr	r3, [r3, #8]
 8009ae6:	3b01      	subs	r3, #1
 8009ae8:	025b      	lsls	r3, r3, #9
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	431a      	orrs	r2, r3
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	68db      	ldr	r3, [r3, #12]
 8009af2:	3b01      	subs	r3, #1
 8009af4:	041b      	lsls	r3, r3, #16
 8009af6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009afa:	431a      	orrs	r2, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	691b      	ldr	r3, [r3, #16]
 8009b00:	3b01      	subs	r3, #1
 8009b02:	061b      	lsls	r3, r3, #24
 8009b04:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009b08:	4931      	ldr	r1, [pc, #196]	@ (8009bd0 <RCCEx_PLL2_Config+0x15c>)
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009b0e:	4b30      	ldr	r3, [pc, #192]	@ (8009bd0 <RCCEx_PLL2_Config+0x15c>)
 8009b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b12:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	695b      	ldr	r3, [r3, #20]
 8009b1a:	492d      	ldr	r1, [pc, #180]	@ (8009bd0 <RCCEx_PLL2_Config+0x15c>)
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009b20:	4b2b      	ldr	r3, [pc, #172]	@ (8009bd0 <RCCEx_PLL2_Config+0x15c>)
 8009b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b24:	f023 0220 	bic.w	r2, r3, #32
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	699b      	ldr	r3, [r3, #24]
 8009b2c:	4928      	ldr	r1, [pc, #160]	@ (8009bd0 <RCCEx_PLL2_Config+0x15c>)
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009b32:	4b27      	ldr	r3, [pc, #156]	@ (8009bd0 <RCCEx_PLL2_Config+0x15c>)
 8009b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b36:	4a26      	ldr	r2, [pc, #152]	@ (8009bd0 <RCCEx_PLL2_Config+0x15c>)
 8009b38:	f023 0310 	bic.w	r3, r3, #16
 8009b3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009b3e:	4b24      	ldr	r3, [pc, #144]	@ (8009bd0 <RCCEx_PLL2_Config+0x15c>)
 8009b40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009b42:	4b24      	ldr	r3, [pc, #144]	@ (8009bd4 <RCCEx_PLL2_Config+0x160>)
 8009b44:	4013      	ands	r3, r2
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	69d2      	ldr	r2, [r2, #28]
 8009b4a:	00d2      	lsls	r2, r2, #3
 8009b4c:	4920      	ldr	r1, [pc, #128]	@ (8009bd0 <RCCEx_PLL2_Config+0x15c>)
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009b52:	4b1f      	ldr	r3, [pc, #124]	@ (8009bd0 <RCCEx_PLL2_Config+0x15c>)
 8009b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b56:	4a1e      	ldr	r2, [pc, #120]	@ (8009bd0 <RCCEx_PLL2_Config+0x15c>)
 8009b58:	f043 0310 	orr.w	r3, r3, #16
 8009b5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d106      	bne.n	8009b72 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009b64:	4b1a      	ldr	r3, [pc, #104]	@ (8009bd0 <RCCEx_PLL2_Config+0x15c>)
 8009b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b68:	4a19      	ldr	r2, [pc, #100]	@ (8009bd0 <RCCEx_PLL2_Config+0x15c>)
 8009b6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009b6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009b70:	e00f      	b.n	8009b92 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d106      	bne.n	8009b86 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009b78:	4b15      	ldr	r3, [pc, #84]	@ (8009bd0 <RCCEx_PLL2_Config+0x15c>)
 8009b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b7c:	4a14      	ldr	r2, [pc, #80]	@ (8009bd0 <RCCEx_PLL2_Config+0x15c>)
 8009b7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009b82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009b84:	e005      	b.n	8009b92 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009b86:	4b12      	ldr	r3, [pc, #72]	@ (8009bd0 <RCCEx_PLL2_Config+0x15c>)
 8009b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b8a:	4a11      	ldr	r2, [pc, #68]	@ (8009bd0 <RCCEx_PLL2_Config+0x15c>)
 8009b8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009b90:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009b92:	4b0f      	ldr	r3, [pc, #60]	@ (8009bd0 <RCCEx_PLL2_Config+0x15c>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a0e      	ldr	r2, [pc, #56]	@ (8009bd0 <RCCEx_PLL2_Config+0x15c>)
 8009b98:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009b9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b9e:	f7fa fb63 	bl	8004268 <HAL_GetTick>
 8009ba2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ba4:	e008      	b.n	8009bb8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009ba6:	f7fa fb5f 	bl	8004268 <HAL_GetTick>
 8009baa:	4602      	mov	r2, r0
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	1ad3      	subs	r3, r2, r3
 8009bb0:	2b02      	cmp	r3, #2
 8009bb2:	d901      	bls.n	8009bb8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009bb4:	2303      	movs	r3, #3
 8009bb6:	e006      	b.n	8009bc6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009bb8:	4b05      	ldr	r3, [pc, #20]	@ (8009bd0 <RCCEx_PLL2_Config+0x15c>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d0f0      	beq.n	8009ba6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3710      	adds	r7, #16
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
 8009bce:	bf00      	nop
 8009bd0:	58024400 	.word	0x58024400
 8009bd4:	ffff0007 	.word	0xffff0007

08009bd8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009be2:	2300      	movs	r3, #0
 8009be4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009be6:	4b53      	ldr	r3, [pc, #332]	@ (8009d34 <RCCEx_PLL3_Config+0x15c>)
 8009be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bea:	f003 0303 	and.w	r3, r3, #3
 8009bee:	2b03      	cmp	r3, #3
 8009bf0:	d101      	bne.n	8009bf6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	e099      	b.n	8009d2a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009bf6:	4b4f      	ldr	r3, [pc, #316]	@ (8009d34 <RCCEx_PLL3_Config+0x15c>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a4e      	ldr	r2, [pc, #312]	@ (8009d34 <RCCEx_PLL3_Config+0x15c>)
 8009bfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009c00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c02:	f7fa fb31 	bl	8004268 <HAL_GetTick>
 8009c06:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009c08:	e008      	b.n	8009c1c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009c0a:	f7fa fb2d 	bl	8004268 <HAL_GetTick>
 8009c0e:	4602      	mov	r2, r0
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	1ad3      	subs	r3, r2, r3
 8009c14:	2b02      	cmp	r3, #2
 8009c16:	d901      	bls.n	8009c1c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009c18:	2303      	movs	r3, #3
 8009c1a:	e086      	b.n	8009d2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009c1c:	4b45      	ldr	r3, [pc, #276]	@ (8009d34 <RCCEx_PLL3_Config+0x15c>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d1f0      	bne.n	8009c0a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009c28:	4b42      	ldr	r3, [pc, #264]	@ (8009d34 <RCCEx_PLL3_Config+0x15c>)
 8009c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c2c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	051b      	lsls	r3, r3, #20
 8009c36:	493f      	ldr	r1, [pc, #252]	@ (8009d34 <RCCEx_PLL3_Config+0x15c>)
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	628b      	str	r3, [r1, #40]	@ 0x28
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	3b01      	subs	r3, #1
 8009c42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	689b      	ldr	r3, [r3, #8]
 8009c4a:	3b01      	subs	r3, #1
 8009c4c:	025b      	lsls	r3, r3, #9
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	431a      	orrs	r2, r3
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	68db      	ldr	r3, [r3, #12]
 8009c56:	3b01      	subs	r3, #1
 8009c58:	041b      	lsls	r3, r3, #16
 8009c5a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009c5e:	431a      	orrs	r2, r3
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	691b      	ldr	r3, [r3, #16]
 8009c64:	3b01      	subs	r3, #1
 8009c66:	061b      	lsls	r3, r3, #24
 8009c68:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009c6c:	4931      	ldr	r1, [pc, #196]	@ (8009d34 <RCCEx_PLL3_Config+0x15c>)
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009c72:	4b30      	ldr	r3, [pc, #192]	@ (8009d34 <RCCEx_PLL3_Config+0x15c>)
 8009c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c76:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	695b      	ldr	r3, [r3, #20]
 8009c7e:	492d      	ldr	r1, [pc, #180]	@ (8009d34 <RCCEx_PLL3_Config+0x15c>)
 8009c80:	4313      	orrs	r3, r2
 8009c82:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009c84:	4b2b      	ldr	r3, [pc, #172]	@ (8009d34 <RCCEx_PLL3_Config+0x15c>)
 8009c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c88:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	699b      	ldr	r3, [r3, #24]
 8009c90:	4928      	ldr	r1, [pc, #160]	@ (8009d34 <RCCEx_PLL3_Config+0x15c>)
 8009c92:	4313      	orrs	r3, r2
 8009c94:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009c96:	4b27      	ldr	r3, [pc, #156]	@ (8009d34 <RCCEx_PLL3_Config+0x15c>)
 8009c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c9a:	4a26      	ldr	r2, [pc, #152]	@ (8009d34 <RCCEx_PLL3_Config+0x15c>)
 8009c9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ca0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009ca2:	4b24      	ldr	r3, [pc, #144]	@ (8009d34 <RCCEx_PLL3_Config+0x15c>)
 8009ca4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009ca6:	4b24      	ldr	r3, [pc, #144]	@ (8009d38 <RCCEx_PLL3_Config+0x160>)
 8009ca8:	4013      	ands	r3, r2
 8009caa:	687a      	ldr	r2, [r7, #4]
 8009cac:	69d2      	ldr	r2, [r2, #28]
 8009cae:	00d2      	lsls	r2, r2, #3
 8009cb0:	4920      	ldr	r1, [pc, #128]	@ (8009d34 <RCCEx_PLL3_Config+0x15c>)
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009cb6:	4b1f      	ldr	r3, [pc, #124]	@ (8009d34 <RCCEx_PLL3_Config+0x15c>)
 8009cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cba:	4a1e      	ldr	r2, [pc, #120]	@ (8009d34 <RCCEx_PLL3_Config+0x15c>)
 8009cbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009cc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d106      	bne.n	8009cd6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8009d34 <RCCEx_PLL3_Config+0x15c>)
 8009cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ccc:	4a19      	ldr	r2, [pc, #100]	@ (8009d34 <RCCEx_PLL3_Config+0x15c>)
 8009cce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009cd2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009cd4:	e00f      	b.n	8009cf6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d106      	bne.n	8009cea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009cdc:	4b15      	ldr	r3, [pc, #84]	@ (8009d34 <RCCEx_PLL3_Config+0x15c>)
 8009cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ce0:	4a14      	ldr	r2, [pc, #80]	@ (8009d34 <RCCEx_PLL3_Config+0x15c>)
 8009ce2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009ce6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009ce8:	e005      	b.n	8009cf6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009cea:	4b12      	ldr	r3, [pc, #72]	@ (8009d34 <RCCEx_PLL3_Config+0x15c>)
 8009cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cee:	4a11      	ldr	r2, [pc, #68]	@ (8009d34 <RCCEx_PLL3_Config+0x15c>)
 8009cf0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009cf4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8009d34 <RCCEx_PLL3_Config+0x15c>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a0e      	ldr	r2, [pc, #56]	@ (8009d34 <RCCEx_PLL3_Config+0x15c>)
 8009cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d02:	f7fa fab1 	bl	8004268 <HAL_GetTick>
 8009d06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009d08:	e008      	b.n	8009d1c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009d0a:	f7fa faad 	bl	8004268 <HAL_GetTick>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	1ad3      	subs	r3, r2, r3
 8009d14:	2b02      	cmp	r3, #2
 8009d16:	d901      	bls.n	8009d1c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009d18:	2303      	movs	r3, #3
 8009d1a:	e006      	b.n	8009d2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009d1c:	4b05      	ldr	r3, [pc, #20]	@ (8009d34 <RCCEx_PLL3_Config+0x15c>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d0f0      	beq.n	8009d0a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3710      	adds	r7, #16
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	58024400 	.word	0x58024400
 8009d38:	ffff0007 	.word	0xffff0007

08009d3c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b08a      	sub	sp, #40	@ 0x28
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d101      	bne.n	8009d4e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e075      	b.n	8009e3a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009d54:	b2db      	uxtb	r3, r3
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d105      	bne.n	8009d66 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f7f9 fbcb 	bl	80034fc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2204      	movs	r2, #4
 8009d6a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 f868 	bl	8009e44 <HAL_SD_InitCard>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d001      	beq.n	8009d7e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	e05d      	b.n	8009e3a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8009d7e:	f107 0308 	add.w	r3, r7, #8
 8009d82:	4619      	mov	r1, r3
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 fdaf 	bl	800a8e8 <HAL_SD_GetCardStatus>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d001      	beq.n	8009d94 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8009d90:	2301      	movs	r3, #1
 8009d92:	e052      	b.n	8009e3a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8009d94:	7e3b      	ldrb	r3, [r7, #24]
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009d9a:	7e7b      	ldrb	r3, [r7, #25]
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d10a      	bne.n	8009dbe <HAL_SD_Init+0x82>
 8009da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d102      	bne.n	8009db4 <HAL_SD_Init+0x78>
 8009dae:	6a3b      	ldr	r3, [r7, #32]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d004      	beq.n	8009dbe <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009dba:	659a      	str	r2, [r3, #88]	@ 0x58
 8009dbc:	e00b      	b.n	8009dd6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d104      	bne.n	8009dd0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009dcc:	659a      	str	r2, [r3, #88]	@ 0x58
 8009dce:	e002      	b.n	8009dd6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	68db      	ldr	r3, [r3, #12]
 8009dda:	4619      	mov	r1, r3
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f000 fe6d 	bl	800aabc <HAL_SD_ConfigWideBusOperation>
 8009de2:	4603      	mov	r3, r0
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d001      	beq.n	8009dec <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8009de8:	2301      	movs	r3, #1
 8009dea:	e026      	b.n	8009e3a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8009dec:	f7fa fa3c 	bl	8004268 <HAL_GetTick>
 8009df0:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009df2:	e011      	b.n	8009e18 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009df4:	f7fa fa38 	bl	8004268 <HAL_GetTick>
 8009df8:	4602      	mov	r2, r0
 8009dfa:	69fb      	ldr	r3, [r7, #28]
 8009dfc:	1ad3      	subs	r3, r2, r3
 8009dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e02:	d109      	bne.n	8009e18 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009e0a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8009e14:	2303      	movs	r3, #3
 8009e16:	e010      	b.n	8009e3a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 ff61 	bl	800ace0 <HAL_SD_GetCardState>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	2b04      	cmp	r3, #4
 8009e22:	d1e7      	bne.n	8009df4 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2200      	movs	r2, #0
 8009e28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2201      	movs	r2, #1
 8009e34:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8009e38:	2300      	movs	r3, #0
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3728      	adds	r7, #40	@ 0x28
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
	...

08009e44 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009e44:	b590      	push	{r4, r7, lr}
 8009e46:	b08d      	sub	sp, #52	@ 0x34
 8009e48:	af02      	add	r7, sp, #8
 8009e4a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009e50:	2300      	movs	r3, #0
 8009e52:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009e54:	2300      	movs	r3, #0
 8009e56:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009e5c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8009e60:	f04f 0100 	mov.w	r1, #0
 8009e64:	f7fe fc76 	bl	8008754 <HAL_RCCEx_GetPeriphCLKFreq>
 8009e68:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8009e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d109      	bne.n	8009e84 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8009e7e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009e80:	2301      	movs	r3, #1
 8009e82:	e070      	b.n	8009f66 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8009e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e86:	0a1b      	lsrs	r3, r3, #8
 8009e88:	4a39      	ldr	r2, [pc, #228]	@ (8009f70 <HAL_SD_InitCard+0x12c>)
 8009e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e8e:	091b      	lsrs	r3, r3, #4
 8009e90:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681c      	ldr	r4, [r3, #0]
 8009e96:	466a      	mov	r2, sp
 8009e98:	f107 0318 	add.w	r3, r7, #24
 8009e9c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009ea0:	e882 0003 	stmia.w	r2, {r0, r1}
 8009ea4:	f107 030c 	add.w	r3, r7, #12
 8009ea8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009eaa:	4620      	mov	r0, r4
 8009eac:	f003 f916 	bl	800d0dc <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f003 f959 	bl	800d16c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8009eba:	69fb      	ldr	r3, [r7, #28]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d005      	beq.n	8009ecc <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8009ec0:	69fb      	ldr	r3, [r7, #28]
 8009ec2:	005b      	lsls	r3, r3, #1
 8009ec4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eca:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8009ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d007      	beq.n	8009ee2 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8009ed2:	4a28      	ldr	r2, [pc, #160]	@ (8009f74 <HAL_SD_InitCard+0x130>)
 8009ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eda:	3301      	adds	r3, #1
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7fa f9cf 	bl	8004280 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 ffea 	bl	800aebc <SD_PowerON>
 8009ee8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009eea:	6a3b      	ldr	r3, [r7, #32]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d00b      	beq.n	8009f08 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009efc:	6a3b      	ldr	r3, [r7, #32]
 8009efe:	431a      	orrs	r2, r3
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009f04:	2301      	movs	r3, #1
 8009f06:	e02e      	b.n	8009f66 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 ff09 	bl	800ad20 <SD_InitCard>
 8009f0e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009f10:	6a3b      	ldr	r3, [r7, #32]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d00b      	beq.n	8009f2e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2201      	movs	r2, #1
 8009f1a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f22:	6a3b      	ldr	r3, [r7, #32]
 8009f24:	431a      	orrs	r2, r3
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e01b      	b.n	8009f66 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009f36:	4618      	mov	r0, r3
 8009f38:	f003 f9ae 	bl	800d298 <SDMMC_CmdBlockLength>
 8009f3c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009f3e:	6a3b      	ldr	r3, [r7, #32]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d00f      	beq.n	8009f64 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a0b      	ldr	r2, [pc, #44]	@ (8009f78 <HAL_SD_InitCard+0x134>)
 8009f4a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f50:	6a3b      	ldr	r3, [r7, #32]
 8009f52:	431a      	orrs	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8009f60:	2301      	movs	r3, #1
 8009f62:	e000      	b.n	8009f66 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8009f64:	2300      	movs	r3, #0
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	372c      	adds	r7, #44	@ 0x2c
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd90      	pop	{r4, r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	014f8b59 	.word	0x014f8b59
 8009f74:	00012110 	.word	0x00012110
 8009f78:	1fe00fff 	.word	0x1fe00fff

08009f7c <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b08c      	sub	sp, #48	@ 0x30
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	60b9      	str	r1, [r7, #8]
 8009f86:	607a      	str	r2, [r7, #4]
 8009f88:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d107      	bne.n	8009fa4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f98:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	e08d      	b.n	800a0c0 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	f040 8086 	bne.w	800a0be <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009fb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	441a      	add	r2, r3
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d907      	bls.n	8009fd6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fca:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	e074      	b.n	800a0c0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2203      	movs	r2, #3
 8009fda:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	68ba      	ldr	r2, [r7, #8]
 8009fea:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	025a      	lsls	r2, r3, #9
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d002      	beq.n	800a002 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8009ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ffe:	025b      	lsls	r3, r3, #9
 800a000:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a002:	f04f 33ff 	mov.w	r3, #4294967295
 800a006:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	025b      	lsls	r3, r3, #9
 800a00c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a00e:	2390      	movs	r3, #144	@ 0x90
 800a010:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a012:	2302      	movs	r3, #2
 800a014:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a016:	2300      	movs	r3, #0
 800a018:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a01a:	2300      	movs	r3, #0
 800a01c:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f107 0210 	add.w	r2, r7, #16
 800a026:	4611      	mov	r1, r2
 800a028:	4618      	mov	r0, r3
 800a02a:	f003 f909 	bl	800d240 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	68da      	ldr	r2, [r3, #12]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a03c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	68ba      	ldr	r2, [r7, #8]
 800a044:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	2201      	movs	r2, #1
 800a04c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	2b01      	cmp	r3, #1
 800a052:	d90a      	bls.n	800a06a <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2282      	movs	r2, #130	@ 0x82
 800a058:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a060:	4618      	mov	r0, r3
 800a062:	f003 f95f 	bl	800d324 <SDMMC_CmdReadMultiBlock>
 800a066:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800a068:	e009      	b.n	800a07e <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2281      	movs	r2, #129	@ 0x81
 800a06e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a076:	4618      	mov	r0, r3
 800a078:	f003 f931 	bl	800d2de <SDMMC_CmdReadSingleBlock>
 800a07c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a07e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a080:	2b00      	cmp	r3, #0
 800a082:	d012      	beq.n	800a0aa <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a0f      	ldr	r2, [pc, #60]	@ (800a0c8 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800a08a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a092:	431a      	orrs	r2, r3
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2201      	movs	r2, #1
 800a09c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	e00a      	b.n	800a0c0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800a0b8:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	e000      	b.n	800a0c0 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a0be:	2302      	movs	r3, #2
  }
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3730      	adds	r7, #48	@ 0x30
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}
 800a0c8:	1fe00fff 	.word	0x1fe00fff

0800a0cc <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b08c      	sub	sp, #48	@ 0x30
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	60b9      	str	r1, [r7, #8]
 800a0d6:	607a      	str	r2, [r7, #4]
 800a0d8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d107      	bne.n	800a0f4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0e8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	e08d      	b.n	800a210 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	f040 8086 	bne.w	800a20e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2200      	movs	r2, #0
 800a106:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a108:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	441a      	add	r2, r3
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a112:	429a      	cmp	r2, r3
 800a114:	d907      	bls.n	800a126 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a11a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800a122:	2301      	movs	r3, #1
 800a124:	e074      	b.n	800a210 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2203      	movs	r2, #3
 800a12a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	2200      	movs	r2, #0
 800a134:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	68ba      	ldr	r2, [r7, #8]
 800a13a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	025a      	lsls	r2, r3, #9
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a148:	2b01      	cmp	r3, #1
 800a14a:	d002      	beq.n	800a152 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800a14c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a14e:	025b      	lsls	r3, r3, #9
 800a150:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a152:	f04f 33ff 	mov.w	r3, #4294967295
 800a156:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	025b      	lsls	r3, r3, #9
 800a15c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a15e:	2390      	movs	r3, #144	@ 0x90
 800a160:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a162:	2300      	movs	r3, #0
 800a164:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a166:	2300      	movs	r3, #0
 800a168:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800a16a:	2300      	movs	r3, #0
 800a16c:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f107 0210 	add.w	r2, r7, #16
 800a176:	4611      	mov	r1, r2
 800a178:	4618      	mov	r0, r3
 800a17a:	f003 f861 	bl	800d240 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	68da      	ldr	r2, [r3, #12]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a18c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	68ba      	ldr	r2, [r7, #8]
 800a194:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	2201      	movs	r2, #1
 800a19c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d90a      	bls.n	800a1ba <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	22a0      	movs	r2, #160	@ 0xa0
 800a1a8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f003 f8fd 	bl	800d3b0 <SDMMC_CmdWriteMultiBlock>
 800a1b6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800a1b8:	e009      	b.n	800a1ce <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2290      	movs	r2, #144	@ 0x90
 800a1be:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f003 f8cf 	bl	800d36a <SDMMC_CmdWriteSingleBlock>
 800a1cc:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800a1ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d012      	beq.n	800a1fa <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a0f      	ldr	r2, [pc, #60]	@ (800a218 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800a1da:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a1e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1e2:	431a      	orrs	r2, r3
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e00a      	b.n	800a210 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800a208:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a20a:	2300      	movs	r3, #0
 800a20c:	e000      	b.n	800a210 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800a20e:	2302      	movs	r3, #2
  }
}
 800a210:	4618      	mov	r0, r3
 800a212:	3730      	adds	r7, #48	@ 0x30
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}
 800a218:	1fe00fff 	.word	0x1fe00fff

0800a21c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b084      	sub	sp, #16
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a228:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a230:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a234:	2b00      	cmp	r3, #0
 800a236:	d008      	beq.n	800a24a <HAL_SD_IRQHandler+0x2e>
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f003 0308 	and.w	r3, r3, #8
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d003      	beq.n	800a24a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f001 f926 	bl	800b494 <SD_Read_IT>
 800a248:	e19a      	b.n	800a580 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a254:	2b00      	cmp	r3, #0
 800a256:	f000 80ac 	beq.w	800a3b2 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a262:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	4b59      	ldr	r3, [pc, #356]	@ (800a3d4 <HAL_SD_IRQHandler+0x1b8>)
 800a270:	400b      	ands	r3, r1
 800a272:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800a282:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	68da      	ldr	r2, [r3, #12]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a292:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f003 0308 	and.w	r3, r3, #8
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d038      	beq.n	800a310 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f003 0302 	and.w	r3, r3, #2
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d104      	bne.n	800a2b2 <HAL_SD_IRQHandler+0x96>
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f003 0320 	and.w	r3, r3, #32
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d011      	beq.n	800a2d6 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f003 f89e 	bl	800d3f8 <SDMMC_CmdStopTransfer>
 800a2bc:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d008      	beq.n	800a2d6 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	431a      	orrs	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f000 f95b 	bl	800a58c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a3f      	ldr	r2, [pc, #252]	@ (800a3d8 <HAL_SD_IRQHandler+0x1bc>)
 800a2dc:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2201      	movs	r2, #1
 800a2e2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f003 0301 	and.w	r3, r3, #1
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d104      	bne.n	800a300 <HAL_SD_IRQHandler+0xe4>
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	f003 0302 	and.w	r3, r3, #2
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d003      	beq.n	800a308 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f003 fd2b 	bl	800dd5c <HAL_SD_RxCpltCallback>
 800a306:	e13b      	b.n	800a580 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f003 fd1d 	bl	800dd48 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a30e:	e137      	b.n	800a580 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a316:	2b00      	cmp	r3, #0
 800a318:	f000 8132 	beq.w	800a580 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2200      	movs	r2, #0
 800a322:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	2200      	movs	r2, #0
 800a32a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2200      	movs	r2, #0
 800a332:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f003 0302 	and.w	r3, r3, #2
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d104      	bne.n	800a348 <HAL_SD_IRQHandler+0x12c>
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f003 0320 	and.w	r3, r3, #32
 800a344:	2b00      	cmp	r3, #0
 800a346:	d011      	beq.n	800a36c <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4618      	mov	r0, r3
 800a34e:	f003 f853 	bl	800d3f8 <SDMMC_CmdStopTransfer>
 800a352:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d008      	beq.n	800a36c <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	431a      	orrs	r2, r3
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 f910 	bl	800a58c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2201      	movs	r2, #1
 800a370:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2200      	movs	r2, #0
 800a378:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f003 0310 	and.w	r3, r3, #16
 800a380:	2b00      	cmp	r3, #0
 800a382:	d104      	bne.n	800a38e <HAL_SD_IRQHandler+0x172>
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f003 0320 	and.w	r3, r3, #32
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d002      	beq.n	800a394 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f003 fcda 	bl	800dd48 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f003 0301 	and.w	r3, r3, #1
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d105      	bne.n	800a3aa <HAL_SD_IRQHandler+0x18e>
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f003 0302 	and.w	r3, r3, #2
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	f000 80eb 	beq.w	800a580 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f003 fcd6 	bl	800dd5c <HAL_SD_RxCpltCallback>
}
 800a3b0:	e0e6      	b.n	800a580 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d00d      	beq.n	800a3dc <HAL_SD_IRQHandler+0x1c0>
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f003 0308 	and.w	r3, r3, #8
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d008      	beq.n	800a3dc <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f001 f8a8 	bl	800b520 <SD_Write_IT>
 800a3d0:	e0d6      	b.n	800a580 <HAL_SD_IRQHandler+0x364>
 800a3d2:	bf00      	nop
 800a3d4:	ffff3ec5 	.word	0xffff3ec5
 800a3d8:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3e2:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	f000 809d 	beq.w	800a526 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3f2:	f003 0302 	and.w	r3, r3, #2
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d005      	beq.n	800a406 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3fe:	f043 0202 	orr.w	r2, r3, #2
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a40c:	f003 0308 	and.w	r3, r3, #8
 800a410:	2b00      	cmp	r3, #0
 800a412:	d005      	beq.n	800a420 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a418:	f043 0208 	orr.w	r2, r3, #8
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a426:	f003 0320 	and.w	r3, r3, #32
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d005      	beq.n	800a43a <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a432:	f043 0220 	orr.w	r2, r3, #32
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a440:	f003 0310 	and.w	r3, r3, #16
 800a444:	2b00      	cmp	r3, #0
 800a446:	d005      	beq.n	800a454 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a44c:	f043 0210 	orr.w	r2, r3, #16
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4a4b      	ldr	r2, [pc, #300]	@ (800a588 <HAL_SD_IRQHandler+0x36c>)
 800a45a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800a46a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	68da      	ldr	r2, [r3, #12]
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a47a:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a48a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	68da      	ldr	r2, [r3, #12]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a49a:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f002 ffa9 	bl	800d3f8 <SDMMC_CmdStopTransfer>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4ac:	431a      	orrs	r2, r3
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	68da      	ldr	r2, [r3, #12]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a4c0:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a4ca:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f003 0308 	and.w	r3, r3, #8
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00a      	beq.n	800a4ec <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2201      	movs	r2, #1
 800a4da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 f851 	bl	800a58c <HAL_SD_ErrorCallback>
}
 800a4ea:	e049      	b.n	800a580 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d044      	beq.n	800a580 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d040      	beq.n	800a580 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800a50c:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	2200      	movs	r2, #0
 800a514:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2201      	movs	r2, #1
 800a51a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f000 f834 	bl	800a58c <HAL_SD_ErrorCallback>
}
 800a524:	e02c      	b.n	800a580 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a52c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a530:	2b00      	cmp	r3, #0
 800a532:	d025      	beq.n	800a580 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a53c:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a544:	f003 0304 	and.w	r3, r3, #4
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d10c      	bne.n	800a566 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f003 0320 	and.w	r3, r3, #32
 800a552:	2b00      	cmp	r3, #0
 800a554:	d003      	beq.n	800a55e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f001 f84a 	bl	800b5f0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800a55c:	e010      	b.n	800a580 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f001 f832 	bl	800b5c8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800a564:	e00c      	b.n	800a580 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f003 0320 	and.w	r3, r3, #32
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d003      	beq.n	800a578 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f001 f833 	bl	800b5dc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800a576:	e003      	b.n	800a580 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f001 f81b 	bl	800b5b4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800a57e:	e7ff      	b.n	800a580 <HAL_SD_IRQHandler+0x364>
 800a580:	bf00      	nop
 800a582:	3710      	adds	r7, #16
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}
 800a588:	18000f3a 	.word	0x18000f3a

0800a58c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b083      	sub	sp, #12
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a594:	bf00      	nop
 800a596:	370c      	adds	r7, #12
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b083      	sub	sp, #12
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5ae:	0f9b      	lsrs	r3, r3, #30
 800a5b0:	b2da      	uxtb	r2, r3
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5ba:	0e9b      	lsrs	r3, r3, #26
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	f003 030f 	and.w	r3, r3, #15
 800a5c2:	b2da      	uxtb	r2, r3
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5cc:	0e1b      	lsrs	r3, r3, #24
 800a5ce:	b2db      	uxtb	r3, r3
 800a5d0:	f003 0303 	and.w	r3, r3, #3
 800a5d4:	b2da      	uxtb	r2, r3
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5de:	0c1b      	lsrs	r3, r3, #16
 800a5e0:	b2da      	uxtb	r2, r3
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5ea:	0a1b      	lsrs	r3, r3, #8
 800a5ec:	b2da      	uxtb	r2, r3
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5f6:	b2da      	uxtb	r2, r3
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a600:	0d1b      	lsrs	r3, r3, #20
 800a602:	b29a      	uxth	r2, r3
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a60c:	0c1b      	lsrs	r3, r3, #16
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	f003 030f 	and.w	r3, r3, #15
 800a614:	b2da      	uxtb	r2, r3
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a61e:	0bdb      	lsrs	r3, r3, #15
 800a620:	b2db      	uxtb	r3, r3
 800a622:	f003 0301 	and.w	r3, r3, #1
 800a626:	b2da      	uxtb	r2, r3
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a630:	0b9b      	lsrs	r3, r3, #14
 800a632:	b2db      	uxtb	r3, r3
 800a634:	f003 0301 	and.w	r3, r3, #1
 800a638:	b2da      	uxtb	r2, r3
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a642:	0b5b      	lsrs	r3, r3, #13
 800a644:	b2db      	uxtb	r3, r3
 800a646:	f003 0301 	and.w	r3, r3, #1
 800a64a:	b2da      	uxtb	r2, r3
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a654:	0b1b      	lsrs	r3, r3, #12
 800a656:	b2db      	uxtb	r3, r3
 800a658:	f003 0301 	and.w	r3, r3, #1
 800a65c:	b2da      	uxtb	r2, r3
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	2200      	movs	r2, #0
 800a666:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d163      	bne.n	800a738 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a674:	009a      	lsls	r2, r3, #2
 800a676:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a67a:	4013      	ands	r3, r2
 800a67c:	687a      	ldr	r2, [r7, #4]
 800a67e:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800a680:	0f92      	lsrs	r2, r2, #30
 800a682:	431a      	orrs	r2, r3
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a68c:	0edb      	lsrs	r3, r3, #27
 800a68e:	b2db      	uxtb	r3, r3
 800a690:	f003 0307 	and.w	r3, r3, #7
 800a694:	b2da      	uxtb	r2, r3
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a69e:	0e1b      	lsrs	r3, r3, #24
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	f003 0307 	and.w	r3, r3, #7
 800a6a6:	b2da      	uxtb	r2, r3
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6b0:	0d5b      	lsrs	r3, r3, #21
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	f003 0307 	and.w	r3, r3, #7
 800a6b8:	b2da      	uxtb	r2, r3
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6c2:	0c9b      	lsrs	r3, r3, #18
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	f003 0307 	and.w	r3, r3, #7
 800a6ca:	b2da      	uxtb	r2, r3
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6d4:	0bdb      	lsrs	r3, r3, #15
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	f003 0307 	and.w	r3, r3, #7
 800a6dc:	b2da      	uxtb	r2, r3
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	691b      	ldr	r3, [r3, #16]
 800a6e6:	1c5a      	adds	r2, r3, #1
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	7e1b      	ldrb	r3, [r3, #24]
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	f003 0307 	and.w	r3, r3, #7
 800a6f6:	3302      	adds	r3, #2
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	fa02 f303 	lsl.w	r3, r2, r3
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a702:	fb03 f202 	mul.w	r2, r3, r2
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	7a1b      	ldrb	r3, [r3, #8]
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	f003 030f 	and.w	r3, r3, #15
 800a714:	2201      	movs	r2, #1
 800a716:	409a      	lsls	r2, r3
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a720:	687a      	ldr	r2, [r7, #4]
 800a722:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800a724:	0a52      	lsrs	r2, r2, #9
 800a726:	fb03 f202 	mul.w	r2, r3, r2
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a734:	655a      	str	r2, [r3, #84]	@ 0x54
 800a736:	e031      	b.n	800a79c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d11d      	bne.n	800a77c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a744:	041b      	lsls	r3, r3, #16
 800a746:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a74e:	0c1b      	lsrs	r3, r3, #16
 800a750:	431a      	orrs	r2, r3
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	691b      	ldr	r3, [r3, #16]
 800a75a:	3301      	adds	r3, #1
 800a75c:	029a      	lsls	r2, r3, #10
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a770:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	655a      	str	r2, [r3, #84]	@ 0x54
 800a77a:	e00f      	b.n	800a79c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a58      	ldr	r2, [pc, #352]	@ (800a8e4 <HAL_SD_GetCardCSD+0x344>)
 800a782:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a788:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2201      	movs	r2, #1
 800a794:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800a798:	2301      	movs	r3, #1
 800a79a:	e09d      	b.n	800a8d8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7a0:	0b9b      	lsrs	r3, r3, #14
 800a7a2:	b2db      	uxtb	r3, r3
 800a7a4:	f003 0301 	and.w	r3, r3, #1
 800a7a8:	b2da      	uxtb	r2, r3
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7b2:	09db      	lsrs	r3, r3, #7
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7ba:	b2da      	uxtb	r2, r3
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a7c4:	b2db      	uxtb	r3, r3
 800a7c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7ca:	b2da      	uxtb	r2, r3
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a7d4:	0fdb      	lsrs	r3, r3, #31
 800a7d6:	b2da      	uxtb	r2, r3
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a7e0:	0f5b      	lsrs	r3, r3, #29
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	f003 0303 	and.w	r3, r3, #3
 800a7e8:	b2da      	uxtb	r2, r3
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a7f2:	0e9b      	lsrs	r3, r3, #26
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	f003 0307 	and.w	r3, r3, #7
 800a7fa:	b2da      	uxtb	r2, r3
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a804:	0d9b      	lsrs	r3, r3, #22
 800a806:	b2db      	uxtb	r3, r3
 800a808:	f003 030f 	and.w	r3, r3, #15
 800a80c:	b2da      	uxtb	r2, r3
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a816:	0d5b      	lsrs	r3, r3, #21
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	f003 0301 	and.w	r3, r3, #1
 800a81e:	b2da      	uxtb	r2, r3
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	2200      	movs	r2, #0
 800a82a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a832:	0c1b      	lsrs	r3, r3, #16
 800a834:	b2db      	uxtb	r3, r3
 800a836:	f003 0301 	and.w	r3, r3, #1
 800a83a:	b2da      	uxtb	r2, r3
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a846:	0bdb      	lsrs	r3, r3, #15
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	f003 0301 	and.w	r3, r3, #1
 800a84e:	b2da      	uxtb	r2, r3
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a85a:	0b9b      	lsrs	r3, r3, #14
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	f003 0301 	and.w	r3, r3, #1
 800a862:	b2da      	uxtb	r2, r3
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a86e:	0b5b      	lsrs	r3, r3, #13
 800a870:	b2db      	uxtb	r3, r3
 800a872:	f003 0301 	and.w	r3, r3, #1
 800a876:	b2da      	uxtb	r2, r3
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a882:	0b1b      	lsrs	r3, r3, #12
 800a884:	b2db      	uxtb	r3, r3
 800a886:	f003 0301 	and.w	r3, r3, #1
 800a88a:	b2da      	uxtb	r2, r3
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a896:	0a9b      	lsrs	r3, r3, #10
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	f003 0303 	and.w	r3, r3, #3
 800a89e:	b2da      	uxtb	r2, r3
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a8aa:	0a1b      	lsrs	r3, r3, #8
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	f003 0303 	and.w	r3, r3, #3
 800a8b2:	b2da      	uxtb	r2, r3
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a8be:	085b      	lsrs	r3, r3, #1
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a8c6:	b2da      	uxtb	r2, r3
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	2201      	movs	r2, #1
 800a8d2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800a8d6:	2300      	movs	r3, #0
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	370c      	adds	r7, #12
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr
 800a8e4:	1fe00fff 	.word	0x1fe00fff

0800a8e8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b094      	sub	sp, #80	@ 0x50
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	2b03      	cmp	r3, #3
 800a902:	d101      	bne.n	800a908 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800a904:	2301      	movs	r3, #1
 800a906:	e0a7      	b.n	800aa58 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800a908:	f107 0308 	add.w	r3, r7, #8
 800a90c:	4619      	mov	r1, r3
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 fb62 	bl	800afd8 <SD_SendSDStatus>
 800a914:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a916:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d011      	beq.n	800a940 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a4f      	ldr	r2, [pc, #316]	@ (800aa60 <HAL_SD_GetCardStatus+0x178>)
 800a922:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a928:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a92a:	431a      	orrs	r2, r3
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2201      	movs	r2, #1
 800a934:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800a938:	2301      	movs	r3, #1
 800a93a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800a93e:	e070      	b.n	800aa22 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	099b      	lsrs	r3, r3, #6
 800a944:	b2db      	uxtb	r3, r3
 800a946:	f003 0303 	and.w	r3, r3, #3
 800a94a:	b2da      	uxtb	r2, r3
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	095b      	lsrs	r3, r3, #5
 800a954:	b2db      	uxtb	r3, r3
 800a956:	f003 0301 	and.w	r3, r3, #1
 800a95a:	b2da      	uxtb	r2, r3
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	0a1b      	lsrs	r3, r3, #8
 800a964:	b29b      	uxth	r3, r3
 800a966:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a96a:	b29a      	uxth	r2, r3
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	0e1b      	lsrs	r3, r3, #24
 800a970:	b29b      	uxth	r3, r3
 800a972:	4313      	orrs	r3, r2
 800a974:	b29a      	uxth	r2, r3
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	061a      	lsls	r2, r3, #24
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	021b      	lsls	r3, r3, #8
 800a982:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a986:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	0a1b      	lsrs	r3, r3, #8
 800a98c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a990:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	0e1b      	lsrs	r3, r3, #24
 800a996:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	b2da      	uxtb	r2, r3
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	0a1b      	lsrs	r3, r3, #8
 800a9a8:	b2da      	uxtb	r2, r3
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	0d1b      	lsrs	r3, r3, #20
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	f003 030f 	and.w	r3, r3, #15
 800a9b8:	b2da      	uxtb	r2, r3
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	0c1b      	lsrs	r3, r3, #16
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a9c8:	b29a      	uxth	r2, r3
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	b2db      	uxtb	r3, r3
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	b29a      	uxth	r2, r3
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	0a9b      	lsrs	r3, r3, #10
 800a9de:	b2db      	uxtb	r3, r3
 800a9e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a9e4:	b2da      	uxtb	r2, r3
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	0a1b      	lsrs	r3, r3, #8
 800a9ee:	b2db      	uxtb	r3, r3
 800a9f0:	f003 0303 	and.w	r3, r3, #3
 800a9f4:	b2da      	uxtb	r2, r3
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	091b      	lsrs	r3, r3, #4
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	f003 030f 	and.w	r3, r3, #15
 800aa04:	b2da      	uxtb	r2, r3
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	b2db      	uxtb	r3, r3
 800aa0e:	f003 030f 	and.w	r3, r3, #15
 800aa12:	b2da      	uxtb	r2, r3
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800aa18:	69bb      	ldr	r3, [r7, #24]
 800aa1a:	0e1b      	lsrs	r3, r3, #24
 800aa1c:	b2da      	uxtb	r2, r3
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f002 fc34 	bl	800d298 <SDMMC_CmdBlockLength>
 800aa30:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800aa32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d00d      	beq.n	800aa54 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4a08      	ldr	r2, [pc, #32]	@ (800aa60 <HAL_SD_GetCardStatus+0x178>)
 800aa3e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aa44:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2201      	movs	r2, #1
 800aa4a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800aa54:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3750      	adds	r7, #80	@ 0x50
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}
 800aa60:	1fe00fff 	.word	0x1fe00fff

0800aa64 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800aaae:	2300      	movs	r3, #0
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	370c      	adds	r7, #12
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800aabc:	b590      	push	{r4, r7, lr}
 800aabe:	b08d      	sub	sp, #52	@ 0x34
 800aac0:	af02      	add	r7, sp, #8
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800aac6:	2300      	movs	r3, #0
 800aac8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2203      	movs	r2, #3
 800aad0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aad8:	2b03      	cmp	r3, #3
 800aada:	d02e      	beq.n	800ab3a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aae2:	d106      	bne.n	800aaf2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aae8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	635a      	str	r2, [r3, #52]	@ 0x34
 800aaf0:	e029      	b.n	800ab46 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aaf8:	d10a      	bne.n	800ab10 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 fb64 	bl	800b1c8 <SD_WideBus_Enable>
 800ab00:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab06:	6a3b      	ldr	r3, [r7, #32]
 800ab08:	431a      	orrs	r2, r3
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	635a      	str	r2, [r3, #52]	@ 0x34
 800ab0e:	e01a      	b.n	800ab46 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d10a      	bne.n	800ab2c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 fba1 	bl	800b25e <SD_WideBus_Disable>
 800ab1c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab22:	6a3b      	ldr	r3, [r7, #32]
 800ab24:	431a      	orrs	r2, r3
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	635a      	str	r2, [r3, #52]	@ 0x34
 800ab2a:	e00c      	b.n	800ab46 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab30:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	635a      	str	r2, [r3, #52]	@ 0x34
 800ab38:	e005      	b.n	800ab46 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab3e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d007      	beq.n	800ab5e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	4a5f      	ldr	r2, [pc, #380]	@ (800acd0 <HAL_SD_ConfigWideBusOperation+0x214>)
 800ab54:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800ab56:	2301      	movs	r3, #1
 800ab58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ab5c:	e096      	b.n	800ac8c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800ab5e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800ab62:	f04f 0100 	mov.w	r1, #0
 800ab66:	f7fd fdf5 	bl	8008754 <HAL_RCCEx_GetPeriphCLKFreq>
 800ab6a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800ab6c:	69fb      	ldr	r3, [r7, #28]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	f000 8083 	beq.w	800ac7a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	689b      	ldr	r3, [r3, #8]
 800ab7e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	691b      	ldr	r3, [r3, #16]
 800ab88:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	695a      	ldr	r2, [r3, #20]
 800ab8e:	69fb      	ldr	r3, [r7, #28]
 800ab90:	4950      	ldr	r1, [pc, #320]	@ (800acd4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ab92:	fba1 1303 	umull	r1, r3, r1, r3
 800ab96:	0e1b      	lsrs	r3, r3, #24
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d303      	bcc.n	800aba4 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	695b      	ldr	r3, [r3, #20]
 800aba0:	61bb      	str	r3, [r7, #24]
 800aba2:	e05a      	b.n	800ac5a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aba8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800abac:	d103      	bne.n	800abb6 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	695b      	ldr	r3, [r3, #20]
 800abb2:	61bb      	str	r3, [r7, #24]
 800abb4:	e051      	b.n	800ac5a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800abbe:	d126      	bne.n	800ac0e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	695b      	ldr	r3, [r3, #20]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d10e      	bne.n	800abe6 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800abc8:	69fb      	ldr	r3, [r7, #28]
 800abca:	4a43      	ldr	r2, [pc, #268]	@ (800acd8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d906      	bls.n	800abde <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800abd0:	69fb      	ldr	r3, [r7, #28]
 800abd2:	4a40      	ldr	r2, [pc, #256]	@ (800acd4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800abd4:	fba2 2303 	umull	r2, r3, r2, r3
 800abd8:	0e5b      	lsrs	r3, r3, #25
 800abda:	61bb      	str	r3, [r7, #24]
 800abdc:	e03d      	b.n	800ac5a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	695b      	ldr	r3, [r3, #20]
 800abe2:	61bb      	str	r3, [r7, #24]
 800abe4:	e039      	b.n	800ac5a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	695b      	ldr	r3, [r3, #20]
 800abea:	005b      	lsls	r3, r3, #1
 800abec:	69fa      	ldr	r2, [r7, #28]
 800abee:	fbb2 f3f3 	udiv	r3, r2, r3
 800abf2:	4a39      	ldr	r2, [pc, #228]	@ (800acd8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d906      	bls.n	800ac06 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800abf8:	69fb      	ldr	r3, [r7, #28]
 800abfa:	4a36      	ldr	r2, [pc, #216]	@ (800acd4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800abfc:	fba2 2303 	umull	r2, r3, r2, r3
 800ac00:	0e5b      	lsrs	r3, r3, #25
 800ac02:	61bb      	str	r3, [r7, #24]
 800ac04:	e029      	b.n	800ac5a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	695b      	ldr	r3, [r3, #20]
 800ac0a:	61bb      	str	r3, [r7, #24]
 800ac0c:	e025      	b.n	800ac5a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	695b      	ldr	r3, [r3, #20]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d10e      	bne.n	800ac34 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800ac16:	69fb      	ldr	r3, [r7, #28]
 800ac18:	4a30      	ldr	r2, [pc, #192]	@ (800acdc <HAL_SD_ConfigWideBusOperation+0x220>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d906      	bls.n	800ac2c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ac1e:	69fb      	ldr	r3, [r7, #28]
 800ac20:	4a2c      	ldr	r2, [pc, #176]	@ (800acd4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ac22:	fba2 2303 	umull	r2, r3, r2, r3
 800ac26:	0e1b      	lsrs	r3, r3, #24
 800ac28:	61bb      	str	r3, [r7, #24]
 800ac2a:	e016      	b.n	800ac5a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	695b      	ldr	r3, [r3, #20]
 800ac30:	61bb      	str	r3, [r7, #24]
 800ac32:	e012      	b.n	800ac5a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	695b      	ldr	r3, [r3, #20]
 800ac38:	005b      	lsls	r3, r3, #1
 800ac3a:	69fa      	ldr	r2, [r7, #28]
 800ac3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac40:	4a26      	ldr	r2, [pc, #152]	@ (800acdc <HAL_SD_ConfigWideBusOperation+0x220>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d906      	bls.n	800ac54 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ac46:	69fb      	ldr	r3, [r7, #28]
 800ac48:	4a22      	ldr	r2, [pc, #136]	@ (800acd4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ac4a:	fba2 2303 	umull	r2, r3, r2, r3
 800ac4e:	0e1b      	lsrs	r3, r3, #24
 800ac50:	61bb      	str	r3, [r7, #24]
 800ac52:	e002      	b.n	800ac5a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	695b      	ldr	r3, [r3, #20]
 800ac58:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681c      	ldr	r4, [r3, #0]
 800ac5e:	466a      	mov	r2, sp
 800ac60:	f107 0314 	add.w	r3, r7, #20
 800ac64:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ac68:	e882 0003 	stmia.w	r2, {r0, r1}
 800ac6c:	f107 0308 	add.w	r3, r7, #8
 800ac70:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ac72:	4620      	mov	r0, r4
 800ac74:	f002 fa32 	bl	800d0dc <SDMMC_Init>
 800ac78:	e008      	b.n	800ac8c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac7e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800ac86:	2301      	movs	r3, #1
 800ac88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ac94:	4618      	mov	r0, r3
 800ac96:	f002 faff 	bl	800d298 <SDMMC_CmdBlockLength>
 800ac9a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ac9c:	6a3b      	ldr	r3, [r7, #32]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d00c      	beq.n	800acbc <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4a0a      	ldr	r2, [pc, #40]	@ (800acd0 <HAL_SD_ConfigWideBusOperation+0x214>)
 800aca8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800acae:	6a3b      	ldr	r3, [r7, #32]
 800acb0:	431a      	orrs	r2, r3
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800acb6:	2301      	movs	r3, #1
 800acb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2201      	movs	r2, #1
 800acc0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800acc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800acc8:	4618      	mov	r0, r3
 800acca:	372c      	adds	r7, #44	@ 0x2c
 800accc:	46bd      	mov	sp, r7
 800acce:	bd90      	pop	{r4, r7, pc}
 800acd0:	1fe00fff 	.word	0x1fe00fff
 800acd4:	55e63b89 	.word	0x55e63b89
 800acd8:	02faf080 	.word	0x02faf080
 800acdc:	017d7840 	.word	0x017d7840

0800ace0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b086      	sub	sp, #24
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ace8:	2300      	movs	r3, #0
 800acea:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800acec:	f107 030c 	add.w	r3, r7, #12
 800acf0:	4619      	mov	r1, r3
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 fa40 	bl	800b178 <SD_SendStatus>
 800acf8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d005      	beq.n	800ad0c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	431a      	orrs	r2, r3
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	0a5b      	lsrs	r3, r3, #9
 800ad10:	f003 030f 	and.w	r3, r3, #15
 800ad14:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ad16:	693b      	ldr	r3, [r7, #16]
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3718      	adds	r7, #24
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b090      	sub	sp, #64	@ 0x40
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800ad2c:	f7f9 fa9c 	bl	8004268 <HAL_GetTick>
 800ad30:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4618      	mov	r0, r3
 800ad38:	f002 fa29 	bl	800d18e <SDMMC_GetPowerState>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d102      	bne.n	800ad48 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ad42:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800ad46:	e0b5      	b.n	800aeb4 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad4c:	2b03      	cmp	r3, #3
 800ad4e:	d02e      	beq.n	800adae <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	4618      	mov	r0, r3
 800ad56:	f002 fc74 	bl	800d642 <SDMMC_CmdSendCID>
 800ad5a:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800ad5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d001      	beq.n	800ad66 <SD_InitCard+0x46>
    {
      return errorstate;
 800ad62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad64:	e0a6      	b.n	800aeb4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	2100      	movs	r1, #0
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f002 fa54 	bl	800d21a <SDMMC_GetResponse>
 800ad72:	4602      	mov	r2, r0
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	2104      	movs	r1, #4
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f002 fa4b 	bl	800d21a <SDMMC_GetResponse>
 800ad84:	4602      	mov	r2, r0
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	2108      	movs	r1, #8
 800ad90:	4618      	mov	r0, r3
 800ad92:	f002 fa42 	bl	800d21a <SDMMC_GetResponse>
 800ad96:	4602      	mov	r2, r0
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	210c      	movs	r1, #12
 800ada2:	4618      	mov	r0, r3
 800ada4:	f002 fa39 	bl	800d21a <SDMMC_GetResponse>
 800ada8:	4602      	mov	r2, r0
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adb2:	2b03      	cmp	r3, #3
 800adb4:	d01d      	beq.n	800adf2 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800adb6:	e019      	b.n	800adec <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f107 020a 	add.w	r2, r7, #10
 800adc0:	4611      	mov	r1, r2
 800adc2:	4618      	mov	r0, r3
 800adc4:	f002 fc7c 	bl	800d6c0 <SDMMC_CmdSetRelAdd>
 800adc8:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800adca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d001      	beq.n	800add4 <SD_InitCard+0xb4>
      {
        return errorstate;
 800add0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800add2:	e06f      	b.n	800aeb4 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800add4:	f7f9 fa48 	bl	8004268 <HAL_GetTick>
 800add8:	4602      	mov	r2, r0
 800adda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800addc:	1ad3      	subs	r3, r2, r3
 800adde:	f241 3287 	movw	r2, #4999	@ 0x1387
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d902      	bls.n	800adec <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800ade6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800adea:	e063      	b.n	800aeb4 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800adec:	897b      	ldrh	r3, [r7, #10]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d0e2      	beq.n	800adb8 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adf6:	2b03      	cmp	r3, #3
 800adf8:	d036      	beq.n	800ae68 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800adfa:	897b      	ldrh	r3, [r7, #10]
 800adfc:	461a      	mov	r2, r3
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae0a:	041b      	lsls	r3, r3, #16
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	4610      	mov	r0, r2
 800ae10:	f002 fc36 	bl	800d680 <SDMMC_CmdSendCSD>
 800ae14:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800ae16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d001      	beq.n	800ae20 <SD_InitCard+0x100>
    {
      return errorstate;
 800ae1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae1e:	e049      	b.n	800aeb4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	2100      	movs	r1, #0
 800ae26:	4618      	mov	r0, r3
 800ae28:	f002 f9f7 	bl	800d21a <SDMMC_GetResponse>
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	2104      	movs	r1, #4
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f002 f9ee 	bl	800d21a <SDMMC_GetResponse>
 800ae3e:	4602      	mov	r2, r0
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	2108      	movs	r1, #8
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f002 f9e5 	bl	800d21a <SDMMC_GetResponse>
 800ae50:	4602      	mov	r2, r0
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	210c      	movs	r1, #12
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f002 f9dc 	bl	800d21a <SDMMC_GetResponse>
 800ae62:	4602      	mov	r2, r0
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	2104      	movs	r1, #4
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f002 f9d3 	bl	800d21a <SDMMC_GetResponse>
 800ae74:	4603      	mov	r3, r0
 800ae76:	0d1a      	lsrs	r2, r3, #20
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ae7c:	f107 030c 	add.w	r3, r7, #12
 800ae80:	4619      	mov	r1, r3
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f7ff fb8c 	bl	800a5a0 <HAL_SD_GetCardCSD>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d002      	beq.n	800ae94 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae8e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ae92:	e00f      	b.n	800aeb4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681a      	ldr	r2, [r3, #0]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae9c:	041b      	lsls	r3, r3, #16
 800ae9e:	4619      	mov	r1, r3
 800aea0:	4610      	mov	r0, r2
 800aea2:	f002 fae5 	bl	800d470 <SDMMC_CmdSelDesel>
 800aea6:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800aea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d001      	beq.n	800aeb2 <SD_InitCard+0x192>
  {
    return errorstate;
 800aeae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeb0:	e000      	b.n	800aeb4 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800aeb2:	2300      	movs	r3, #0
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3740      	adds	r7, #64	@ 0x40
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b086      	sub	sp, #24
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aec4:	2300      	movs	r3, #0
 800aec6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800aec8:	2300      	movs	r3, #0
 800aeca:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800aecc:	2300      	movs	r3, #0
 800aece:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	4618      	mov	r0, r3
 800aed6:	f002 faee 	bl	800d4b6 <SDMMC_CmdGoIdleState>
 800aeda:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d001      	beq.n	800aee6 <SD_PowerON+0x2a>
  {
    return errorstate;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	e072      	b.n	800afcc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4618      	mov	r0, r3
 800aeec:	f002 fb01 	bl	800d4f2 <SDMMC_CmdOperCond>
 800aef0:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aef8:	d10d      	bne.n	800af16 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2200      	movs	r2, #0
 800aefe:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4618      	mov	r0, r3
 800af06:	f002 fad6 	bl	800d4b6 <SDMMC_CmdGoIdleState>
 800af0a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d004      	beq.n	800af1c <SD_PowerON+0x60>
    {
      return errorstate;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	e05a      	b.n	800afcc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2201      	movs	r2, #1
 800af1a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af20:	2b01      	cmp	r3, #1
 800af22:	d137      	bne.n	800af94 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	2100      	movs	r1, #0
 800af2a:	4618      	mov	r0, r3
 800af2c:	f002 fb01 	bl	800d532 <SDMMC_CmdAppCommand>
 800af30:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d02d      	beq.n	800af94 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af38:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800af3c:	e046      	b.n	800afcc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	2100      	movs	r1, #0
 800af44:	4618      	mov	r0, r3
 800af46:	f002 faf4 	bl	800d532 <SDMMC_CmdAppCommand>
 800af4a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d001      	beq.n	800af56 <SD_PowerON+0x9a>
    {
      return errorstate;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	e03a      	b.n	800afcc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	491e      	ldr	r1, [pc, #120]	@ (800afd4 <SD_PowerON+0x118>)
 800af5c:	4618      	mov	r0, r3
 800af5e:	f002 fb0b 	bl	800d578 <SDMMC_CmdAppOperCommand>
 800af62:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d002      	beq.n	800af70 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af6a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800af6e:	e02d      	b.n	800afcc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	2100      	movs	r1, #0
 800af76:	4618      	mov	r0, r3
 800af78:	f002 f94f 	bl	800d21a <SDMMC_GetResponse>
 800af7c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	0fdb      	lsrs	r3, r3, #31
 800af82:	2b01      	cmp	r3, #1
 800af84:	d101      	bne.n	800af8a <SD_PowerON+0xce>
 800af86:	2301      	movs	r3, #1
 800af88:	e000      	b.n	800af8c <SD_PowerON+0xd0>
 800af8a:	2300      	movs	r3, #0
 800af8c:	613b      	str	r3, [r7, #16]

    count++;
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	3301      	adds	r3, #1
 800af92:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d802      	bhi.n	800afa4 <SD_PowerON+0xe8>
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d0cc      	beq.n	800af3e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800afaa:	4293      	cmp	r3, r2
 800afac:	d902      	bls.n	800afb4 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800afae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800afb2:	e00b      	b.n	800afcc <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2200      	movs	r2, #0
 800afb8:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d002      	beq.n	800afca <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2201      	movs	r2, #1
 800afc8:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800afca:	2300      	movs	r3, #0
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3718      	adds	r7, #24
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}
 800afd4:	c1100000 	.word	0xc1100000

0800afd8 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b08c      	sub	sp, #48	@ 0x30
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800afe2:	f7f9 f941 	bl	8004268 <HAL_GetTick>
 800afe6:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	2100      	movs	r1, #0
 800aff2:	4618      	mov	r0, r3
 800aff4:	f002 f911 	bl	800d21a <SDMMC_GetResponse>
 800aff8:	4603      	mov	r3, r0
 800affa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800affe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b002:	d102      	bne.n	800b00a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b004:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b008:	e0b0      	b.n	800b16c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	2140      	movs	r1, #64	@ 0x40
 800b010:	4618      	mov	r0, r3
 800b012:	f002 f941 	bl	800d298 <SDMMC_CmdBlockLength>
 800b016:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b018:	6a3b      	ldr	r3, [r7, #32]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d005      	beq.n	800b02a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800b026:	6a3b      	ldr	r3, [r7, #32]
 800b028:	e0a0      	b.n	800b16c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681a      	ldr	r2, [r3, #0]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b032:	041b      	lsls	r3, r3, #16
 800b034:	4619      	mov	r1, r3
 800b036:	4610      	mov	r0, r2
 800b038:	f002 fa7b 	bl	800d532 <SDMMC_CmdAppCommand>
 800b03c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b03e:	6a3b      	ldr	r3, [r7, #32]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d005      	beq.n	800b050 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800b04c:	6a3b      	ldr	r3, [r7, #32]
 800b04e:	e08d      	b.n	800b16c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b050:	f04f 33ff 	mov.w	r3, #4294967295
 800b054:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800b056:	2340      	movs	r3, #64	@ 0x40
 800b058:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800b05a:	2360      	movs	r3, #96	@ 0x60
 800b05c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b05e:	2302      	movs	r3, #2
 800b060:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b062:	2300      	movs	r3, #0
 800b064:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b066:	2301      	movs	r3, #1
 800b068:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f107 0208 	add.w	r2, r7, #8
 800b072:	4611      	mov	r1, r2
 800b074:	4618      	mov	r0, r3
 800b076:	f002 f8e3 	bl	800d240 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4618      	mov	r0, r3
 800b080:	f002 fb63 	bl	800d74a <SDMMC_CmdStatusRegister>
 800b084:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b086:	6a3b      	ldr	r3, [r7, #32]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d02b      	beq.n	800b0e4 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800b094:	6a3b      	ldr	r3, [r7, #32]
 800b096:	e069      	b.n	800b16c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b09e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d013      	beq.n	800b0ce <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b0aa:	e00d      	b.n	800b0c8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f002 f83d 	bl	800d130 <SDMMC_ReadFIFO>
 800b0b6:	4602      	mov	r2, r0
 800b0b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0ba:	601a      	str	r2, [r3, #0]
        pData++;
 800b0bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0be:	3304      	adds	r3, #4
 800b0c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800b0c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b0c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ca:	2b07      	cmp	r3, #7
 800b0cc:	d9ee      	bls.n	800b0ac <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b0ce:	f7f9 f8cb 	bl	8004268 <HAL_GetTick>
 800b0d2:	4602      	mov	r2, r0
 800b0d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0d6:	1ad3      	subs	r3, r2, r3
 800b0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0dc:	d102      	bne.n	800b0e4 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b0de:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b0e2:	e043      	b.n	800b16c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0ea:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d0d2      	beq.n	800b098 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0f8:	f003 0308 	and.w	r3, r3, #8
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d001      	beq.n	800b104 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b100:	2308      	movs	r3, #8
 800b102:	e033      	b.n	800b16c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b10a:	f003 0302 	and.w	r3, r3, #2
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d001      	beq.n	800b116 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b112:	2302      	movs	r3, #2
 800b114:	e02a      	b.n	800b16c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b11c:	f003 0320 	and.w	r3, r3, #32
 800b120:	2b00      	cmp	r3, #0
 800b122:	d017      	beq.n	800b154 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800b124:	2320      	movs	r3, #32
 800b126:	e021      	b.n	800b16c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4618      	mov	r0, r3
 800b12e:	f001 ffff 	bl	800d130 <SDMMC_ReadFIFO>
 800b132:	4602      	mov	r2, r0
 800b134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b136:	601a      	str	r2, [r3, #0]
    pData++;
 800b138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b13a:	3304      	adds	r3, #4
 800b13c:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b13e:	f7f9 f893 	bl	8004268 <HAL_GetTick>
 800b142:	4602      	mov	r2, r0
 800b144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b146:	1ad3      	subs	r3, r2, r3
 800b148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b14c:	d102      	bne.n	800b154 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b14e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b152:	e00b      	b.n	800b16c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b15a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d1e2      	bne.n	800b128 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	4a03      	ldr	r2, [pc, #12]	@ (800b174 <SD_SendSDStatus+0x19c>)
 800b168:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800b16a:	2300      	movs	r3, #0
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3730      	adds	r7, #48	@ 0x30
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}
 800b174:	18000f3a 	.word	0x18000f3a

0800b178 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b084      	sub	sp, #16
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d102      	bne.n	800b18e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b18c:	e018      	b.n	800b1c0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681a      	ldr	r2, [r3, #0]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b196:	041b      	lsls	r3, r3, #16
 800b198:	4619      	mov	r1, r3
 800b19a:	4610      	mov	r0, r2
 800b19c:	f002 fab2 	bl	800d704 <SDMMC_CmdSendStatus>
 800b1a0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d001      	beq.n	800b1ac <SD_SendStatus+0x34>
  {
    return errorstate;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	e009      	b.n	800b1c0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	2100      	movs	r1, #0
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f002 f831 	bl	800d21a <SDMMC_GetResponse>
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b1be:	2300      	movs	r3, #0
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3710      	adds	r7, #16
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}

0800b1c8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b086      	sub	sp, #24
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	60fb      	str	r3, [r7, #12]
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	2100      	movs	r1, #0
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f002 f81b 	bl	800d21a <SDMMC_GetResponse>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b1ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b1ee:	d102      	bne.n	800b1f6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b1f0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b1f4:	e02f      	b.n	800b256 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b1f6:	f107 030c 	add.w	r3, r7, #12
 800b1fa:	4619      	mov	r1, r3
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f000 f879 	bl	800b2f4 <SD_FindSCR>
 800b202:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d001      	beq.n	800b20e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	e023      	b.n	800b256 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b214:	2b00      	cmp	r3, #0
 800b216:	d01c      	beq.n	800b252 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b220:	041b      	lsls	r3, r3, #16
 800b222:	4619      	mov	r1, r3
 800b224:	4610      	mov	r0, r2
 800b226:	f002 f984 	bl	800d532 <SDMMC_CmdAppCommand>
 800b22a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d001      	beq.n	800b236 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	e00f      	b.n	800b256 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	2102      	movs	r1, #2
 800b23c:	4618      	mov	r0, r3
 800b23e:	f002 f9bb 	bl	800d5b8 <SDMMC_CmdBusWidth>
 800b242:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d001      	beq.n	800b24e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	e003      	b.n	800b256 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b24e:	2300      	movs	r3, #0
 800b250:	e001      	b.n	800b256 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b252:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800b256:	4618      	mov	r0, r3
 800b258:	3718      	adds	r7, #24
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}

0800b25e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b25e:	b580      	push	{r7, lr}
 800b260:	b086      	sub	sp, #24
 800b262:	af00      	add	r7, sp, #0
 800b264:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800b266:	2300      	movs	r3, #0
 800b268:	60fb      	str	r3, [r7, #12]
 800b26a:	2300      	movs	r3, #0
 800b26c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	2100      	movs	r1, #0
 800b274:	4618      	mov	r0, r3
 800b276:	f001 ffd0 	bl	800d21a <SDMMC_GetResponse>
 800b27a:	4603      	mov	r3, r0
 800b27c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b280:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b284:	d102      	bne.n	800b28c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b286:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b28a:	e02f      	b.n	800b2ec <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b28c:	f107 030c 	add.w	r3, r7, #12
 800b290:	4619      	mov	r1, r3
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f000 f82e 	bl	800b2f4 <SD_FindSCR>
 800b298:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d001      	beq.n	800b2a4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	e023      	b.n	800b2ec <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d01c      	beq.n	800b2e8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681a      	ldr	r2, [r3, #0]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2b6:	041b      	lsls	r3, r3, #16
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	4610      	mov	r0, r2
 800b2bc:	f002 f939 	bl	800d532 <SDMMC_CmdAppCommand>
 800b2c0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d001      	beq.n	800b2cc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	e00f      	b.n	800b2ec <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	2100      	movs	r1, #0
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f002 f970 	bl	800d5b8 <SDMMC_CmdBusWidth>
 800b2d8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d001      	beq.n	800b2e4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	e003      	b.n	800b2ec <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	e001      	b.n	800b2ec <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b2e8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3718      	adds	r7, #24
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}

0800b2f4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b08e      	sub	sp, #56	@ 0x38
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b2fe:	f7f8 ffb3 	bl	8004268 <HAL_GetTick>
 800b302:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800b304:	2300      	movs	r3, #0
 800b306:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800b308:	2300      	movs	r3, #0
 800b30a:	60bb      	str	r3, [r7, #8]
 800b30c:	2300      	movs	r3, #0
 800b30e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	2108      	movs	r1, #8
 800b31a:	4618      	mov	r0, r3
 800b31c:	f001 ffbc 	bl	800d298 <SDMMC_CmdBlockLength>
 800b320:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b324:	2b00      	cmp	r3, #0
 800b326:	d001      	beq.n	800b32c <SD_FindSCR+0x38>
  {
    return errorstate;
 800b328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b32a:	e0ad      	b.n	800b488 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681a      	ldr	r2, [r3, #0]
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b334:	041b      	lsls	r3, r3, #16
 800b336:	4619      	mov	r1, r3
 800b338:	4610      	mov	r0, r2
 800b33a:	f002 f8fa 	bl	800d532 <SDMMC_CmdAppCommand>
 800b33e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b342:	2b00      	cmp	r3, #0
 800b344:	d001      	beq.n	800b34a <SD_FindSCR+0x56>
  {
    return errorstate;
 800b346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b348:	e09e      	b.n	800b488 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b34a:	f04f 33ff 	mov.w	r3, #4294967295
 800b34e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b350:	2308      	movs	r3, #8
 800b352:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b354:	2330      	movs	r3, #48	@ 0x30
 800b356:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b358:	2302      	movs	r3, #2
 800b35a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b35c:	2300      	movs	r3, #0
 800b35e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b360:	2301      	movs	r3, #1
 800b362:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f107 0210 	add.w	r2, r7, #16
 800b36c:	4611      	mov	r1, r2
 800b36e:	4618      	mov	r0, r3
 800b370:	f001 ff66 	bl	800d240 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4618      	mov	r0, r3
 800b37a:	f002 f940 	bl	800d5fe <SDMMC_CmdSendSCR>
 800b37e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800b380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b382:	2b00      	cmp	r3, #0
 800b384:	d027      	beq.n	800b3d6 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800b386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b388:	e07e      	b.n	800b488 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b390:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b394:	2b00      	cmp	r3, #0
 800b396:	d113      	bne.n	800b3c0 <SD_FindSCR+0xcc>
 800b398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d110      	bne.n	800b3c0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f001 fec4 	bl	800d130 <SDMMC_ReadFIFO>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f001 febd 	bl	800d130 <SDMMC_ReadFIFO>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	60fb      	str	r3, [r7, #12]
      index++;
 800b3ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3bc:	3301      	adds	r3, #1
 800b3be:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b3c0:	f7f8 ff52 	bl	8004268 <HAL_GetTick>
 800b3c4:	4602      	mov	r2, r0
 800b3c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3c8:	1ad3      	subs	r3, r2, r3
 800b3ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3ce:	d102      	bne.n	800b3d6 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b3d0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b3d4:	e058      	b.n	800b488 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b3dc:	f240 532a 	movw	r3, #1322	@ 0x52a
 800b3e0:	4013      	ands	r3, r2
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d0d1      	beq.n	800b38a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3ec:	f003 0308 	and.w	r3, r3, #8
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d005      	beq.n	800b400 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	2208      	movs	r2, #8
 800b3fa:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b3fc:	2308      	movs	r3, #8
 800b3fe:	e043      	b.n	800b488 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b406:	f003 0302 	and.w	r3, r3, #2
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d005      	beq.n	800b41a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	2202      	movs	r2, #2
 800b414:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b416:	2302      	movs	r3, #2
 800b418:	e036      	b.n	800b488 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b420:	f003 0320 	and.w	r3, r3, #32
 800b424:	2b00      	cmp	r3, #0
 800b426:	d005      	beq.n	800b434 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	2220      	movs	r2, #32
 800b42e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b430:	2320      	movs	r3, #32
 800b432:	e029      	b.n	800b488 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4a15      	ldr	r2, [pc, #84]	@ (800b490 <SD_FindSCR+0x19c>)
 800b43a:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	061a      	lsls	r2, r3, #24
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	021b      	lsls	r3, r3, #8
 800b444:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b448:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	0a1b      	lsrs	r3, r3, #8
 800b44e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b452:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	0e1b      	lsrs	r3, r3, #24
 800b458:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800b45a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b45c:	601a      	str	r2, [r3, #0]
    scr++;
 800b45e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b460:	3304      	adds	r3, #4
 800b462:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	061a      	lsls	r2, r3, #24
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	021b      	lsls	r3, r3, #8
 800b46c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b470:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	0a1b      	lsrs	r3, r3, #8
 800b476:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b47a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	0e1b      	lsrs	r3, r3, #24
 800b480:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800b482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b484:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b486:	2300      	movs	r3, #0
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3738      	adds	r7, #56	@ 0x38
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}
 800b490:	18000f3a 	.word	0x18000f3a

0800b494 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b086      	sub	sp, #24
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4a0:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4a6:	2b1f      	cmp	r3, #31
 800b4a8:	d936      	bls.n	800b518 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	617b      	str	r3, [r7, #20]
 800b4ae:	e027      	b.n	800b500 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f001 fe3b 	bl	800d130 <SDMMC_ReadFIFO>
 800b4ba:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	b2da      	uxtb	r2, r3
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	3301      	adds	r3, #1
 800b4c8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	0a1b      	lsrs	r3, r3, #8
 800b4ce:	b2da      	uxtb	r2, r3
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	0c1b      	lsrs	r3, r3, #16
 800b4de:	b2da      	uxtb	r2, r3
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b4e4:	693b      	ldr	r3, [r7, #16]
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	0e1b      	lsrs	r3, r3, #24
 800b4ee:	b2da      	uxtb	r2, r3
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b4f4:	693b      	ldr	r3, [r7, #16]
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	3301      	adds	r3, #1
 800b4fe:	617b      	str	r3, [r7, #20]
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	2b07      	cmp	r3, #7
 800b504:	d9d4      	bls.n	800b4b0 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	693a      	ldr	r2, [r7, #16]
 800b50a:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b510:	f1a3 0220 	sub.w	r2, r3, #32
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800b518:	bf00      	nop
 800b51a:	3718      	adds	r7, #24
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}

0800b520 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b086      	sub	sp, #24
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	69db      	ldr	r3, [r3, #28]
 800b52c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6a1b      	ldr	r3, [r3, #32]
 800b532:	2b1f      	cmp	r3, #31
 800b534:	d93a      	bls.n	800b5ac <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800b536:	2300      	movs	r3, #0
 800b538:	617b      	str	r3, [r7, #20]
 800b53a:	e02b      	b.n	800b594 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	3301      	adds	r3, #1
 800b546:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	781b      	ldrb	r3, [r3, #0]
 800b54c:	021a      	lsls	r2, r3, #8
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	4313      	orrs	r3, r2
 800b552:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	3301      	adds	r3, #1
 800b558:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	781b      	ldrb	r3, [r3, #0]
 800b55e:	041a      	lsls	r2, r3, #16
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	4313      	orrs	r3, r2
 800b564:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	3301      	adds	r3, #1
 800b56a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	781b      	ldrb	r3, [r3, #0]
 800b570:	061a      	lsls	r2, r3, #24
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	4313      	orrs	r3, r2
 800b576:	60fb      	str	r3, [r7, #12]
      tmp++;
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	3301      	adds	r3, #1
 800b57c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f107 020c 	add.w	r2, r7, #12
 800b586:	4611      	mov	r1, r2
 800b588:	4618      	mov	r0, r3
 800b58a:	f001 fdde 	bl	800d14a <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	3301      	adds	r3, #1
 800b592:	617b      	str	r3, [r7, #20]
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	2b07      	cmp	r3, #7
 800b598:	d9d0      	bls.n	800b53c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	693a      	ldr	r2, [r7, #16]
 800b59e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6a1b      	ldr	r3, [r3, #32]
 800b5a4:	f1a3 0220 	sub.w	r2, r3, #32
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	621a      	str	r2, [r3, #32]
  }
}
 800b5ac:	bf00      	nop
 800b5ae:	3718      	adds	r7, #24
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b083      	sub	sp, #12
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b5bc:	bf00      	nop
 800b5be:	370c      	adds	r7, #12
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr

0800b5c8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b083      	sub	sp, #12
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b5d0:	bf00      	nop
 800b5d2:	370c      	adds	r7, #12
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr

0800b5dc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b083      	sub	sp, #12
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800b5e4:	bf00      	nop
 800b5e6:	370c      	adds	r7, #12
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr

0800b5f0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b083      	sub	sp, #12
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800b5f8:	bf00      	nop
 800b5fa:	370c      	adds	r7, #12
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b602:	4770      	bx	lr

0800b604 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b084      	sub	sp, #16
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d101      	bne.n	800b616 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b612:	2301      	movs	r3, #1
 800b614:	e10f      	b.n	800b836 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2200      	movs	r2, #0
 800b61a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4a87      	ldr	r2, [pc, #540]	@ (800b840 <HAL_SPI_Init+0x23c>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d00f      	beq.n	800b646 <HAL_SPI_Init+0x42>
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	4a86      	ldr	r2, [pc, #536]	@ (800b844 <HAL_SPI_Init+0x240>)
 800b62c:	4293      	cmp	r3, r2
 800b62e:	d00a      	beq.n	800b646 <HAL_SPI_Init+0x42>
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	4a84      	ldr	r2, [pc, #528]	@ (800b848 <HAL_SPI_Init+0x244>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d005      	beq.n	800b646 <HAL_SPI_Init+0x42>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	68db      	ldr	r3, [r3, #12]
 800b63e:	2b0f      	cmp	r3, #15
 800b640:	d901      	bls.n	800b646 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b642:	2301      	movs	r3, #1
 800b644:	e0f7      	b.n	800b836 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 fbc2 	bl	800bdd0 <SPI_GetPacketSize>
 800b64c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	4a7b      	ldr	r2, [pc, #492]	@ (800b840 <HAL_SPI_Init+0x23c>)
 800b654:	4293      	cmp	r3, r2
 800b656:	d00c      	beq.n	800b672 <HAL_SPI_Init+0x6e>
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	4a79      	ldr	r2, [pc, #484]	@ (800b844 <HAL_SPI_Init+0x240>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d007      	beq.n	800b672 <HAL_SPI_Init+0x6e>
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	4a78      	ldr	r2, [pc, #480]	@ (800b848 <HAL_SPI_Init+0x244>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d002      	beq.n	800b672 <HAL_SPI_Init+0x6e>
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2b08      	cmp	r3, #8
 800b670:	d811      	bhi.n	800b696 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b676:	4a72      	ldr	r2, [pc, #456]	@ (800b840 <HAL_SPI_Init+0x23c>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d009      	beq.n	800b690 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4a70      	ldr	r2, [pc, #448]	@ (800b844 <HAL_SPI_Init+0x240>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d004      	beq.n	800b690 <HAL_SPI_Init+0x8c>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	4a6f      	ldr	r2, [pc, #444]	@ (800b848 <HAL_SPI_Init+0x244>)
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d104      	bne.n	800b69a <HAL_SPI_Init+0x96>
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2b10      	cmp	r3, #16
 800b694:	d901      	bls.n	800b69a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b696:	2301      	movs	r3, #1
 800b698:	e0cd      	b.n	800b836 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b6a0:	b2db      	uxtb	r3, r3
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d106      	bne.n	800b6b4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f000 f8cc 	bl	800b84c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2202      	movs	r2, #2
 800b6b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	681a      	ldr	r2, [r3, #0]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f022 0201 	bic.w	r2, r2, #1
 800b6ca:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	689b      	ldr	r3, [r3, #8]
 800b6d2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b6d6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	699b      	ldr	r3, [r3, #24]
 800b6dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b6e0:	d119      	bne.n	800b716 <HAL_SPI_Init+0x112>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b6ea:	d103      	bne.n	800b6f4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d008      	beq.n	800b706 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d10c      	bne.n	800b716 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b700:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b704:	d107      	bne.n	800b716 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	681a      	ldr	r2, [r3, #0]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b714:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d00f      	beq.n	800b742 <HAL_SPI_Init+0x13e>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	68db      	ldr	r3, [r3, #12]
 800b726:	2b06      	cmp	r3, #6
 800b728:	d90b      	bls.n	800b742 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	430a      	orrs	r2, r1
 800b73e:	601a      	str	r2, [r3, #0]
 800b740:	e007      	b.n	800b752 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	681a      	ldr	r2, [r3, #0]
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b750:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	69da      	ldr	r2, [r3, #28]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b75a:	431a      	orrs	r2, r3
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	431a      	orrs	r2, r3
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b764:	ea42 0103 	orr.w	r1, r2, r3
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	68da      	ldr	r2, [r3, #12]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	430a      	orrs	r2, r1
 800b772:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b77c:	431a      	orrs	r2, r3
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b782:	431a      	orrs	r2, r3
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	699b      	ldr	r3, [r3, #24]
 800b788:	431a      	orrs	r2, r3
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	691b      	ldr	r3, [r3, #16]
 800b78e:	431a      	orrs	r2, r3
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	695b      	ldr	r3, [r3, #20]
 800b794:	431a      	orrs	r2, r3
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6a1b      	ldr	r3, [r3, #32]
 800b79a:	431a      	orrs	r2, r3
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	685b      	ldr	r3, [r3, #4]
 800b7a0:	431a      	orrs	r2, r3
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b7a6:	431a      	orrs	r2, r3
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	689b      	ldr	r3, [r3, #8]
 800b7ac:	431a      	orrs	r2, r3
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b7b2:	ea42 0103 	orr.w	r1, r2, r3
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	430a      	orrs	r2, r1
 800b7c0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	685b      	ldr	r3, [r3, #4]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d113      	bne.n	800b7f2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	689b      	ldr	r3, [r3, #8]
 800b7d0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b7dc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	689b      	ldr	r3, [r3, #8]
 800b7e4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b7f0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f022 0201 	bic.w	r2, r2, #1
 800b800:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	685b      	ldr	r3, [r3, #4]
 800b806:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d00a      	beq.n	800b824 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	68db      	ldr	r3, [r3, #12]
 800b814:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	430a      	orrs	r2, r1
 800b822:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2200      	movs	r2, #0
 800b828:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2201      	movs	r2, #1
 800b830:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800b834:	2300      	movs	r3, #0
}
 800b836:	4618      	mov	r0, r3
 800b838:	3710      	adds	r7, #16
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	40013000 	.word	0x40013000
 800b844:	40003800 	.word	0x40003800
 800b848:	40003c00 	.word	0x40003c00

0800b84c <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800b84c:	b480      	push	{r7}
 800b84e:	b083      	sub	sp, #12
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800b854:	bf00      	nop
 800b856:	370c      	adds	r7, #12
 800b858:	46bd      	mov	sp, r7
 800b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85e:	4770      	bx	lr

0800b860 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b084      	sub	sp, #16
 800b864:	af00      	add	r7, sp, #0
 800b866:	60f8      	str	r0, [r7, #12]
 800b868:	60b9      	str	r1, [r7, #8]
 800b86a:	607a      	str	r2, [r7, #4]
 800b86c:	807b      	strh	r3, [r7, #2]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b874:	b2db      	uxtb	r3, r3
 800b876:	2b01      	cmp	r3, #1
 800b878:	d001      	beq.n	800b87e <HAL_SPI_TransmitReceive_DMA+0x1e>
  {
    return HAL_BUSY;
 800b87a:	2302      	movs	r3, #2
 800b87c:	e18a      	b.n	800bb94 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d005      	beq.n	800b890 <HAL_SPI_TransmitReceive_DMA+0x30>
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d002      	beq.n	800b890 <HAL_SPI_TransmitReceive_DMA+0x30>
 800b88a:	887b      	ldrh	r3, [r7, #2]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d101      	bne.n	800b894 <HAL_SPI_TransmitReceive_DMA+0x34>
  {
    return HAL_ERROR;
 800b890:	2301      	movs	r3, #1
 800b892:	e17f      	b.n	800bb94 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b89a:	2b01      	cmp	r3, #1
 800b89c:	d101      	bne.n	800b8a2 <HAL_SPI_TransmitReceive_DMA+0x42>
 800b89e:	2302      	movs	r3, #2
 800b8a0:	e178      	b.n	800bb94 <HAL_SPI_TransmitReceive_DMA+0x334>
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	2201      	movs	r2, #1
 800b8a6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	2205      	movs	r2, #5
 800b8ae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	68ba      	ldr	r2, [r7, #8]
 800b8be:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	887a      	ldrh	r2, [r7, #2]
 800b8c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	887a      	ldrh	r2, [r7, #2]
 800b8cc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	687a      	ldr	r2, [r7, #4]
 800b8d4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	887a      	ldrh	r2, [r7, #2]
 800b8da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	887a      	ldrh	r2, [r7, #2]
 800b8e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	68da      	ldr	r2, [r3, #12]
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800b900:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	689a      	ldr	r2, [r3, #8]
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b910:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	68db      	ldr	r3, [r3, #12]
 800b916:	2b0f      	cmp	r3, #15
 800b918:	d905      	bls.n	800b926 <HAL_SPI_TransmitReceive_DMA+0xc6>
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b91e:	699b      	ldr	r3, [r3, #24]
 800b920:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b924:	d10f      	bne.n	800b946 <HAL_SPI_TransmitReceive_DMA+0xe6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b92a:	2b07      	cmp	r3, #7
 800b92c:	d911      	bls.n	800b952 <HAL_SPI_TransmitReceive_DMA+0xf2>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b932:	699b      	ldr	r3, [r3, #24]
 800b934:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b938:	d00b      	beq.n	800b952 <HAL_SPI_TransmitReceive_DMA+0xf2>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b93e:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b940:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b944:	d005      	beq.n	800b952 <HAL_SPI_TransmitReceive_DMA+0xf2>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2200      	movs	r2, #0
 800b94a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800b94e:	2301      	movs	r3, #1
 800b950:	e120      	b.n	800bb94 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	68db      	ldr	r3, [r3, #12]
 800b956:	2b07      	cmp	r3, #7
 800b958:	d840      	bhi.n	800b9dc <HAL_SPI_TransmitReceive_DMA+0x17c>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b95e:	699b      	ldr	r3, [r3, #24]
 800b960:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b964:	d109      	bne.n	800b97a <HAL_SPI_TransmitReceive_DMA+0x11a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b96c:	b29b      	uxth	r3, r3
 800b96e:	3301      	adds	r3, #1
 800b970:	105b      	asrs	r3, r3, #1
 800b972:	b29a      	uxth	r2, r3
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b97e:	699b      	ldr	r3, [r3, #24]
 800b980:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b984:	d109      	bne.n	800b99a <HAL_SPI_TransmitReceive_DMA+0x13a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b98c:	b29b      	uxth	r3, r3
 800b98e:	3303      	adds	r3, #3
 800b990:	109b      	asrs	r3, r3, #2
 800b992:	b29a      	uxth	r2, r3
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b99e:	699b      	ldr	r3, [r3, #24]
 800b9a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b9a4:	d109      	bne.n	800b9ba <HAL_SPI_TransmitReceive_DMA+0x15a>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b9ac:	b29b      	uxth	r3, r3
 800b9ae:	3301      	adds	r3, #1
 800b9b0:	105b      	asrs	r3, r3, #1
 800b9b2:	b29a      	uxth	r2, r3
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b9be:	699b      	ldr	r3, [r3, #24]
 800b9c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b9c4:	d12e      	bne.n	800ba24 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b9cc:	b29b      	uxth	r3, r3
 800b9ce:	3303      	adds	r3, #3
 800b9d0:	109b      	asrs	r3, r3, #2
 800b9d2:	b29a      	uxth	r2, r3
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b9da:	e023      	b.n	800ba24 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	68db      	ldr	r3, [r3, #12]
 800b9e0:	2b0f      	cmp	r3, #15
 800b9e2:	d81f      	bhi.n	800ba24 <HAL_SPI_TransmitReceive_DMA+0x1c4>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b9e8:	699b      	ldr	r3, [r3, #24]
 800b9ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b9ee:	d109      	bne.n	800ba04 <HAL_SPI_TransmitReceive_DMA+0x1a4>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b9f6:	b29b      	uxth	r3, r3
 800b9f8:	3301      	adds	r3, #1
 800b9fa:	105b      	asrs	r3, r3, #1
 800b9fc:	b29a      	uxth	r2, r3
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ba08:	699b      	ldr	r3, [r3, #24]
 800ba0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ba0e:	d109      	bne.n	800ba24 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ba16:	b29b      	uxth	r3, r3
 800ba18:	3301      	adds	r3, #1
 800ba1a:	105b      	asrs	r3, r3, #1
 800ba1c:	b29a      	uxth	r2, r3
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ba28:	4a5c      	ldr	r2, [pc, #368]	@ (800bb9c <HAL_SPI_TransmitReceive_DMA+0x33c>)
 800ba2a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ba30:	4a5b      	ldr	r2, [pc, #364]	@ (800bba0 <HAL_SPI_TransmitReceive_DMA+0x340>)
 800ba32:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ba38:	4a5a      	ldr	r2, [pc, #360]	@ (800bba4 <HAL_SPI_TransmitReceive_DMA+0x344>)
 800ba3a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ba40:	2200      	movs	r2, #0
 800ba42:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	3330      	adds	r3, #48	@ 0x30
 800ba4e:	4619      	mov	r1, r3
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba54:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ba5c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800ba5e:	f7f9 f923 	bl	8004ca8 <HAL_DMA_Start_IT>
 800ba62:	4603      	mov	r3, r0
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d011      	beq.n	800ba8c <HAL_SPI_TransmitReceive_DMA+0x22c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba6e:	f043 0210 	orr.w	r2, r3, #16
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	2200      	movs	r2, #0
 800ba84:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800ba88:	2301      	movs	r3, #1
 800ba8a:	e083      	b.n	800bb94 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	689a      	ldr	r2, [r3, #8]
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ba9a:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800baa0:	2200      	movs	r2, #0
 800baa2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800baa8:	2200      	movs	r2, #0
 800baaa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bab0:	2200      	movs	r2, #0
 800bab2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bab8:	4a3a      	ldr	r2, [pc, #232]	@ (800bba4 <HAL_SPI_TransmitReceive_DMA+0x344>)
 800baba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bac4:	4619      	mov	r1, r3
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	3320      	adds	r3, #32
 800bacc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800bad4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800bad6:	f7f9 f8e7 	bl	8004ca8 <HAL_DMA_Start_IT>
 800bada:	4603      	mov	r3, r0
 800badc:	2b00      	cmp	r3, #0
 800bade:	d016      	beq.n	800bb0e <HAL_SPI_TransmitReceive_DMA+0x2ae>
  {
    /* Abort Rx DMA Channel already started */
    (void)HAL_DMA_Abort(hspi->hdmarx);
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bae4:	4618      	mov	r0, r3
 800bae6:	f7f9 fb49 	bl	800517c <HAL_DMA_Abort>

    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800baf0:	f043 0210 	orr.w	r2, r3, #16
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2201      	movs	r2, #1
 800bafe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2200      	movs	r2, #0
 800bb06:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	e042      	b.n	800bb94 <HAL_SPI_TransmitReceive_DMA+0x334>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bb12:	69db      	ldr	r3, [r3, #28]
 800bb14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb18:	d108      	bne.n	800bb2c <HAL_SPI_TransmitReceive_DMA+0x2cc>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	6859      	ldr	r1, [r3, #4]
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681a      	ldr	r2, [r3, #0]
 800bb24:	4b20      	ldr	r3, [pc, #128]	@ (800bba8 <HAL_SPI_TransmitReceive_DMA+0x348>)
 800bb26:	400b      	ands	r3, r1
 800bb28:	6053      	str	r3, [r2, #4]
 800bb2a:	e009      	b.n	800bb40 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	685a      	ldr	r2, [r3, #4]
 800bb32:	4b1d      	ldr	r3, [pc, #116]	@ (800bba8 <HAL_SPI_TransmitReceive_DMA+0x348>)
 800bb34:	4013      	ands	r3, r2
 800bb36:	8879      	ldrh	r1, [r7, #2]
 800bb38:	68fa      	ldr	r2, [r7, #12]
 800bb3a:	6812      	ldr	r2, [r2, #0]
 800bb3c:	430b      	orrs	r3, r1
 800bb3e:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	689a      	ldr	r2, [r3, #8]
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bb4e:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	691a      	ldr	r2, [r3, #16]
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 800bb5e:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	681a      	ldr	r2, [r3, #0]
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	f042 0201 	orr.w	r2, r2, #1
 800bb6e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	685b      	ldr	r3, [r3, #4]
 800bb74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bb78:	d107      	bne.n	800bb8a <HAL_SPI_TransmitReceive_DMA+0x32a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	681a      	ldr	r2, [r3, #0]
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bb88:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800bb92:	2300      	movs	r3, #0
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3710      	adds	r7, #16
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}
 800bb9c:	0800bc2f 	.word	0x0800bc2f
 800bba0:	0800bbe9 	.word	0x0800bbe9
 800bba4:	0800bc4b 	.word	0x0800bc4b
 800bba8:	ffff0000 	.word	0xffff0000

0800bbac <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bbac:	b480      	push	{r7}
 800bbae:	b083      	sub	sp, #12
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800bbb4:	bf00      	nop
 800bbb6:	370c      	adds	r7, #12
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr

0800bbc0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b083      	sub	sp, #12
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800bbc8:	bf00      	nop
 800bbca:	370c      	adds	r7, #12
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr

0800bbd4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b083      	sub	sp, #12
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800bbdc:	bf00      	nop
 800bbde:	370c      	adds	r7, #12
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr

0800bbe8 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbf4:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	2b07      	cmp	r3, #7
 800bc00:	d011      	beq.n	800bc26 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bc06:	69db      	ldr	r3, [r3, #28]
 800bc08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc0c:	d103      	bne.n	800bc16 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800bc0e:	68f8      	ldr	r0, [r7, #12]
 800bc10:	f7ff ffcc 	bl	800bbac <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800bc14:	e007      	b.n	800bc26 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	691a      	ldr	r2, [r3, #16]
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f042 0208 	orr.w	r2, r2, #8
 800bc24:	611a      	str	r2, [r3, #16]
}
 800bc26:	bf00      	nop
 800bc28:	3710      	adds	r7, #16
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}

0800bc2e <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bc2e:	b580      	push	{r7, lr}
 800bc30:	b084      	sub	sp, #16
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc3a:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800bc3c:	68f8      	ldr	r0, [r7, #12]
 800bc3e:	f7ff ffbf 	bl	800bbc0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bc42:	bf00      	nop
 800bc44:	3710      	adds	r7, #16
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}

0800bc4a <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800bc4a:	b580      	push	{r7, lr}
 800bc4c:	b084      	sub	sp, #16
 800bc4e:	af00      	add	r7, sp, #0
 800bc50:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc56:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f7f9 fdad 	bl	80057b8 <HAL_DMA_GetError>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	2b02      	cmp	r3, #2
 800bc62:	d011      	beq.n	800bc88 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800bc64:	68f8      	ldr	r0, [r7, #12]
 800bc66:	f000 f813 	bl	800bc90 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc70:	f043 0210 	orr.w	r2, r3, #16
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2201      	movs	r2, #1
 800bc7e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800bc82:	68f8      	ldr	r0, [r7, #12]
 800bc84:	f7ff ffa6 	bl	800bbd4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800bc88:	bf00      	nop
 800bc8a:	3710      	adds	r7, #16
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b085      	sub	sp, #20
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	695b      	ldr	r3, [r3, #20]
 800bc9e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	699a      	ldr	r2, [r3, #24]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f042 0208 	orr.w	r2, r2, #8
 800bcae:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	699a      	ldr	r2, [r3, #24]
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f042 0210 	orr.w	r2, r2, #16
 800bcbe:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	681a      	ldr	r2, [r3, #0]
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f022 0201 	bic.w	r2, r2, #1
 800bcce:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	6919      	ldr	r1, [r3, #16]
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681a      	ldr	r2, [r3, #0]
 800bcda:	4b3c      	ldr	r3, [pc, #240]	@ (800bdcc <SPI_CloseTransfer+0x13c>)
 800bcdc:	400b      	ands	r3, r1
 800bcde:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	689a      	ldr	r2, [r3, #8]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800bcee:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bcf6:	b2db      	uxtb	r3, r3
 800bcf8:	2b04      	cmp	r3, #4
 800bcfa:	d014      	beq.n	800bd26 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f003 0320 	and.w	r3, r3, #32
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d00f      	beq.n	800bd26 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd0c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	699a      	ldr	r2, [r3, #24]
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	f042 0220 	orr.w	r2, r2, #32
 800bd24:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bd2c:	b2db      	uxtb	r3, r3
 800bd2e:	2b03      	cmp	r3, #3
 800bd30:	d014      	beq.n	800bd5c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d00f      	beq.n	800bd5c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd42:	f043 0204 	orr.w	r2, r3, #4
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	699a      	ldr	r2, [r3, #24]
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bd5a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d00f      	beq.n	800bd86 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd6c:	f043 0201 	orr.w	r2, r3, #1
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	699a      	ldr	r2, [r3, #24]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bd84:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d00f      	beq.n	800bdb0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd96:	f043 0208 	orr.w	r2, r3, #8
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	699a      	ldr	r2, [r3, #24]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bdae:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800bdc0:	bf00      	nop
 800bdc2:	3714      	adds	r7, #20
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdca:	4770      	bx	lr
 800bdcc:	fffffc90 	.word	0xfffffc90

0800bdd0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b085      	sub	sp, #20
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bddc:	095b      	lsrs	r3, r3, #5
 800bdde:	3301      	adds	r3, #1
 800bde0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	68db      	ldr	r3, [r3, #12]
 800bde6:	3301      	adds	r3, #1
 800bde8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	3307      	adds	r3, #7
 800bdee:	08db      	lsrs	r3, r3, #3
 800bdf0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	68fa      	ldr	r2, [r7, #12]
 800bdf6:	fb02 f303 	mul.w	r3, r2, r3
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3714      	adds	r7, #20
 800bdfe:	46bd      	mov	sp, r7
 800be00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be04:	4770      	bx	lr

0800be06 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800be06:	b580      	push	{r7, lr}
 800be08:	b082      	sub	sp, #8
 800be0a:	af00      	add	r7, sp, #0
 800be0c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d101      	bne.n	800be18 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800be14:	2301      	movs	r3, #1
 800be16:	e042      	b.n	800be9e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d106      	bne.n	800be30 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2200      	movs	r2, #0
 800be26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f7f7 fbfc 	bl	8003628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2224      	movs	r2, #36	@ 0x24
 800be34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	681a      	ldr	r2, [r3, #0]
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	f022 0201 	bic.w	r2, r2, #1
 800be46:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d002      	beq.n	800be56 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f000 fe1f 	bl	800ca94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f000 f8b4 	bl	800bfc4 <UART_SetConfig>
 800be5c:	4603      	mov	r3, r0
 800be5e:	2b01      	cmp	r3, #1
 800be60:	d101      	bne.n	800be66 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800be62:	2301      	movs	r3, #1
 800be64:	e01b      	b.n	800be9e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	685a      	ldr	r2, [r3, #4]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800be74:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	689a      	ldr	r2, [r3, #8]
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800be84:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f042 0201 	orr.w	r2, r2, #1
 800be94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 fe9e 	bl	800cbd8 <UART_CheckIdleState>
 800be9c:	4603      	mov	r3, r0
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3708      	adds	r7, #8
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}

0800bea6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bea6:	b580      	push	{r7, lr}
 800bea8:	b08a      	sub	sp, #40	@ 0x28
 800beaa:	af02      	add	r7, sp, #8
 800beac:	60f8      	str	r0, [r7, #12]
 800beae:	60b9      	str	r1, [r7, #8]
 800beb0:	603b      	str	r3, [r7, #0]
 800beb2:	4613      	mov	r3, r2
 800beb4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bebc:	2b20      	cmp	r3, #32
 800bebe:	d17b      	bne.n	800bfb8 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d002      	beq.n	800becc <HAL_UART_Transmit+0x26>
 800bec6:	88fb      	ldrh	r3, [r7, #6]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d101      	bne.n	800bed0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800becc:	2301      	movs	r3, #1
 800bece:	e074      	b.n	800bfba <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2200      	movs	r2, #0
 800bed4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2221      	movs	r2, #33	@ 0x21
 800bedc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bee0:	f7f8 f9c2 	bl	8004268 <HAL_GetTick>
 800bee4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	88fa      	ldrh	r2, [r7, #6]
 800beea:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	88fa      	ldrh	r2, [r7, #6]
 800bef2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	689b      	ldr	r3, [r3, #8]
 800befa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800befe:	d108      	bne.n	800bf12 <HAL_UART_Transmit+0x6c>
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	691b      	ldr	r3, [r3, #16]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d104      	bne.n	800bf12 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	61bb      	str	r3, [r7, #24]
 800bf10:	e003      	b.n	800bf1a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bf16:	2300      	movs	r3, #0
 800bf18:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bf1a:	e030      	b.n	800bf7e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	9300      	str	r3, [sp, #0]
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	2200      	movs	r2, #0
 800bf24:	2180      	movs	r1, #128	@ 0x80
 800bf26:	68f8      	ldr	r0, [r7, #12]
 800bf28:	f000 ff00 	bl	800cd2c <UART_WaitOnFlagUntilTimeout>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d005      	beq.n	800bf3e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2220      	movs	r2, #32
 800bf36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800bf3a:	2303      	movs	r3, #3
 800bf3c:	e03d      	b.n	800bfba <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800bf3e:	69fb      	ldr	r3, [r7, #28]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d10b      	bne.n	800bf5c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bf44:	69bb      	ldr	r3, [r7, #24]
 800bf46:	881b      	ldrh	r3, [r3, #0]
 800bf48:	461a      	mov	r2, r3
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bf52:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800bf54:	69bb      	ldr	r3, [r7, #24]
 800bf56:	3302      	adds	r3, #2
 800bf58:	61bb      	str	r3, [r7, #24]
 800bf5a:	e007      	b.n	800bf6c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bf5c:	69fb      	ldr	r3, [r7, #28]
 800bf5e:	781a      	ldrb	r2, [r3, #0]
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800bf66:	69fb      	ldr	r3, [r7, #28]
 800bf68:	3301      	adds	r3, #1
 800bf6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bf72:	b29b      	uxth	r3, r3
 800bf74:	3b01      	subs	r3, #1
 800bf76:	b29a      	uxth	r2, r3
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bf84:	b29b      	uxth	r3, r3
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d1c8      	bne.n	800bf1c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	9300      	str	r3, [sp, #0]
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	2200      	movs	r2, #0
 800bf92:	2140      	movs	r1, #64	@ 0x40
 800bf94:	68f8      	ldr	r0, [r7, #12]
 800bf96:	f000 fec9 	bl	800cd2c <UART_WaitOnFlagUntilTimeout>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d005      	beq.n	800bfac <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2220      	movs	r2, #32
 800bfa4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800bfa8:	2303      	movs	r3, #3
 800bfaa:	e006      	b.n	800bfba <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2220      	movs	r2, #32
 800bfb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	e000      	b.n	800bfba <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800bfb8:	2302      	movs	r3, #2
  }
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3720      	adds	r7, #32
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}
	...

0800bfc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bfc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bfc8:	b092      	sub	sp, #72	@ 0x48
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	689a      	ldr	r2, [r3, #8]
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	691b      	ldr	r3, [r3, #16]
 800bfdc:	431a      	orrs	r2, r3
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	695b      	ldr	r3, [r3, #20]
 800bfe2:	431a      	orrs	r2, r3
 800bfe4:	697b      	ldr	r3, [r7, #20]
 800bfe6:	69db      	ldr	r3, [r3, #28]
 800bfe8:	4313      	orrs	r3, r2
 800bfea:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	681a      	ldr	r2, [r3, #0]
 800bff2:	4bbe      	ldr	r3, [pc, #760]	@ (800c2ec <UART_SetConfig+0x328>)
 800bff4:	4013      	ands	r3, r2
 800bff6:	697a      	ldr	r2, [r7, #20]
 800bff8:	6812      	ldr	r2, [r2, #0]
 800bffa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bffc:	430b      	orrs	r3, r1
 800bffe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	685b      	ldr	r3, [r3, #4]
 800c006:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	68da      	ldr	r2, [r3, #12]
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	430a      	orrs	r2, r1
 800c014:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	699b      	ldr	r3, [r3, #24]
 800c01a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c01c:	697b      	ldr	r3, [r7, #20]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	4ab3      	ldr	r2, [pc, #716]	@ (800c2f0 <UART_SetConfig+0x32c>)
 800c022:	4293      	cmp	r3, r2
 800c024:	d004      	beq.n	800c030 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	6a1b      	ldr	r3, [r3, #32]
 800c02a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c02c:	4313      	orrs	r3, r2
 800c02e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	689a      	ldr	r2, [r3, #8]
 800c036:	4baf      	ldr	r3, [pc, #700]	@ (800c2f4 <UART_SetConfig+0x330>)
 800c038:	4013      	ands	r3, r2
 800c03a:	697a      	ldr	r2, [r7, #20]
 800c03c:	6812      	ldr	r2, [r2, #0]
 800c03e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c040:	430b      	orrs	r3, r1
 800c042:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c04a:	f023 010f 	bic.w	r1, r3, #15
 800c04e:	697b      	ldr	r3, [r7, #20]
 800c050:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	430a      	orrs	r2, r1
 800c058:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	4aa6      	ldr	r2, [pc, #664]	@ (800c2f8 <UART_SetConfig+0x334>)
 800c060:	4293      	cmp	r3, r2
 800c062:	d177      	bne.n	800c154 <UART_SetConfig+0x190>
 800c064:	4ba5      	ldr	r3, [pc, #660]	@ (800c2fc <UART_SetConfig+0x338>)
 800c066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c068:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c06c:	2b28      	cmp	r3, #40	@ 0x28
 800c06e:	d86d      	bhi.n	800c14c <UART_SetConfig+0x188>
 800c070:	a201      	add	r2, pc, #4	@ (adr r2, 800c078 <UART_SetConfig+0xb4>)
 800c072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c076:	bf00      	nop
 800c078:	0800c11d 	.word	0x0800c11d
 800c07c:	0800c14d 	.word	0x0800c14d
 800c080:	0800c14d 	.word	0x0800c14d
 800c084:	0800c14d 	.word	0x0800c14d
 800c088:	0800c14d 	.word	0x0800c14d
 800c08c:	0800c14d 	.word	0x0800c14d
 800c090:	0800c14d 	.word	0x0800c14d
 800c094:	0800c14d 	.word	0x0800c14d
 800c098:	0800c125 	.word	0x0800c125
 800c09c:	0800c14d 	.word	0x0800c14d
 800c0a0:	0800c14d 	.word	0x0800c14d
 800c0a4:	0800c14d 	.word	0x0800c14d
 800c0a8:	0800c14d 	.word	0x0800c14d
 800c0ac:	0800c14d 	.word	0x0800c14d
 800c0b0:	0800c14d 	.word	0x0800c14d
 800c0b4:	0800c14d 	.word	0x0800c14d
 800c0b8:	0800c12d 	.word	0x0800c12d
 800c0bc:	0800c14d 	.word	0x0800c14d
 800c0c0:	0800c14d 	.word	0x0800c14d
 800c0c4:	0800c14d 	.word	0x0800c14d
 800c0c8:	0800c14d 	.word	0x0800c14d
 800c0cc:	0800c14d 	.word	0x0800c14d
 800c0d0:	0800c14d 	.word	0x0800c14d
 800c0d4:	0800c14d 	.word	0x0800c14d
 800c0d8:	0800c135 	.word	0x0800c135
 800c0dc:	0800c14d 	.word	0x0800c14d
 800c0e0:	0800c14d 	.word	0x0800c14d
 800c0e4:	0800c14d 	.word	0x0800c14d
 800c0e8:	0800c14d 	.word	0x0800c14d
 800c0ec:	0800c14d 	.word	0x0800c14d
 800c0f0:	0800c14d 	.word	0x0800c14d
 800c0f4:	0800c14d 	.word	0x0800c14d
 800c0f8:	0800c13d 	.word	0x0800c13d
 800c0fc:	0800c14d 	.word	0x0800c14d
 800c100:	0800c14d 	.word	0x0800c14d
 800c104:	0800c14d 	.word	0x0800c14d
 800c108:	0800c14d 	.word	0x0800c14d
 800c10c:	0800c14d 	.word	0x0800c14d
 800c110:	0800c14d 	.word	0x0800c14d
 800c114:	0800c14d 	.word	0x0800c14d
 800c118:	0800c145 	.word	0x0800c145
 800c11c:	2301      	movs	r3, #1
 800c11e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c122:	e222      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c124:	2304      	movs	r3, #4
 800c126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c12a:	e21e      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c12c:	2308      	movs	r3, #8
 800c12e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c132:	e21a      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c134:	2310      	movs	r3, #16
 800c136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c13a:	e216      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c13c:	2320      	movs	r3, #32
 800c13e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c142:	e212      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c144:	2340      	movs	r3, #64	@ 0x40
 800c146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c14a:	e20e      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c14c:	2380      	movs	r3, #128	@ 0x80
 800c14e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c152:	e20a      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c154:	697b      	ldr	r3, [r7, #20]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4a69      	ldr	r2, [pc, #420]	@ (800c300 <UART_SetConfig+0x33c>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d130      	bne.n	800c1c0 <UART_SetConfig+0x1fc>
 800c15e:	4b67      	ldr	r3, [pc, #412]	@ (800c2fc <UART_SetConfig+0x338>)
 800c160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c162:	f003 0307 	and.w	r3, r3, #7
 800c166:	2b05      	cmp	r3, #5
 800c168:	d826      	bhi.n	800c1b8 <UART_SetConfig+0x1f4>
 800c16a:	a201      	add	r2, pc, #4	@ (adr r2, 800c170 <UART_SetConfig+0x1ac>)
 800c16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c170:	0800c189 	.word	0x0800c189
 800c174:	0800c191 	.word	0x0800c191
 800c178:	0800c199 	.word	0x0800c199
 800c17c:	0800c1a1 	.word	0x0800c1a1
 800c180:	0800c1a9 	.word	0x0800c1a9
 800c184:	0800c1b1 	.word	0x0800c1b1
 800c188:	2300      	movs	r3, #0
 800c18a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c18e:	e1ec      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c190:	2304      	movs	r3, #4
 800c192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c196:	e1e8      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c198:	2308      	movs	r3, #8
 800c19a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c19e:	e1e4      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c1a0:	2310      	movs	r3, #16
 800c1a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1a6:	e1e0      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c1a8:	2320      	movs	r3, #32
 800c1aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1ae:	e1dc      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c1b0:	2340      	movs	r3, #64	@ 0x40
 800c1b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1b6:	e1d8      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c1b8:	2380      	movs	r3, #128	@ 0x80
 800c1ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1be:	e1d4      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	4a4f      	ldr	r2, [pc, #316]	@ (800c304 <UART_SetConfig+0x340>)
 800c1c6:	4293      	cmp	r3, r2
 800c1c8:	d130      	bne.n	800c22c <UART_SetConfig+0x268>
 800c1ca:	4b4c      	ldr	r3, [pc, #304]	@ (800c2fc <UART_SetConfig+0x338>)
 800c1cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1ce:	f003 0307 	and.w	r3, r3, #7
 800c1d2:	2b05      	cmp	r3, #5
 800c1d4:	d826      	bhi.n	800c224 <UART_SetConfig+0x260>
 800c1d6:	a201      	add	r2, pc, #4	@ (adr r2, 800c1dc <UART_SetConfig+0x218>)
 800c1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1dc:	0800c1f5 	.word	0x0800c1f5
 800c1e0:	0800c1fd 	.word	0x0800c1fd
 800c1e4:	0800c205 	.word	0x0800c205
 800c1e8:	0800c20d 	.word	0x0800c20d
 800c1ec:	0800c215 	.word	0x0800c215
 800c1f0:	0800c21d 	.word	0x0800c21d
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1fa:	e1b6      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c1fc:	2304      	movs	r3, #4
 800c1fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c202:	e1b2      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c204:	2308      	movs	r3, #8
 800c206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c20a:	e1ae      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c20c:	2310      	movs	r3, #16
 800c20e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c212:	e1aa      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c214:	2320      	movs	r3, #32
 800c216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c21a:	e1a6      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c21c:	2340      	movs	r3, #64	@ 0x40
 800c21e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c222:	e1a2      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c224:	2380      	movs	r3, #128	@ 0x80
 800c226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c22a:	e19e      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	4a35      	ldr	r2, [pc, #212]	@ (800c308 <UART_SetConfig+0x344>)
 800c232:	4293      	cmp	r3, r2
 800c234:	d130      	bne.n	800c298 <UART_SetConfig+0x2d4>
 800c236:	4b31      	ldr	r3, [pc, #196]	@ (800c2fc <UART_SetConfig+0x338>)
 800c238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c23a:	f003 0307 	and.w	r3, r3, #7
 800c23e:	2b05      	cmp	r3, #5
 800c240:	d826      	bhi.n	800c290 <UART_SetConfig+0x2cc>
 800c242:	a201      	add	r2, pc, #4	@ (adr r2, 800c248 <UART_SetConfig+0x284>)
 800c244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c248:	0800c261 	.word	0x0800c261
 800c24c:	0800c269 	.word	0x0800c269
 800c250:	0800c271 	.word	0x0800c271
 800c254:	0800c279 	.word	0x0800c279
 800c258:	0800c281 	.word	0x0800c281
 800c25c:	0800c289 	.word	0x0800c289
 800c260:	2300      	movs	r3, #0
 800c262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c266:	e180      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c268:	2304      	movs	r3, #4
 800c26a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c26e:	e17c      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c270:	2308      	movs	r3, #8
 800c272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c276:	e178      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c278:	2310      	movs	r3, #16
 800c27a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c27e:	e174      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c280:	2320      	movs	r3, #32
 800c282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c286:	e170      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c288:	2340      	movs	r3, #64	@ 0x40
 800c28a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c28e:	e16c      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c290:	2380      	movs	r3, #128	@ 0x80
 800c292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c296:	e168      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	4a1b      	ldr	r2, [pc, #108]	@ (800c30c <UART_SetConfig+0x348>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d142      	bne.n	800c328 <UART_SetConfig+0x364>
 800c2a2:	4b16      	ldr	r3, [pc, #88]	@ (800c2fc <UART_SetConfig+0x338>)
 800c2a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2a6:	f003 0307 	and.w	r3, r3, #7
 800c2aa:	2b05      	cmp	r3, #5
 800c2ac:	d838      	bhi.n	800c320 <UART_SetConfig+0x35c>
 800c2ae:	a201      	add	r2, pc, #4	@ (adr r2, 800c2b4 <UART_SetConfig+0x2f0>)
 800c2b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2b4:	0800c2cd 	.word	0x0800c2cd
 800c2b8:	0800c2d5 	.word	0x0800c2d5
 800c2bc:	0800c2dd 	.word	0x0800c2dd
 800c2c0:	0800c2e5 	.word	0x0800c2e5
 800c2c4:	0800c311 	.word	0x0800c311
 800c2c8:	0800c319 	.word	0x0800c319
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2d2:	e14a      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c2d4:	2304      	movs	r3, #4
 800c2d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2da:	e146      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c2dc:	2308      	movs	r3, #8
 800c2de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2e2:	e142      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c2e4:	2310      	movs	r3, #16
 800c2e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ea:	e13e      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c2ec:	cfff69f3 	.word	0xcfff69f3
 800c2f0:	58000c00 	.word	0x58000c00
 800c2f4:	11fff4ff 	.word	0x11fff4ff
 800c2f8:	40011000 	.word	0x40011000
 800c2fc:	58024400 	.word	0x58024400
 800c300:	40004400 	.word	0x40004400
 800c304:	40004800 	.word	0x40004800
 800c308:	40004c00 	.word	0x40004c00
 800c30c:	40005000 	.word	0x40005000
 800c310:	2320      	movs	r3, #32
 800c312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c316:	e128      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c318:	2340      	movs	r3, #64	@ 0x40
 800c31a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c31e:	e124      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c320:	2380      	movs	r3, #128	@ 0x80
 800c322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c326:	e120      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	4acb      	ldr	r2, [pc, #812]	@ (800c65c <UART_SetConfig+0x698>)
 800c32e:	4293      	cmp	r3, r2
 800c330:	d176      	bne.n	800c420 <UART_SetConfig+0x45c>
 800c332:	4bcb      	ldr	r3, [pc, #812]	@ (800c660 <UART_SetConfig+0x69c>)
 800c334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c336:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c33a:	2b28      	cmp	r3, #40	@ 0x28
 800c33c:	d86c      	bhi.n	800c418 <UART_SetConfig+0x454>
 800c33e:	a201      	add	r2, pc, #4	@ (adr r2, 800c344 <UART_SetConfig+0x380>)
 800c340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c344:	0800c3e9 	.word	0x0800c3e9
 800c348:	0800c419 	.word	0x0800c419
 800c34c:	0800c419 	.word	0x0800c419
 800c350:	0800c419 	.word	0x0800c419
 800c354:	0800c419 	.word	0x0800c419
 800c358:	0800c419 	.word	0x0800c419
 800c35c:	0800c419 	.word	0x0800c419
 800c360:	0800c419 	.word	0x0800c419
 800c364:	0800c3f1 	.word	0x0800c3f1
 800c368:	0800c419 	.word	0x0800c419
 800c36c:	0800c419 	.word	0x0800c419
 800c370:	0800c419 	.word	0x0800c419
 800c374:	0800c419 	.word	0x0800c419
 800c378:	0800c419 	.word	0x0800c419
 800c37c:	0800c419 	.word	0x0800c419
 800c380:	0800c419 	.word	0x0800c419
 800c384:	0800c3f9 	.word	0x0800c3f9
 800c388:	0800c419 	.word	0x0800c419
 800c38c:	0800c419 	.word	0x0800c419
 800c390:	0800c419 	.word	0x0800c419
 800c394:	0800c419 	.word	0x0800c419
 800c398:	0800c419 	.word	0x0800c419
 800c39c:	0800c419 	.word	0x0800c419
 800c3a0:	0800c419 	.word	0x0800c419
 800c3a4:	0800c401 	.word	0x0800c401
 800c3a8:	0800c419 	.word	0x0800c419
 800c3ac:	0800c419 	.word	0x0800c419
 800c3b0:	0800c419 	.word	0x0800c419
 800c3b4:	0800c419 	.word	0x0800c419
 800c3b8:	0800c419 	.word	0x0800c419
 800c3bc:	0800c419 	.word	0x0800c419
 800c3c0:	0800c419 	.word	0x0800c419
 800c3c4:	0800c409 	.word	0x0800c409
 800c3c8:	0800c419 	.word	0x0800c419
 800c3cc:	0800c419 	.word	0x0800c419
 800c3d0:	0800c419 	.word	0x0800c419
 800c3d4:	0800c419 	.word	0x0800c419
 800c3d8:	0800c419 	.word	0x0800c419
 800c3dc:	0800c419 	.word	0x0800c419
 800c3e0:	0800c419 	.word	0x0800c419
 800c3e4:	0800c411 	.word	0x0800c411
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3ee:	e0bc      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c3f0:	2304      	movs	r3, #4
 800c3f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3f6:	e0b8      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c3f8:	2308      	movs	r3, #8
 800c3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c3fe:	e0b4      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c400:	2310      	movs	r3, #16
 800c402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c406:	e0b0      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c408:	2320      	movs	r3, #32
 800c40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c40e:	e0ac      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c410:	2340      	movs	r3, #64	@ 0x40
 800c412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c416:	e0a8      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c418:	2380      	movs	r3, #128	@ 0x80
 800c41a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c41e:	e0a4      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	4a8f      	ldr	r2, [pc, #572]	@ (800c664 <UART_SetConfig+0x6a0>)
 800c426:	4293      	cmp	r3, r2
 800c428:	d130      	bne.n	800c48c <UART_SetConfig+0x4c8>
 800c42a:	4b8d      	ldr	r3, [pc, #564]	@ (800c660 <UART_SetConfig+0x69c>)
 800c42c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c42e:	f003 0307 	and.w	r3, r3, #7
 800c432:	2b05      	cmp	r3, #5
 800c434:	d826      	bhi.n	800c484 <UART_SetConfig+0x4c0>
 800c436:	a201      	add	r2, pc, #4	@ (adr r2, 800c43c <UART_SetConfig+0x478>)
 800c438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c43c:	0800c455 	.word	0x0800c455
 800c440:	0800c45d 	.word	0x0800c45d
 800c444:	0800c465 	.word	0x0800c465
 800c448:	0800c46d 	.word	0x0800c46d
 800c44c:	0800c475 	.word	0x0800c475
 800c450:	0800c47d 	.word	0x0800c47d
 800c454:	2300      	movs	r3, #0
 800c456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c45a:	e086      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c45c:	2304      	movs	r3, #4
 800c45e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c462:	e082      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c464:	2308      	movs	r3, #8
 800c466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c46a:	e07e      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c46c:	2310      	movs	r3, #16
 800c46e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c472:	e07a      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c474:	2320      	movs	r3, #32
 800c476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c47a:	e076      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c47c:	2340      	movs	r3, #64	@ 0x40
 800c47e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c482:	e072      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c484:	2380      	movs	r3, #128	@ 0x80
 800c486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c48a:	e06e      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	4a75      	ldr	r2, [pc, #468]	@ (800c668 <UART_SetConfig+0x6a4>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d130      	bne.n	800c4f8 <UART_SetConfig+0x534>
 800c496:	4b72      	ldr	r3, [pc, #456]	@ (800c660 <UART_SetConfig+0x69c>)
 800c498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c49a:	f003 0307 	and.w	r3, r3, #7
 800c49e:	2b05      	cmp	r3, #5
 800c4a0:	d826      	bhi.n	800c4f0 <UART_SetConfig+0x52c>
 800c4a2:	a201      	add	r2, pc, #4	@ (adr r2, 800c4a8 <UART_SetConfig+0x4e4>)
 800c4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4a8:	0800c4c1 	.word	0x0800c4c1
 800c4ac:	0800c4c9 	.word	0x0800c4c9
 800c4b0:	0800c4d1 	.word	0x0800c4d1
 800c4b4:	0800c4d9 	.word	0x0800c4d9
 800c4b8:	0800c4e1 	.word	0x0800c4e1
 800c4bc:	0800c4e9 	.word	0x0800c4e9
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4c6:	e050      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c4c8:	2304      	movs	r3, #4
 800c4ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4ce:	e04c      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c4d0:	2308      	movs	r3, #8
 800c4d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4d6:	e048      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c4d8:	2310      	movs	r3, #16
 800c4da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4de:	e044      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c4e0:	2320      	movs	r3, #32
 800c4e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4e6:	e040      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c4e8:	2340      	movs	r3, #64	@ 0x40
 800c4ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4ee:	e03c      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c4f0:	2380      	movs	r3, #128	@ 0x80
 800c4f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4f6:	e038      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	4a5b      	ldr	r2, [pc, #364]	@ (800c66c <UART_SetConfig+0x6a8>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d130      	bne.n	800c564 <UART_SetConfig+0x5a0>
 800c502:	4b57      	ldr	r3, [pc, #348]	@ (800c660 <UART_SetConfig+0x69c>)
 800c504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c506:	f003 0307 	and.w	r3, r3, #7
 800c50a:	2b05      	cmp	r3, #5
 800c50c:	d826      	bhi.n	800c55c <UART_SetConfig+0x598>
 800c50e:	a201      	add	r2, pc, #4	@ (adr r2, 800c514 <UART_SetConfig+0x550>)
 800c510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c514:	0800c52d 	.word	0x0800c52d
 800c518:	0800c535 	.word	0x0800c535
 800c51c:	0800c53d 	.word	0x0800c53d
 800c520:	0800c545 	.word	0x0800c545
 800c524:	0800c54d 	.word	0x0800c54d
 800c528:	0800c555 	.word	0x0800c555
 800c52c:	2302      	movs	r3, #2
 800c52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c532:	e01a      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c534:	2304      	movs	r3, #4
 800c536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c53a:	e016      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c53c:	2308      	movs	r3, #8
 800c53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c542:	e012      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c544:	2310      	movs	r3, #16
 800c546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c54a:	e00e      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c54c:	2320      	movs	r3, #32
 800c54e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c552:	e00a      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c554:	2340      	movs	r3, #64	@ 0x40
 800c556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c55a:	e006      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c55c:	2380      	movs	r3, #128	@ 0x80
 800c55e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c562:	e002      	b.n	800c56a <UART_SetConfig+0x5a6>
 800c564:	2380      	movs	r3, #128	@ 0x80
 800c566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	4a3f      	ldr	r2, [pc, #252]	@ (800c66c <UART_SetConfig+0x6a8>)
 800c570:	4293      	cmp	r3, r2
 800c572:	f040 80f8 	bne.w	800c766 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c576:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c57a:	2b20      	cmp	r3, #32
 800c57c:	dc46      	bgt.n	800c60c <UART_SetConfig+0x648>
 800c57e:	2b02      	cmp	r3, #2
 800c580:	f2c0 8082 	blt.w	800c688 <UART_SetConfig+0x6c4>
 800c584:	3b02      	subs	r3, #2
 800c586:	2b1e      	cmp	r3, #30
 800c588:	d87e      	bhi.n	800c688 <UART_SetConfig+0x6c4>
 800c58a:	a201      	add	r2, pc, #4	@ (adr r2, 800c590 <UART_SetConfig+0x5cc>)
 800c58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c590:	0800c613 	.word	0x0800c613
 800c594:	0800c689 	.word	0x0800c689
 800c598:	0800c61b 	.word	0x0800c61b
 800c59c:	0800c689 	.word	0x0800c689
 800c5a0:	0800c689 	.word	0x0800c689
 800c5a4:	0800c689 	.word	0x0800c689
 800c5a8:	0800c62b 	.word	0x0800c62b
 800c5ac:	0800c689 	.word	0x0800c689
 800c5b0:	0800c689 	.word	0x0800c689
 800c5b4:	0800c689 	.word	0x0800c689
 800c5b8:	0800c689 	.word	0x0800c689
 800c5bc:	0800c689 	.word	0x0800c689
 800c5c0:	0800c689 	.word	0x0800c689
 800c5c4:	0800c689 	.word	0x0800c689
 800c5c8:	0800c63b 	.word	0x0800c63b
 800c5cc:	0800c689 	.word	0x0800c689
 800c5d0:	0800c689 	.word	0x0800c689
 800c5d4:	0800c689 	.word	0x0800c689
 800c5d8:	0800c689 	.word	0x0800c689
 800c5dc:	0800c689 	.word	0x0800c689
 800c5e0:	0800c689 	.word	0x0800c689
 800c5e4:	0800c689 	.word	0x0800c689
 800c5e8:	0800c689 	.word	0x0800c689
 800c5ec:	0800c689 	.word	0x0800c689
 800c5f0:	0800c689 	.word	0x0800c689
 800c5f4:	0800c689 	.word	0x0800c689
 800c5f8:	0800c689 	.word	0x0800c689
 800c5fc:	0800c689 	.word	0x0800c689
 800c600:	0800c689 	.word	0x0800c689
 800c604:	0800c689 	.word	0x0800c689
 800c608:	0800c67b 	.word	0x0800c67b
 800c60c:	2b40      	cmp	r3, #64	@ 0x40
 800c60e:	d037      	beq.n	800c680 <UART_SetConfig+0x6bc>
 800c610:	e03a      	b.n	800c688 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c612:	f7fc fe1f 	bl	8009254 <HAL_RCCEx_GetD3PCLK1Freq>
 800c616:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c618:	e03c      	b.n	800c694 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c61a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c61e:	4618      	mov	r0, r3
 800c620:	f7fc fe2e 	bl	8009280 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c626:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c628:	e034      	b.n	800c694 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c62a:	f107 0318 	add.w	r3, r7, #24
 800c62e:	4618      	mov	r0, r3
 800c630:	f7fc ff7a 	bl	8009528 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c634:	69fb      	ldr	r3, [r7, #28]
 800c636:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c638:	e02c      	b.n	800c694 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c63a:	4b09      	ldr	r3, [pc, #36]	@ (800c660 <UART_SetConfig+0x69c>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f003 0320 	and.w	r3, r3, #32
 800c642:	2b00      	cmp	r3, #0
 800c644:	d016      	beq.n	800c674 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c646:	4b06      	ldr	r3, [pc, #24]	@ (800c660 <UART_SetConfig+0x69c>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	08db      	lsrs	r3, r3, #3
 800c64c:	f003 0303 	and.w	r3, r3, #3
 800c650:	4a07      	ldr	r2, [pc, #28]	@ (800c670 <UART_SetConfig+0x6ac>)
 800c652:	fa22 f303 	lsr.w	r3, r2, r3
 800c656:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c658:	e01c      	b.n	800c694 <UART_SetConfig+0x6d0>
 800c65a:	bf00      	nop
 800c65c:	40011400 	.word	0x40011400
 800c660:	58024400 	.word	0x58024400
 800c664:	40007800 	.word	0x40007800
 800c668:	40007c00 	.word	0x40007c00
 800c66c:	58000c00 	.word	0x58000c00
 800c670:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c674:	4b9d      	ldr	r3, [pc, #628]	@ (800c8ec <UART_SetConfig+0x928>)
 800c676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c678:	e00c      	b.n	800c694 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c67a:	4b9d      	ldr	r3, [pc, #628]	@ (800c8f0 <UART_SetConfig+0x92c>)
 800c67c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c67e:	e009      	b.n	800c694 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c680:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c684:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c686:	e005      	b.n	800c694 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c688:	2300      	movs	r3, #0
 800c68a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c68c:	2301      	movs	r3, #1
 800c68e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c692:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c696:	2b00      	cmp	r3, #0
 800c698:	f000 81de 	beq.w	800ca58 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6a0:	4a94      	ldr	r2, [pc, #592]	@ (800c8f4 <UART_SetConfig+0x930>)
 800c6a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6a6:	461a      	mov	r2, r3
 800c6a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6aa:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6ae:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	685a      	ldr	r2, [r3, #4]
 800c6b4:	4613      	mov	r3, r2
 800c6b6:	005b      	lsls	r3, r3, #1
 800c6b8:	4413      	add	r3, r2
 800c6ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	d305      	bcc.n	800c6cc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c6c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d903      	bls.n	800c6d4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c6d2:	e1c1      	b.n	800ca58 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c6d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	60bb      	str	r3, [r7, #8]
 800c6da:	60fa      	str	r2, [r7, #12]
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6e0:	4a84      	ldr	r2, [pc, #528]	@ (800c8f4 <UART_SetConfig+0x930>)
 800c6e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6e6:	b29b      	uxth	r3, r3
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	603b      	str	r3, [r7, #0]
 800c6ec:	607a      	str	r2, [r7, #4]
 800c6ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c6f6:	f7f3 ffff 	bl	80006f8 <__aeabi_uldivmod>
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	4610      	mov	r0, r2
 800c700:	4619      	mov	r1, r3
 800c702:	f04f 0200 	mov.w	r2, #0
 800c706:	f04f 0300 	mov.w	r3, #0
 800c70a:	020b      	lsls	r3, r1, #8
 800c70c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c710:	0202      	lsls	r2, r0, #8
 800c712:	6979      	ldr	r1, [r7, #20]
 800c714:	6849      	ldr	r1, [r1, #4]
 800c716:	0849      	lsrs	r1, r1, #1
 800c718:	2000      	movs	r0, #0
 800c71a:	460c      	mov	r4, r1
 800c71c:	4605      	mov	r5, r0
 800c71e:	eb12 0804 	adds.w	r8, r2, r4
 800c722:	eb43 0905 	adc.w	r9, r3, r5
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	685b      	ldr	r3, [r3, #4]
 800c72a:	2200      	movs	r2, #0
 800c72c:	469a      	mov	sl, r3
 800c72e:	4693      	mov	fp, r2
 800c730:	4652      	mov	r2, sl
 800c732:	465b      	mov	r3, fp
 800c734:	4640      	mov	r0, r8
 800c736:	4649      	mov	r1, r9
 800c738:	f7f3 ffde 	bl	80006f8 <__aeabi_uldivmod>
 800c73c:	4602      	mov	r2, r0
 800c73e:	460b      	mov	r3, r1
 800c740:	4613      	mov	r3, r2
 800c742:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c746:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c74a:	d308      	bcc.n	800c75e <UART_SetConfig+0x79a>
 800c74c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c74e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c752:	d204      	bcs.n	800c75e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c75a:	60da      	str	r2, [r3, #12]
 800c75c:	e17c      	b.n	800ca58 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c75e:	2301      	movs	r3, #1
 800c760:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c764:	e178      	b.n	800ca58 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	69db      	ldr	r3, [r3, #28]
 800c76a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c76e:	f040 80c5 	bne.w	800c8fc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c772:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c776:	2b20      	cmp	r3, #32
 800c778:	dc48      	bgt.n	800c80c <UART_SetConfig+0x848>
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	db7b      	blt.n	800c876 <UART_SetConfig+0x8b2>
 800c77e:	2b20      	cmp	r3, #32
 800c780:	d879      	bhi.n	800c876 <UART_SetConfig+0x8b2>
 800c782:	a201      	add	r2, pc, #4	@ (adr r2, 800c788 <UART_SetConfig+0x7c4>)
 800c784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c788:	0800c813 	.word	0x0800c813
 800c78c:	0800c81b 	.word	0x0800c81b
 800c790:	0800c877 	.word	0x0800c877
 800c794:	0800c877 	.word	0x0800c877
 800c798:	0800c823 	.word	0x0800c823
 800c79c:	0800c877 	.word	0x0800c877
 800c7a0:	0800c877 	.word	0x0800c877
 800c7a4:	0800c877 	.word	0x0800c877
 800c7a8:	0800c833 	.word	0x0800c833
 800c7ac:	0800c877 	.word	0x0800c877
 800c7b0:	0800c877 	.word	0x0800c877
 800c7b4:	0800c877 	.word	0x0800c877
 800c7b8:	0800c877 	.word	0x0800c877
 800c7bc:	0800c877 	.word	0x0800c877
 800c7c0:	0800c877 	.word	0x0800c877
 800c7c4:	0800c877 	.word	0x0800c877
 800c7c8:	0800c843 	.word	0x0800c843
 800c7cc:	0800c877 	.word	0x0800c877
 800c7d0:	0800c877 	.word	0x0800c877
 800c7d4:	0800c877 	.word	0x0800c877
 800c7d8:	0800c877 	.word	0x0800c877
 800c7dc:	0800c877 	.word	0x0800c877
 800c7e0:	0800c877 	.word	0x0800c877
 800c7e4:	0800c877 	.word	0x0800c877
 800c7e8:	0800c877 	.word	0x0800c877
 800c7ec:	0800c877 	.word	0x0800c877
 800c7f0:	0800c877 	.word	0x0800c877
 800c7f4:	0800c877 	.word	0x0800c877
 800c7f8:	0800c877 	.word	0x0800c877
 800c7fc:	0800c877 	.word	0x0800c877
 800c800:	0800c877 	.word	0x0800c877
 800c804:	0800c877 	.word	0x0800c877
 800c808:	0800c869 	.word	0x0800c869
 800c80c:	2b40      	cmp	r3, #64	@ 0x40
 800c80e:	d02e      	beq.n	800c86e <UART_SetConfig+0x8aa>
 800c810:	e031      	b.n	800c876 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c812:	f7fa fd69 	bl	80072e8 <HAL_RCC_GetPCLK1Freq>
 800c816:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c818:	e033      	b.n	800c882 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c81a:	f7fa fd7b 	bl	8007314 <HAL_RCC_GetPCLK2Freq>
 800c81e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c820:	e02f      	b.n	800c882 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c822:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c826:	4618      	mov	r0, r3
 800c828:	f7fc fd2a 	bl	8009280 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c82c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c82e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c830:	e027      	b.n	800c882 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c832:	f107 0318 	add.w	r3, r7, #24
 800c836:	4618      	mov	r0, r3
 800c838:	f7fc fe76 	bl	8009528 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c83c:	69fb      	ldr	r3, [r7, #28]
 800c83e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c840:	e01f      	b.n	800c882 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c842:	4b2d      	ldr	r3, [pc, #180]	@ (800c8f8 <UART_SetConfig+0x934>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f003 0320 	and.w	r3, r3, #32
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d009      	beq.n	800c862 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c84e:	4b2a      	ldr	r3, [pc, #168]	@ (800c8f8 <UART_SetConfig+0x934>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	08db      	lsrs	r3, r3, #3
 800c854:	f003 0303 	and.w	r3, r3, #3
 800c858:	4a24      	ldr	r2, [pc, #144]	@ (800c8ec <UART_SetConfig+0x928>)
 800c85a:	fa22 f303 	lsr.w	r3, r2, r3
 800c85e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c860:	e00f      	b.n	800c882 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c862:	4b22      	ldr	r3, [pc, #136]	@ (800c8ec <UART_SetConfig+0x928>)
 800c864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c866:	e00c      	b.n	800c882 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c868:	4b21      	ldr	r3, [pc, #132]	@ (800c8f0 <UART_SetConfig+0x92c>)
 800c86a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c86c:	e009      	b.n	800c882 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c86e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c874:	e005      	b.n	800c882 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c876:	2300      	movs	r3, #0
 800c878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c87a:	2301      	movs	r3, #1
 800c87c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c880:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c884:	2b00      	cmp	r3, #0
 800c886:	f000 80e7 	beq.w	800ca58 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c88e:	4a19      	ldr	r2, [pc, #100]	@ (800c8f4 <UART_SetConfig+0x930>)
 800c890:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c894:	461a      	mov	r2, r3
 800c896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c898:	fbb3 f3f2 	udiv	r3, r3, r2
 800c89c:	005a      	lsls	r2, r3, #1
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	685b      	ldr	r3, [r3, #4]
 800c8a2:	085b      	lsrs	r3, r3, #1
 800c8a4:	441a      	add	r2, r3
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	685b      	ldr	r3, [r3, #4]
 800c8aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c8b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8b2:	2b0f      	cmp	r3, #15
 800c8b4:	d916      	bls.n	800c8e4 <UART_SetConfig+0x920>
 800c8b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c8bc:	d212      	bcs.n	800c8e4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c8be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8c0:	b29b      	uxth	r3, r3
 800c8c2:	f023 030f 	bic.w	r3, r3, #15
 800c8c6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c8c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8ca:	085b      	lsrs	r3, r3, #1
 800c8cc:	b29b      	uxth	r3, r3
 800c8ce:	f003 0307 	and.w	r3, r3, #7
 800c8d2:	b29a      	uxth	r2, r3
 800c8d4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c8d6:	4313      	orrs	r3, r2
 800c8d8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c8e0:	60da      	str	r2, [r3, #12]
 800c8e2:	e0b9      	b.n	800ca58 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c8e4:	2301      	movs	r3, #1
 800c8e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c8ea:	e0b5      	b.n	800ca58 <UART_SetConfig+0xa94>
 800c8ec:	03d09000 	.word	0x03d09000
 800c8f0:	003d0900 	.word	0x003d0900
 800c8f4:	08011cbc 	.word	0x08011cbc
 800c8f8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c8fc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c900:	2b20      	cmp	r3, #32
 800c902:	dc49      	bgt.n	800c998 <UART_SetConfig+0x9d4>
 800c904:	2b00      	cmp	r3, #0
 800c906:	db7c      	blt.n	800ca02 <UART_SetConfig+0xa3e>
 800c908:	2b20      	cmp	r3, #32
 800c90a:	d87a      	bhi.n	800ca02 <UART_SetConfig+0xa3e>
 800c90c:	a201      	add	r2, pc, #4	@ (adr r2, 800c914 <UART_SetConfig+0x950>)
 800c90e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c912:	bf00      	nop
 800c914:	0800c99f 	.word	0x0800c99f
 800c918:	0800c9a7 	.word	0x0800c9a7
 800c91c:	0800ca03 	.word	0x0800ca03
 800c920:	0800ca03 	.word	0x0800ca03
 800c924:	0800c9af 	.word	0x0800c9af
 800c928:	0800ca03 	.word	0x0800ca03
 800c92c:	0800ca03 	.word	0x0800ca03
 800c930:	0800ca03 	.word	0x0800ca03
 800c934:	0800c9bf 	.word	0x0800c9bf
 800c938:	0800ca03 	.word	0x0800ca03
 800c93c:	0800ca03 	.word	0x0800ca03
 800c940:	0800ca03 	.word	0x0800ca03
 800c944:	0800ca03 	.word	0x0800ca03
 800c948:	0800ca03 	.word	0x0800ca03
 800c94c:	0800ca03 	.word	0x0800ca03
 800c950:	0800ca03 	.word	0x0800ca03
 800c954:	0800c9cf 	.word	0x0800c9cf
 800c958:	0800ca03 	.word	0x0800ca03
 800c95c:	0800ca03 	.word	0x0800ca03
 800c960:	0800ca03 	.word	0x0800ca03
 800c964:	0800ca03 	.word	0x0800ca03
 800c968:	0800ca03 	.word	0x0800ca03
 800c96c:	0800ca03 	.word	0x0800ca03
 800c970:	0800ca03 	.word	0x0800ca03
 800c974:	0800ca03 	.word	0x0800ca03
 800c978:	0800ca03 	.word	0x0800ca03
 800c97c:	0800ca03 	.word	0x0800ca03
 800c980:	0800ca03 	.word	0x0800ca03
 800c984:	0800ca03 	.word	0x0800ca03
 800c988:	0800ca03 	.word	0x0800ca03
 800c98c:	0800ca03 	.word	0x0800ca03
 800c990:	0800ca03 	.word	0x0800ca03
 800c994:	0800c9f5 	.word	0x0800c9f5
 800c998:	2b40      	cmp	r3, #64	@ 0x40
 800c99a:	d02e      	beq.n	800c9fa <UART_SetConfig+0xa36>
 800c99c:	e031      	b.n	800ca02 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c99e:	f7fa fca3 	bl	80072e8 <HAL_RCC_GetPCLK1Freq>
 800c9a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c9a4:	e033      	b.n	800ca0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c9a6:	f7fa fcb5 	bl	8007314 <HAL_RCC_GetPCLK2Freq>
 800c9aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c9ac:	e02f      	b.n	800ca0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f7fc fc64 	bl	8009280 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c9b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9bc:	e027      	b.n	800ca0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9be:	f107 0318 	add.w	r3, r7, #24
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f7fc fdb0 	bl	8009528 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c9c8:	69fb      	ldr	r3, [r7, #28]
 800c9ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9cc:	e01f      	b.n	800ca0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9ce:	4b2d      	ldr	r3, [pc, #180]	@ (800ca84 <UART_SetConfig+0xac0>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f003 0320 	and.w	r3, r3, #32
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d009      	beq.n	800c9ee <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c9da:	4b2a      	ldr	r3, [pc, #168]	@ (800ca84 <UART_SetConfig+0xac0>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	08db      	lsrs	r3, r3, #3
 800c9e0:	f003 0303 	and.w	r3, r3, #3
 800c9e4:	4a28      	ldr	r2, [pc, #160]	@ (800ca88 <UART_SetConfig+0xac4>)
 800c9e6:	fa22 f303 	lsr.w	r3, r2, r3
 800c9ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c9ec:	e00f      	b.n	800ca0e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c9ee:	4b26      	ldr	r3, [pc, #152]	@ (800ca88 <UART_SetConfig+0xac4>)
 800c9f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9f2:	e00c      	b.n	800ca0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c9f4:	4b25      	ldr	r3, [pc, #148]	@ (800ca8c <UART_SetConfig+0xac8>)
 800c9f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9f8:	e009      	b.n	800ca0e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c9fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c9fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca00:	e005      	b.n	800ca0e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ca02:	2300      	movs	r3, #0
 800ca04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ca06:	2301      	movs	r3, #1
 800ca08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ca0c:	bf00      	nop
    }

    if (pclk != 0U)
 800ca0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d021      	beq.n	800ca58 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca18:	4a1d      	ldr	r2, [pc, #116]	@ (800ca90 <UART_SetConfig+0xacc>)
 800ca1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca1e:	461a      	mov	r2, r3
 800ca20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca22:	fbb3 f2f2 	udiv	r2, r3, r2
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	685b      	ldr	r3, [r3, #4]
 800ca2a:	085b      	lsrs	r3, r3, #1
 800ca2c:	441a      	add	r2, r3
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	685b      	ldr	r3, [r3, #4]
 800ca32:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca36:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ca38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca3a:	2b0f      	cmp	r3, #15
 800ca3c:	d909      	bls.n	800ca52 <UART_SetConfig+0xa8e>
 800ca3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca44:	d205      	bcs.n	800ca52 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ca46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca48:	b29a      	uxth	r2, r3
 800ca4a:	697b      	ldr	r3, [r7, #20]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	60da      	str	r2, [r3, #12]
 800ca50:	e002      	b.n	800ca58 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ca52:	2301      	movs	r3, #1
 800ca54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	2201      	movs	r2, #1
 800ca5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	2201      	movs	r2, #1
 800ca64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ca68:	697b      	ldr	r3, [r7, #20]
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	2200      	movs	r2, #0
 800ca72:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ca74:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3748      	adds	r7, #72	@ 0x48
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ca82:	bf00      	nop
 800ca84:	58024400 	.word	0x58024400
 800ca88:	03d09000 	.word	0x03d09000
 800ca8c:	003d0900 	.word	0x003d0900
 800ca90:	08011cbc 	.word	0x08011cbc

0800ca94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ca94:	b480      	push	{r7}
 800ca96:	b083      	sub	sp, #12
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800caa0:	f003 0308 	and.w	r3, r3, #8
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d00a      	beq.n	800cabe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	685b      	ldr	r3, [r3, #4]
 800caae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	430a      	orrs	r2, r1
 800cabc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cac2:	f003 0301 	and.w	r3, r3, #1
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d00a      	beq.n	800cae0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	685b      	ldr	r3, [r3, #4]
 800cad0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	430a      	orrs	r2, r1
 800cade:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cae4:	f003 0302 	and.w	r3, r3, #2
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d00a      	beq.n	800cb02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	685b      	ldr	r3, [r3, #4]
 800caf2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	430a      	orrs	r2, r1
 800cb00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb06:	f003 0304 	and.w	r3, r3, #4
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d00a      	beq.n	800cb24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	685b      	ldr	r3, [r3, #4]
 800cb14:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	430a      	orrs	r2, r1
 800cb22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb28:	f003 0310 	and.w	r3, r3, #16
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d00a      	beq.n	800cb46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	689b      	ldr	r3, [r3, #8]
 800cb36:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	430a      	orrs	r2, r1
 800cb44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb4a:	f003 0320 	and.w	r3, r3, #32
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d00a      	beq.n	800cb68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	689b      	ldr	r3, [r3, #8]
 800cb58:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	430a      	orrs	r2, r1
 800cb66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d01a      	beq.n	800cbaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	685b      	ldr	r3, [r3, #4]
 800cb7a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	430a      	orrs	r2, r1
 800cb88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cb92:	d10a      	bne.n	800cbaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	685b      	ldr	r3, [r3, #4]
 800cb9a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	430a      	orrs	r2, r1
 800cba8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d00a      	beq.n	800cbcc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	685b      	ldr	r3, [r3, #4]
 800cbbc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	430a      	orrs	r2, r1
 800cbca:	605a      	str	r2, [r3, #4]
  }
}
 800cbcc:	bf00      	nop
 800cbce:	370c      	adds	r7, #12
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd6:	4770      	bx	lr

0800cbd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b098      	sub	sp, #96	@ 0x60
 800cbdc:	af02      	add	r7, sp, #8
 800cbde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cbe8:	f7f7 fb3e 	bl	8004268 <HAL_GetTick>
 800cbec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f003 0308 	and.w	r3, r3, #8
 800cbf8:	2b08      	cmp	r3, #8
 800cbfa:	d12f      	bne.n	800cc5c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cbfc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cc00:	9300      	str	r3, [sp, #0]
 800cc02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc04:	2200      	movs	r2, #0
 800cc06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f000 f88e 	bl	800cd2c <UART_WaitOnFlagUntilTimeout>
 800cc10:	4603      	mov	r3, r0
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d022      	beq.n	800cc5c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc1e:	e853 3f00 	ldrex	r3, [r3]
 800cc22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cc24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cc2a:	653b      	str	r3, [r7, #80]	@ 0x50
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	461a      	mov	r2, r3
 800cc32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc34:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc36:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cc3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cc3c:	e841 2300 	strex	r3, r2, [r1]
 800cc40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cc42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d1e6      	bne.n	800cc16 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2220      	movs	r2, #32
 800cc4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2200      	movs	r2, #0
 800cc54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cc58:	2303      	movs	r3, #3
 800cc5a:	e063      	b.n	800cd24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f003 0304 	and.w	r3, r3, #4
 800cc66:	2b04      	cmp	r3, #4
 800cc68:	d149      	bne.n	800ccfe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc6a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cc6e:	9300      	str	r3, [sp, #0]
 800cc70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc72:	2200      	movs	r2, #0
 800cc74:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f000 f857 	bl	800cd2c <UART_WaitOnFlagUntilTimeout>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d03c      	beq.n	800ccfe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc8c:	e853 3f00 	ldrex	r3, [r3]
 800cc90:	623b      	str	r3, [r7, #32]
   return(result);
 800cc92:	6a3b      	ldr	r3, [r7, #32]
 800cc94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cc98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	461a      	mov	r2, r3
 800cca0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cca2:	633b      	str	r3, [r7, #48]	@ 0x30
 800cca4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cca6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cca8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ccaa:	e841 2300 	strex	r3, r2, [r1]
 800ccae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ccb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d1e6      	bne.n	800cc84 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	3308      	adds	r3, #8
 800ccbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	e853 3f00 	ldrex	r3, [r3]
 800ccc4:	60fb      	str	r3, [r7, #12]
   return(result);
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	f023 0301 	bic.w	r3, r3, #1
 800cccc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	3308      	adds	r3, #8
 800ccd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ccd6:	61fa      	str	r2, [r7, #28]
 800ccd8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccda:	69b9      	ldr	r1, [r7, #24]
 800ccdc:	69fa      	ldr	r2, [r7, #28]
 800ccde:	e841 2300 	strex	r3, r2, [r1]
 800cce2:	617b      	str	r3, [r7, #20]
   return(result);
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d1e5      	bne.n	800ccb6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2220      	movs	r2, #32
 800ccee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ccfa:	2303      	movs	r3, #3
 800ccfc:	e012      	b.n	800cd24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2220      	movs	r2, #32
 800cd02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2220      	movs	r2, #32
 800cd0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2200      	movs	r2, #0
 800cd12:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2200      	movs	r2, #0
 800cd18:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cd22:	2300      	movs	r3, #0
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3758      	adds	r7, #88	@ 0x58
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}

0800cd2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b084      	sub	sp, #16
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	60f8      	str	r0, [r7, #12]
 800cd34:	60b9      	str	r1, [r7, #8]
 800cd36:	603b      	str	r3, [r7, #0]
 800cd38:	4613      	mov	r3, r2
 800cd3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd3c:	e04f      	b.n	800cdde <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd3e:	69bb      	ldr	r3, [r7, #24]
 800cd40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd44:	d04b      	beq.n	800cdde <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd46:	f7f7 fa8f 	bl	8004268 <HAL_GetTick>
 800cd4a:	4602      	mov	r2, r0
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	1ad3      	subs	r3, r2, r3
 800cd50:	69ba      	ldr	r2, [r7, #24]
 800cd52:	429a      	cmp	r2, r3
 800cd54:	d302      	bcc.n	800cd5c <UART_WaitOnFlagUntilTimeout+0x30>
 800cd56:	69bb      	ldr	r3, [r7, #24]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d101      	bne.n	800cd60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cd5c:	2303      	movs	r3, #3
 800cd5e:	e04e      	b.n	800cdfe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	f003 0304 	and.w	r3, r3, #4
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d037      	beq.n	800cdde <UART_WaitOnFlagUntilTimeout+0xb2>
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	2b80      	cmp	r3, #128	@ 0x80
 800cd72:	d034      	beq.n	800cdde <UART_WaitOnFlagUntilTimeout+0xb2>
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	2b40      	cmp	r3, #64	@ 0x40
 800cd78:	d031      	beq.n	800cdde <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	69db      	ldr	r3, [r3, #28]
 800cd80:	f003 0308 	and.w	r3, r3, #8
 800cd84:	2b08      	cmp	r3, #8
 800cd86:	d110      	bne.n	800cdaa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	2208      	movs	r2, #8
 800cd8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cd90:	68f8      	ldr	r0, [r7, #12]
 800cd92:	f000 f839 	bl	800ce08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	2208      	movs	r2, #8
 800cd9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	2200      	movs	r2, #0
 800cda2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800cda6:	2301      	movs	r3, #1
 800cda8:	e029      	b.n	800cdfe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	69db      	ldr	r3, [r3, #28]
 800cdb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cdb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cdb8:	d111      	bne.n	800cdde <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cdc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cdc4:	68f8      	ldr	r0, [r7, #12]
 800cdc6:	f000 f81f 	bl	800ce08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	2220      	movs	r2, #32
 800cdce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800cdda:	2303      	movs	r3, #3
 800cddc:	e00f      	b.n	800cdfe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	69da      	ldr	r2, [r3, #28]
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	4013      	ands	r3, r2
 800cde8:	68ba      	ldr	r2, [r7, #8]
 800cdea:	429a      	cmp	r2, r3
 800cdec:	bf0c      	ite	eq
 800cdee:	2301      	moveq	r3, #1
 800cdf0:	2300      	movne	r3, #0
 800cdf2:	b2db      	uxtb	r3, r3
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	79fb      	ldrb	r3, [r7, #7]
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d0a0      	beq.n	800cd3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cdfc:	2300      	movs	r3, #0
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3710      	adds	r7, #16
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}
	...

0800ce08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ce08:	b480      	push	{r7}
 800ce0a:	b095      	sub	sp, #84	@ 0x54
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce18:	e853 3f00 	ldrex	r3, [r3]
 800ce1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ce1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ce24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	461a      	mov	r2, r3
 800ce2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce2e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce30:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ce34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ce36:	e841 2300 	strex	r3, r2, [r1]
 800ce3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ce3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d1e6      	bne.n	800ce10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	3308      	adds	r3, #8
 800ce48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce4a:	6a3b      	ldr	r3, [r7, #32]
 800ce4c:	e853 3f00 	ldrex	r3, [r3]
 800ce50:	61fb      	str	r3, [r7, #28]
   return(result);
 800ce52:	69fa      	ldr	r2, [r7, #28]
 800ce54:	4b1e      	ldr	r3, [pc, #120]	@ (800ced0 <UART_EndRxTransfer+0xc8>)
 800ce56:	4013      	ands	r3, r2
 800ce58:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	3308      	adds	r3, #8
 800ce60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ce62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ce64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ce68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce6a:	e841 2300 	strex	r3, r2, [r1]
 800ce6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ce70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d1e5      	bne.n	800ce42 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce7a:	2b01      	cmp	r3, #1
 800ce7c:	d118      	bne.n	800ceb0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	e853 3f00 	ldrex	r3, [r3]
 800ce8a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	f023 0310 	bic.w	r3, r3, #16
 800ce92:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	461a      	mov	r2, r3
 800ce9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce9c:	61bb      	str	r3, [r7, #24]
 800ce9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cea0:	6979      	ldr	r1, [r7, #20]
 800cea2:	69ba      	ldr	r2, [r7, #24]
 800cea4:	e841 2300 	strex	r3, r2, [r1]
 800cea8:	613b      	str	r3, [r7, #16]
   return(result);
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d1e6      	bne.n	800ce7e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2220      	movs	r2, #32
 800ceb4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2200      	movs	r2, #0
 800cebc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2200      	movs	r2, #0
 800cec2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cec4:	bf00      	nop
 800cec6:	3754      	adds	r7, #84	@ 0x54
 800cec8:	46bd      	mov	sp, r7
 800ceca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cece:	4770      	bx	lr
 800ced0:	effffffe 	.word	0xeffffffe

0800ced4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ced4:	b480      	push	{r7}
 800ced6:	b085      	sub	sp, #20
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cee2:	2b01      	cmp	r3, #1
 800cee4:	d101      	bne.n	800ceea <HAL_UARTEx_DisableFifoMode+0x16>
 800cee6:	2302      	movs	r3, #2
 800cee8:	e027      	b.n	800cf3a <HAL_UARTEx_DisableFifoMode+0x66>
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2201      	movs	r2, #1
 800ceee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2224      	movs	r2, #36	@ 0x24
 800cef6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	681a      	ldr	r2, [r3, #0]
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f022 0201 	bic.w	r2, r2, #1
 800cf10:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800cf18:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	68fa      	ldr	r2, [r7, #12]
 800cf26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2220      	movs	r2, #32
 800cf2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2200      	movs	r2, #0
 800cf34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cf38:	2300      	movs	r3, #0
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	3714      	adds	r7, #20
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf44:	4770      	bx	lr

0800cf46 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cf46:	b580      	push	{r7, lr}
 800cf48:	b084      	sub	sp, #16
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	6078      	str	r0, [r7, #4]
 800cf4e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cf56:	2b01      	cmp	r3, #1
 800cf58:	d101      	bne.n	800cf5e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cf5a:	2302      	movs	r3, #2
 800cf5c:	e02d      	b.n	800cfba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2201      	movs	r2, #1
 800cf62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2224      	movs	r2, #36	@ 0x24
 800cf6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	681a      	ldr	r2, [r3, #0]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	f022 0201 	bic.w	r2, r2, #1
 800cf84:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	689b      	ldr	r3, [r3, #8]
 800cf8c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	683a      	ldr	r2, [r7, #0]
 800cf96:	430a      	orrs	r2, r1
 800cf98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f000 f850 	bl	800d040 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	68fa      	ldr	r2, [r7, #12]
 800cfa6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2220      	movs	r2, #32
 800cfac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cfb8:	2300      	movs	r3, #0
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	3710      	adds	r7, #16
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}

0800cfc2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cfc2:	b580      	push	{r7, lr}
 800cfc4:	b084      	sub	sp, #16
 800cfc6:	af00      	add	r7, sp, #0
 800cfc8:	6078      	str	r0, [r7, #4]
 800cfca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cfd2:	2b01      	cmp	r3, #1
 800cfd4:	d101      	bne.n	800cfda <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cfd6:	2302      	movs	r3, #2
 800cfd8:	e02d      	b.n	800d036 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2201      	movs	r2, #1
 800cfde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2224      	movs	r2, #36	@ 0x24
 800cfe6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	681a      	ldr	r2, [r3, #0]
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	f022 0201 	bic.w	r2, r2, #1
 800d000:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	689b      	ldr	r3, [r3, #8]
 800d008:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	683a      	ldr	r2, [r7, #0]
 800d012:	430a      	orrs	r2, r1
 800d014:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d016:	6878      	ldr	r0, [r7, #4]
 800d018:	f000 f812 	bl	800d040 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	68fa      	ldr	r2, [r7, #12]
 800d022:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2220      	movs	r2, #32
 800d028:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2200      	movs	r2, #0
 800d030:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d034:	2300      	movs	r3, #0
}
 800d036:	4618      	mov	r0, r3
 800d038:	3710      	adds	r7, #16
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}
	...

0800d040 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d040:	b480      	push	{r7}
 800d042:	b085      	sub	sp, #20
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d108      	bne.n	800d062 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2201      	movs	r2, #1
 800d054:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2201      	movs	r2, #1
 800d05c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d060:	e031      	b.n	800d0c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d062:	2310      	movs	r3, #16
 800d064:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d066:	2310      	movs	r3, #16
 800d068:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	689b      	ldr	r3, [r3, #8]
 800d070:	0e5b      	lsrs	r3, r3, #25
 800d072:	b2db      	uxtb	r3, r3
 800d074:	f003 0307 	and.w	r3, r3, #7
 800d078:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	689b      	ldr	r3, [r3, #8]
 800d080:	0f5b      	lsrs	r3, r3, #29
 800d082:	b2db      	uxtb	r3, r3
 800d084:	f003 0307 	and.w	r3, r3, #7
 800d088:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d08a:	7bbb      	ldrb	r3, [r7, #14]
 800d08c:	7b3a      	ldrb	r2, [r7, #12]
 800d08e:	4911      	ldr	r1, [pc, #68]	@ (800d0d4 <UARTEx_SetNbDataToProcess+0x94>)
 800d090:	5c8a      	ldrb	r2, [r1, r2]
 800d092:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d096:	7b3a      	ldrb	r2, [r7, #12]
 800d098:	490f      	ldr	r1, [pc, #60]	@ (800d0d8 <UARTEx_SetNbDataToProcess+0x98>)
 800d09a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d09c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d0a0:	b29a      	uxth	r2, r3
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d0a8:	7bfb      	ldrb	r3, [r7, #15]
 800d0aa:	7b7a      	ldrb	r2, [r7, #13]
 800d0ac:	4909      	ldr	r1, [pc, #36]	@ (800d0d4 <UARTEx_SetNbDataToProcess+0x94>)
 800d0ae:	5c8a      	ldrb	r2, [r1, r2]
 800d0b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d0b4:	7b7a      	ldrb	r2, [r7, #13]
 800d0b6:	4908      	ldr	r1, [pc, #32]	@ (800d0d8 <UARTEx_SetNbDataToProcess+0x98>)
 800d0b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d0ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800d0be:	b29a      	uxth	r2, r3
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d0c6:	bf00      	nop
 800d0c8:	3714      	adds	r7, #20
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d0:	4770      	bx	lr
 800d0d2:	bf00      	nop
 800d0d4:	08011cd4 	.word	0x08011cd4
 800d0d8:	08011cdc 	.word	0x08011cdc

0800d0dc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d0dc:	b084      	sub	sp, #16
 800d0de:	b480      	push	{r7}
 800d0e0:	b085      	sub	sp, #20
 800d0e2:	af00      	add	r7, sp, #0
 800d0e4:	6078      	str	r0, [r7, #4]
 800d0e6:	f107 001c 	add.w	r0, r7, #28
 800d0ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800d0f2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800d0f4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800d0f6:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800d0f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800d0fa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800d0fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800d0fe:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800d102:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800d104:	68fa      	ldr	r2, [r7, #12]
 800d106:	4313      	orrs	r3, r2
 800d108:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	685a      	ldr	r2, [r3, #4]
 800d10e:	4b07      	ldr	r3, [pc, #28]	@ (800d12c <SDMMC_Init+0x50>)
 800d110:	4013      	ands	r3, r2
 800d112:	68fa      	ldr	r2, [r7, #12]
 800d114:	431a      	orrs	r2, r3
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d11a:	2300      	movs	r3, #0
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	3714      	adds	r7, #20
 800d120:	46bd      	mov	sp, r7
 800d122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d126:	b004      	add	sp, #16
 800d128:	4770      	bx	lr
 800d12a:	bf00      	nop
 800d12c:	ffc02c00 	.word	0xffc02c00

0800d130 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d130:	b480      	push	{r7}
 800d132:	b083      	sub	sp, #12
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800d13e:	4618      	mov	r0, r3
 800d140:	370c      	adds	r7, #12
 800d142:	46bd      	mov	sp, r7
 800d144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d148:	4770      	bx	lr

0800d14a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800d14a:	b480      	push	{r7}
 800d14c:	b083      	sub	sp, #12
 800d14e:	af00      	add	r7, sp, #0
 800d150:	6078      	str	r0, [r7, #4]
 800d152:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	681a      	ldr	r2, [r3, #0]
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800d15e:	2300      	movs	r3, #0
}
 800d160:	4618      	mov	r0, r3
 800d162:	370c      	adds	r7, #12
 800d164:	46bd      	mov	sp, r7
 800d166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16a:	4770      	bx	lr

0800d16c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800d16c:	b480      	push	{r7}
 800d16e:	b083      	sub	sp, #12
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	f043 0203 	orr.w	r2, r3, #3
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d180:	2300      	movs	r3, #0
}
 800d182:	4618      	mov	r0, r3
 800d184:	370c      	adds	r7, #12
 800d186:	46bd      	mov	sp, r7
 800d188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18c:	4770      	bx	lr

0800d18e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800d18e:	b480      	push	{r7}
 800d190:	b083      	sub	sp, #12
 800d192:	af00      	add	r7, sp, #0
 800d194:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	f003 0303 	and.w	r3, r3, #3
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	370c      	adds	r7, #12
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a8:	4770      	bx	lr
	...

0800d1ac <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b085      	sub	sp, #20
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
 800d1b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	681a      	ldr	r2, [r3, #0]
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d1ca:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800d1d0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800d1d6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d1d8:	68fa      	ldr	r2, [r7, #12]
 800d1da:	4313      	orrs	r3, r2
 800d1dc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	68da      	ldr	r2, [r3, #12]
 800d1e2:	4b06      	ldr	r3, [pc, #24]	@ (800d1fc <SDMMC_SendCommand+0x50>)
 800d1e4:	4013      	ands	r3, r2
 800d1e6:	68fa      	ldr	r2, [r7, #12]
 800d1e8:	431a      	orrs	r2, r3
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d1ee:	2300      	movs	r3, #0
}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	3714      	adds	r7, #20
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fa:	4770      	bx	lr
 800d1fc:	fffee0c0 	.word	0xfffee0c0

0800d200 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d200:	b480      	push	{r7}
 800d202:	b083      	sub	sp, #12
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	691b      	ldr	r3, [r3, #16]
 800d20c:	b2db      	uxtb	r3, r3
}
 800d20e:	4618      	mov	r0, r3
 800d210:	370c      	adds	r7, #12
 800d212:	46bd      	mov	sp, r7
 800d214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d218:	4770      	bx	lr

0800d21a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d21a:	b480      	push	{r7}
 800d21c:	b085      	sub	sp, #20
 800d21e:	af00      	add	r7, sp, #0
 800d220:	6078      	str	r0, [r7, #4]
 800d222:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	3314      	adds	r3, #20
 800d228:	461a      	mov	r2, r3
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	4413      	add	r3, r2
 800d22e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	681b      	ldr	r3, [r3, #0]
}
 800d234:	4618      	mov	r0, r3
 800d236:	3714      	adds	r7, #20
 800d238:	46bd      	mov	sp, r7
 800d23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23e:	4770      	bx	lr

0800d240 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800d240:	b480      	push	{r7}
 800d242:	b085      	sub	sp, #20
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
 800d248:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d24a:	2300      	movs	r3, #0
 800d24c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	681a      	ldr	r2, [r3, #0]
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	685a      	ldr	r2, [r3, #4]
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d266:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800d26c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800d272:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d274:	68fa      	ldr	r2, [r7, #12]
 800d276:	4313      	orrs	r3, r2
 800d278:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d27e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	431a      	orrs	r2, r3
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800d28a:	2300      	movs	r3, #0

}
 800d28c:	4618      	mov	r0, r3
 800d28e:	3714      	adds	r7, #20
 800d290:	46bd      	mov	sp, r7
 800d292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d296:	4770      	bx	lr

0800d298 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b088      	sub	sp, #32
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
 800d2a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d2a6:	2310      	movs	r3, #16
 800d2a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d2aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d2ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d2b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d2b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d2ba:	f107 0308 	add.w	r3, r7, #8
 800d2be:	4619      	mov	r1, r3
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f7ff ff73 	bl	800d1ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d2c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d2ca:	2110      	movs	r1, #16
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f000 fa5f 	bl	800d790 <SDMMC_GetCmdResp1>
 800d2d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2d4:	69fb      	ldr	r3, [r7, #28]
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3720      	adds	r7, #32
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}

0800d2de <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d2de:	b580      	push	{r7, lr}
 800d2e0:	b088      	sub	sp, #32
 800d2e2:	af00      	add	r7, sp, #0
 800d2e4:	6078      	str	r0, [r7, #4]
 800d2e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d2ec:	2311      	movs	r3, #17
 800d2ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d2f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d2f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d2fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d2fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d300:	f107 0308 	add.w	r3, r7, #8
 800d304:	4619      	mov	r1, r3
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	f7ff ff50 	bl	800d1ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d30c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d310:	2111      	movs	r1, #17
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f000 fa3c 	bl	800d790 <SDMMC_GetCmdResp1>
 800d318:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d31a:	69fb      	ldr	r3, [r7, #28]
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	3720      	adds	r7, #32
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}

0800d324 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b088      	sub	sp, #32
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d332:	2312      	movs	r3, #18
 800d334:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d336:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d33a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d33c:	2300      	movs	r3, #0
 800d33e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d340:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d344:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d346:	f107 0308 	add.w	r3, r7, #8
 800d34a:	4619      	mov	r1, r3
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f7ff ff2d 	bl	800d1ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d352:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d356:	2112      	movs	r1, #18
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f000 fa19 	bl	800d790 <SDMMC_GetCmdResp1>
 800d35e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d360:	69fb      	ldr	r3, [r7, #28]
}
 800d362:	4618      	mov	r0, r3
 800d364:	3720      	adds	r7, #32
 800d366:	46bd      	mov	sp, r7
 800d368:	bd80      	pop	{r7, pc}

0800d36a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d36a:	b580      	push	{r7, lr}
 800d36c:	b088      	sub	sp, #32
 800d36e:	af00      	add	r7, sp, #0
 800d370:	6078      	str	r0, [r7, #4]
 800d372:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d378:	2318      	movs	r3, #24
 800d37a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d37c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d380:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d382:	2300      	movs	r3, #0
 800d384:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d386:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d38a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d38c:	f107 0308 	add.w	r3, r7, #8
 800d390:	4619      	mov	r1, r3
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f7ff ff0a 	bl	800d1ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d398:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d39c:	2118      	movs	r1, #24
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f000 f9f6 	bl	800d790 <SDMMC_GetCmdResp1>
 800d3a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3a6:	69fb      	ldr	r3, [r7, #28]
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3720      	adds	r7, #32
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}

0800d3b0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b088      	sub	sp, #32
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
 800d3b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d3be:	2319      	movs	r3, #25
 800d3c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d3c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d3c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d3cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d3d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d3d2:	f107 0308 	add.w	r3, r7, #8
 800d3d6:	4619      	mov	r1, r3
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f7ff fee7 	bl	800d1ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d3de:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d3e2:	2119      	movs	r1, #25
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f000 f9d3 	bl	800d790 <SDMMC_GetCmdResp1>
 800d3ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3ec:	69fb      	ldr	r3, [r7, #28]
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	3720      	adds	r7, #32
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}
	...

0800d3f8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b088      	sub	sp, #32
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d400:	2300      	movs	r3, #0
 800d402:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d404:	230c      	movs	r3, #12
 800d406:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d408:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d40c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d40e:	2300      	movs	r3, #0
 800d410:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d412:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d416:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	68db      	ldr	r3, [r3, #12]
 800d41c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	68db      	ldr	r3, [r3, #12]
 800d428:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d430:	f107 0308 	add.w	r3, r7, #8
 800d434:	4619      	mov	r1, r3
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	f7ff feb8 	bl	800d1ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d43c:	4a0b      	ldr	r2, [pc, #44]	@ (800d46c <SDMMC_CmdStopTransfer+0x74>)
 800d43e:	210c      	movs	r1, #12
 800d440:	6878      	ldr	r0, [r7, #4]
 800d442:	f000 f9a5 	bl	800d790 <SDMMC_GetCmdResp1>
 800d446:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	68db      	ldr	r3, [r3, #12]
 800d44c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d454:	69fb      	ldr	r3, [r7, #28]
 800d456:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d45a:	d101      	bne.n	800d460 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800d45c:	2300      	movs	r3, #0
 800d45e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800d460:	69fb      	ldr	r3, [r7, #28]
}
 800d462:	4618      	mov	r0, r3
 800d464:	3720      	adds	r7, #32
 800d466:	46bd      	mov	sp, r7
 800d468:	bd80      	pop	{r7, pc}
 800d46a:	bf00      	nop
 800d46c:	05f5e100 	.word	0x05f5e100

0800d470 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b088      	sub	sp, #32
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
 800d478:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d47e:	2307      	movs	r3, #7
 800d480:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d482:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d486:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d488:	2300      	movs	r3, #0
 800d48a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d48c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d490:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d492:	f107 0308 	add.w	r3, r7, #8
 800d496:	4619      	mov	r1, r3
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f7ff fe87 	bl	800d1ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d49e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d4a2:	2107      	movs	r1, #7
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f000 f973 	bl	800d790 <SDMMC_GetCmdResp1>
 800d4aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4ac:	69fb      	ldr	r3, [r7, #28]
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	3720      	adds	r7, #32
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}

0800d4b6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d4b6:	b580      	push	{r7, lr}
 800d4b8:	b088      	sub	sp, #32
 800d4ba:	af00      	add	r7, sp, #0
 800d4bc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d4ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d4d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d4d4:	f107 0308 	add.w	r3, r7, #8
 800d4d8:	4619      	mov	r1, r3
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f7ff fe66 	bl	800d1ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	f000 fb97 	bl	800dc14 <SDMMC_GetCmdError>
 800d4e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4e8:	69fb      	ldr	r3, [r7, #28]
}
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	3720      	adds	r7, #32
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}

0800d4f2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d4f2:	b580      	push	{r7, lr}
 800d4f4:	b088      	sub	sp, #32
 800d4f6:	af00      	add	r7, sp, #0
 800d4f8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d4fa:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800d4fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d500:	2308      	movs	r3, #8
 800d502:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d504:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d508:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d50a:	2300      	movs	r3, #0
 800d50c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d50e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d512:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d514:	f107 0308 	add.w	r3, r7, #8
 800d518:	4619      	mov	r1, r3
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f7ff fe46 	bl	800d1ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f000 fb29 	bl	800db78 <SDMMC_GetCmdResp7>
 800d526:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d528:	69fb      	ldr	r3, [r7, #28]
}
 800d52a:	4618      	mov	r0, r3
 800d52c:	3720      	adds	r7, #32
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}

0800d532 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d532:	b580      	push	{r7, lr}
 800d534:	b088      	sub	sp, #32
 800d536:	af00      	add	r7, sp, #0
 800d538:	6078      	str	r0, [r7, #4]
 800d53a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d540:	2337      	movs	r3, #55	@ 0x37
 800d542:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d544:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d548:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d54a:	2300      	movs	r3, #0
 800d54c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d54e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d552:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d554:	f107 0308 	add.w	r3, r7, #8
 800d558:	4619      	mov	r1, r3
 800d55a:	6878      	ldr	r0, [r7, #4]
 800d55c:	f7ff fe26 	bl	800d1ac <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d560:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d564:	2137      	movs	r1, #55	@ 0x37
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f000 f912 	bl	800d790 <SDMMC_GetCmdResp1>
 800d56c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d56e:	69fb      	ldr	r3, [r7, #28]
}
 800d570:	4618      	mov	r0, r3
 800d572:	3720      	adds	r7, #32
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}

0800d578 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b088      	sub	sp, #32
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
 800d580:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d586:	2329      	movs	r3, #41	@ 0x29
 800d588:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d58a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d58e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d590:	2300      	movs	r3, #0
 800d592:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d594:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d598:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d59a:	f107 0308 	add.w	r3, r7, #8
 800d59e:	4619      	mov	r1, r3
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f7ff fe03 	bl	800d1ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f000 fa2e 	bl	800da08 <SDMMC_GetCmdResp3>
 800d5ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5ae:	69fb      	ldr	r3, [r7, #28]
}
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	3720      	adds	r7, #32
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}

0800d5b8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b088      	sub	sp, #32
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
 800d5c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d5c6:	2306      	movs	r3, #6
 800d5c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d5ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d5ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d5d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5da:	f107 0308 	add.w	r3, r7, #8
 800d5de:	4619      	mov	r1, r3
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	f7ff fde3 	bl	800d1ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d5e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d5ea:	2106      	movs	r1, #6
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f000 f8cf 	bl	800d790 <SDMMC_GetCmdResp1>
 800d5f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5f4:	69fb      	ldr	r3, [r7, #28]
}
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	3720      	adds	r7, #32
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}

0800d5fe <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800d5fe:	b580      	push	{r7, lr}
 800d600:	b088      	sub	sp, #32
 800d602:	af00      	add	r7, sp, #0
 800d604:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d606:	2300      	movs	r3, #0
 800d608:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d60a:	2333      	movs	r3, #51	@ 0x33
 800d60c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d60e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d612:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d614:	2300      	movs	r3, #0
 800d616:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d618:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d61c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d61e:	f107 0308 	add.w	r3, r7, #8
 800d622:	4619      	mov	r1, r3
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f7ff fdc1 	bl	800d1ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d62a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d62e:	2133      	movs	r1, #51	@ 0x33
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f000 f8ad 	bl	800d790 <SDMMC_GetCmdResp1>
 800d636:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d638:	69fb      	ldr	r3, [r7, #28]
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	3720      	adds	r7, #32
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}

0800d642 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d642:	b580      	push	{r7, lr}
 800d644:	b088      	sub	sp, #32
 800d646:	af00      	add	r7, sp, #0
 800d648:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d64a:	2300      	movs	r3, #0
 800d64c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d64e:	2302      	movs	r3, #2
 800d650:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d652:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800d656:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d658:	2300      	movs	r3, #0
 800d65a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d65c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d660:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d662:	f107 0308 	add.w	r3, r7, #8
 800d666:	4619      	mov	r1, r3
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f7ff fd9f 	bl	800d1ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f000 f980 	bl	800d974 <SDMMC_GetCmdResp2>
 800d674:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d676:	69fb      	ldr	r3, [r7, #28]
}
 800d678:	4618      	mov	r0, r3
 800d67a:	3720      	adds	r7, #32
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}

0800d680 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b088      	sub	sp, #32
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
 800d688:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d68e:	2309      	movs	r3, #9
 800d690:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d692:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800d696:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d698:	2300      	movs	r3, #0
 800d69a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d69c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d6a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d6a2:	f107 0308 	add.w	r3, r7, #8
 800d6a6:	4619      	mov	r1, r3
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	f7ff fd7f 	bl	800d1ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f000 f960 	bl	800d974 <SDMMC_GetCmdResp2>
 800d6b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6b6:	69fb      	ldr	r3, [r7, #28]
}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	3720      	adds	r7, #32
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}

0800d6c0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b088      	sub	sp, #32
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
 800d6c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d6ce:	2303      	movs	r3, #3
 800d6d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d6d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d6d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d6d8:	2300      	movs	r3, #0
 800d6da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d6dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d6e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d6e2:	f107 0308 	add.w	r3, r7, #8
 800d6e6:	4619      	mov	r1, r3
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f7ff fd5f 	bl	800d1ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d6ee:	683a      	ldr	r2, [r7, #0]
 800d6f0:	2103      	movs	r1, #3
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f000 f9c8 	bl	800da88 <SDMMC_GetCmdResp6>
 800d6f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6fa:	69fb      	ldr	r3, [r7, #28]
}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	3720      	adds	r7, #32
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}

0800d704 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b088      	sub	sp, #32
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
 800d70c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d712:	230d      	movs	r3, #13
 800d714:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d716:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d71a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d71c:	2300      	movs	r3, #0
 800d71e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d720:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d724:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d726:	f107 0308 	add.w	r3, r7, #8
 800d72a:	4619      	mov	r1, r3
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f7ff fd3d 	bl	800d1ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d732:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d736:	210d      	movs	r1, #13
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f000 f829 	bl	800d790 <SDMMC_GetCmdResp1>
 800d73e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d740:	69fb      	ldr	r3, [r7, #28]
}
 800d742:	4618      	mov	r0, r3
 800d744:	3720      	adds	r7, #32
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}

0800d74a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800d74a:	b580      	push	{r7, lr}
 800d74c:	b088      	sub	sp, #32
 800d74e:	af00      	add	r7, sp, #0
 800d750:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d752:	2300      	movs	r3, #0
 800d754:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d756:	230d      	movs	r3, #13
 800d758:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d75a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d75e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d760:	2300      	movs	r3, #0
 800d762:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d764:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d768:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d76a:	f107 0308 	add.w	r3, r7, #8
 800d76e:	4619      	mov	r1, r3
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f7ff fd1b 	bl	800d1ac <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800d776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d77a:	210d      	movs	r1, #13
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	f000 f807 	bl	800d790 <SDMMC_GetCmdResp1>
 800d782:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d784:	69fb      	ldr	r3, [r7, #28]
}
 800d786:	4618      	mov	r0, r3
 800d788:	3720      	adds	r7, #32
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}
	...

0800d790 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b088      	sub	sp, #32
 800d794:	af00      	add	r7, sp, #0
 800d796:	60f8      	str	r0, [r7, #12]
 800d798:	460b      	mov	r3, r1
 800d79a:	607a      	str	r2, [r7, #4]
 800d79c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d79e:	4b70      	ldr	r3, [pc, #448]	@ (800d960 <SDMMC_GetCmdResp1+0x1d0>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	4a70      	ldr	r2, [pc, #448]	@ (800d964 <SDMMC_GetCmdResp1+0x1d4>)
 800d7a4:	fba2 2303 	umull	r2, r3, r2, r3
 800d7a8:	0a5a      	lsrs	r2, r3, #9
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	fb02 f303 	mul.w	r3, r2, r3
 800d7b0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d7b2:	69fb      	ldr	r3, [r7, #28]
 800d7b4:	1e5a      	subs	r2, r3, #1
 800d7b6:	61fa      	str	r2, [r7, #28]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d102      	bne.n	800d7c2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d7bc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d7c0:	e0c9      	b.n	800d956 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7c6:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800d7c8:	69ba      	ldr	r2, [r7, #24]
 800d7ca:	4b67      	ldr	r3, [pc, #412]	@ (800d968 <SDMMC_GetCmdResp1+0x1d8>)
 800d7cc:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d0ef      	beq.n	800d7b2 <SDMMC_GetCmdResp1+0x22>
 800d7d2:	69bb      	ldr	r3, [r7, #24]
 800d7d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d1ea      	bne.n	800d7b2 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7e0:	f003 0304 	and.w	r3, r3, #4
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d004      	beq.n	800d7f2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	2204      	movs	r2, #4
 800d7ec:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d7ee:	2304      	movs	r3, #4
 800d7f0:	e0b1      	b.n	800d956 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7f6:	f003 0301 	and.w	r3, r3, #1
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d004      	beq.n	800d808 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2201      	movs	r2, #1
 800d802:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d804:	2301      	movs	r3, #1
 800d806:	e0a6      	b.n	800d956 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	4a58      	ldr	r2, [pc, #352]	@ (800d96c <SDMMC_GetCmdResp1+0x1dc>)
 800d80c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d80e:	68f8      	ldr	r0, [r7, #12]
 800d810:	f7ff fcf6 	bl	800d200 <SDMMC_GetCommandResponse>
 800d814:	4603      	mov	r3, r0
 800d816:	461a      	mov	r2, r3
 800d818:	7afb      	ldrb	r3, [r7, #11]
 800d81a:	4293      	cmp	r3, r2
 800d81c:	d001      	beq.n	800d822 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d81e:	2301      	movs	r3, #1
 800d820:	e099      	b.n	800d956 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d822:	2100      	movs	r1, #0
 800d824:	68f8      	ldr	r0, [r7, #12]
 800d826:	f7ff fcf8 	bl	800d21a <SDMMC_GetResponse>
 800d82a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d82c:	697a      	ldr	r2, [r7, #20]
 800d82e:	4b50      	ldr	r3, [pc, #320]	@ (800d970 <SDMMC_GetCmdResp1+0x1e0>)
 800d830:	4013      	ands	r3, r2
 800d832:	2b00      	cmp	r3, #0
 800d834:	d101      	bne.n	800d83a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d836:	2300      	movs	r3, #0
 800d838:	e08d      	b.n	800d956 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	da02      	bge.n	800d846 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d840:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d844:	e087      	b.n	800d956 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d001      	beq.n	800d854 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d850:	2340      	movs	r3, #64	@ 0x40
 800d852:	e080      	b.n	800d956 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d854:	697b      	ldr	r3, [r7, #20]
 800d856:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d001      	beq.n	800d862 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d85e:	2380      	movs	r3, #128	@ 0x80
 800d860:	e079      	b.n	800d956 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d862:	697b      	ldr	r3, [r7, #20]
 800d864:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d002      	beq.n	800d872 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d86c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d870:	e071      	b.n	800d956 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d872:	697b      	ldr	r3, [r7, #20]
 800d874:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d002      	beq.n	800d882 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d87c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d880:	e069      	b.n	800d956 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d882:	697b      	ldr	r3, [r7, #20]
 800d884:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d002      	beq.n	800d892 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d88c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d890:	e061      	b.n	800d956 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d002      	beq.n	800d8a2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d89c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d8a0:	e059      	b.n	800d956 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d002      	beq.n	800d8b2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d8ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d8b0:	e051      	b.n	800d956 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d002      	beq.n	800d8c2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d8bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d8c0:	e049      	b.n	800d956 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d8c2:	697b      	ldr	r3, [r7, #20]
 800d8c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d002      	beq.n	800d8d2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d8cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d8d0:	e041      	b.n	800d956 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d8d2:	697b      	ldr	r3, [r7, #20]
 800d8d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d002      	beq.n	800d8e2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d8dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d8e0:	e039      	b.n	800d956 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d002      	beq.n	800d8f2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d8ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d8f0:	e031      	b.n	800d956 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d002      	beq.n	800d902 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d8fc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d900:	e029      	b.n	800d956 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d002      	beq.n	800d912 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d90c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d910:	e021      	b.n	800d956 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d002      	beq.n	800d922 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d91c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d920:	e019      	b.n	800d956 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d922:	697b      	ldr	r3, [r7, #20]
 800d924:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d002      	beq.n	800d932 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d92c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800d930:	e011      	b.n	800d956 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d002      	beq.n	800d942 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d93c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800d940:	e009      	b.n	800d956 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	f003 0308 	and.w	r3, r3, #8
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d002      	beq.n	800d952 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d94c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800d950:	e001      	b.n	800d956 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d952:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d956:	4618      	mov	r0, r3
 800d958:	3720      	adds	r7, #32
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}
 800d95e:	bf00      	nop
 800d960:	24000050 	.word	0x24000050
 800d964:	10624dd3 	.word	0x10624dd3
 800d968:	00200045 	.word	0x00200045
 800d96c:	002000c5 	.word	0x002000c5
 800d970:	fdffe008 	.word	0xfdffe008

0800d974 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d974:	b480      	push	{r7}
 800d976:	b085      	sub	sp, #20
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d97c:	4b1f      	ldr	r3, [pc, #124]	@ (800d9fc <SDMMC_GetCmdResp2+0x88>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	4a1f      	ldr	r2, [pc, #124]	@ (800da00 <SDMMC_GetCmdResp2+0x8c>)
 800d982:	fba2 2303 	umull	r2, r3, r2, r3
 800d986:	0a5b      	lsrs	r3, r3, #9
 800d988:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d98c:	fb02 f303 	mul.w	r3, r2, r3
 800d990:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	1e5a      	subs	r2, r3, #1
 800d996:	60fa      	str	r2, [r7, #12]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d102      	bne.n	800d9a2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d99c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d9a0:	e026      	b.n	800d9f0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9a6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d0ef      	beq.n	800d992 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d1ea      	bne.n	800d992 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9c0:	f003 0304 	and.w	r3, r3, #4
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d004      	beq.n	800d9d2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2204      	movs	r2, #4
 800d9cc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d9ce:	2304      	movs	r3, #4
 800d9d0:	e00e      	b.n	800d9f0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9d6:	f003 0301 	and.w	r3, r3, #1
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d004      	beq.n	800d9e8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2201      	movs	r2, #1
 800d9e2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	e003      	b.n	800d9f0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	4a06      	ldr	r2, [pc, #24]	@ (800da04 <SDMMC_GetCmdResp2+0x90>)
 800d9ec:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d9ee:	2300      	movs	r3, #0
}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	3714      	adds	r7, #20
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fa:	4770      	bx	lr
 800d9fc:	24000050 	.word	0x24000050
 800da00:	10624dd3 	.word	0x10624dd3
 800da04:	002000c5 	.word	0x002000c5

0800da08 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800da08:	b480      	push	{r7}
 800da0a:	b085      	sub	sp, #20
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800da10:	4b1a      	ldr	r3, [pc, #104]	@ (800da7c <SDMMC_GetCmdResp3+0x74>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	4a1a      	ldr	r2, [pc, #104]	@ (800da80 <SDMMC_GetCmdResp3+0x78>)
 800da16:	fba2 2303 	umull	r2, r3, r2, r3
 800da1a:	0a5b      	lsrs	r3, r3, #9
 800da1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da20:	fb02 f303 	mul.w	r3, r2, r3
 800da24:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	1e5a      	subs	r2, r3, #1
 800da2a:	60fa      	str	r2, [r7, #12]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d102      	bne.n	800da36 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800da30:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800da34:	e01b      	b.n	800da6e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da3a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800da42:	2b00      	cmp	r3, #0
 800da44:	d0ef      	beq.n	800da26 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d1ea      	bne.n	800da26 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da54:	f003 0304 	and.w	r3, r3, #4
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d004      	beq.n	800da66 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2204      	movs	r2, #4
 800da60:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800da62:	2304      	movs	r3, #4
 800da64:	e003      	b.n	800da6e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	4a06      	ldr	r2, [pc, #24]	@ (800da84 <SDMMC_GetCmdResp3+0x7c>)
 800da6a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800da6c:	2300      	movs	r3, #0
}
 800da6e:	4618      	mov	r0, r3
 800da70:	3714      	adds	r7, #20
 800da72:	46bd      	mov	sp, r7
 800da74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da78:	4770      	bx	lr
 800da7a:	bf00      	nop
 800da7c:	24000050 	.word	0x24000050
 800da80:	10624dd3 	.word	0x10624dd3
 800da84:	002000c5 	.word	0x002000c5

0800da88 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b088      	sub	sp, #32
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	60f8      	str	r0, [r7, #12]
 800da90:	460b      	mov	r3, r1
 800da92:	607a      	str	r2, [r7, #4]
 800da94:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800da96:	4b35      	ldr	r3, [pc, #212]	@ (800db6c <SDMMC_GetCmdResp6+0xe4>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	4a35      	ldr	r2, [pc, #212]	@ (800db70 <SDMMC_GetCmdResp6+0xe8>)
 800da9c:	fba2 2303 	umull	r2, r3, r2, r3
 800daa0:	0a5b      	lsrs	r3, r3, #9
 800daa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800daa6:	fb02 f303 	mul.w	r3, r2, r3
 800daaa:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800daac:	69fb      	ldr	r3, [r7, #28]
 800daae:	1e5a      	subs	r2, r3, #1
 800dab0:	61fa      	str	r2, [r7, #28]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d102      	bne.n	800dabc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dab6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800daba:	e052      	b.n	800db62 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dac0:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dac2:	69bb      	ldr	r3, [r7, #24]
 800dac4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d0ef      	beq.n	800daac <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800dacc:	69bb      	ldr	r3, [r7, #24]
 800dace:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d1ea      	bne.n	800daac <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dada:	f003 0304 	and.w	r3, r3, #4
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d004      	beq.n	800daec <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	2204      	movs	r2, #4
 800dae6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dae8:	2304      	movs	r3, #4
 800daea:	e03a      	b.n	800db62 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800daf0:	f003 0301 	and.w	r3, r3, #1
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d004      	beq.n	800db02 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	2201      	movs	r2, #1
 800dafc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dafe:	2301      	movs	r3, #1
 800db00:	e02f      	b.n	800db62 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800db02:	68f8      	ldr	r0, [r7, #12]
 800db04:	f7ff fb7c 	bl	800d200 <SDMMC_GetCommandResponse>
 800db08:	4603      	mov	r3, r0
 800db0a:	461a      	mov	r2, r3
 800db0c:	7afb      	ldrb	r3, [r7, #11]
 800db0e:	4293      	cmp	r3, r2
 800db10:	d001      	beq.n	800db16 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db12:	2301      	movs	r3, #1
 800db14:	e025      	b.n	800db62 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	4a16      	ldr	r2, [pc, #88]	@ (800db74 <SDMMC_GetCmdResp6+0xec>)
 800db1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800db1c:	2100      	movs	r1, #0
 800db1e:	68f8      	ldr	r0, [r7, #12]
 800db20:	f7ff fb7b 	bl	800d21a <SDMMC_GetResponse>
 800db24:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d106      	bne.n	800db3e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800db30:	697b      	ldr	r3, [r7, #20]
 800db32:	0c1b      	lsrs	r3, r3, #16
 800db34:	b29a      	uxth	r2, r3
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800db3a:	2300      	movs	r3, #0
 800db3c:	e011      	b.n	800db62 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800db44:	2b00      	cmp	r3, #0
 800db46:	d002      	beq.n	800db4e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800db48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800db4c:	e009      	b.n	800db62 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800db54:	2b00      	cmp	r3, #0
 800db56:	d002      	beq.n	800db5e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800db58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800db5c:	e001      	b.n	800db62 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800db5e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800db62:	4618      	mov	r0, r3
 800db64:	3720      	adds	r7, #32
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}
 800db6a:	bf00      	nop
 800db6c:	24000050 	.word	0x24000050
 800db70:	10624dd3 	.word	0x10624dd3
 800db74:	002000c5 	.word	0x002000c5

0800db78 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800db78:	b480      	push	{r7}
 800db7a:	b085      	sub	sp, #20
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800db80:	4b22      	ldr	r3, [pc, #136]	@ (800dc0c <SDMMC_GetCmdResp7+0x94>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	4a22      	ldr	r2, [pc, #136]	@ (800dc10 <SDMMC_GetCmdResp7+0x98>)
 800db86:	fba2 2303 	umull	r2, r3, r2, r3
 800db8a:	0a5b      	lsrs	r3, r3, #9
 800db8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db90:	fb02 f303 	mul.w	r3, r2, r3
 800db94:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	1e5a      	subs	r2, r3, #1
 800db9a:	60fa      	str	r2, [r7, #12]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d102      	bne.n	800dba6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dba0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dba4:	e02c      	b.n	800dc00 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbaa:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d0ef      	beq.n	800db96 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800dbb6:	68bb      	ldr	r3, [r7, #8]
 800dbb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d1ea      	bne.n	800db96 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbc4:	f003 0304 	and.w	r3, r3, #4
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d004      	beq.n	800dbd6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2204      	movs	r2, #4
 800dbd0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dbd2:	2304      	movs	r3, #4
 800dbd4:	e014      	b.n	800dc00 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbda:	f003 0301 	and.w	r3, r3, #1
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d004      	beq.n	800dbec <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2201      	movs	r2, #1
 800dbe6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dbe8:	2301      	movs	r3, #1
 800dbea:	e009      	b.n	800dc00 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d002      	beq.n	800dbfe <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2240      	movs	r2, #64	@ 0x40
 800dbfc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800dbfe:	2300      	movs	r3, #0

}
 800dc00:	4618      	mov	r0, r3
 800dc02:	3714      	adds	r7, #20
 800dc04:	46bd      	mov	sp, r7
 800dc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0a:	4770      	bx	lr
 800dc0c:	24000050 	.word	0x24000050
 800dc10:	10624dd3 	.word	0x10624dd3

0800dc14 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800dc14:	b480      	push	{r7}
 800dc16:	b085      	sub	sp, #20
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800dc1c:	4b11      	ldr	r3, [pc, #68]	@ (800dc64 <SDMMC_GetCmdError+0x50>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	4a11      	ldr	r2, [pc, #68]	@ (800dc68 <SDMMC_GetCmdError+0x54>)
 800dc22:	fba2 2303 	umull	r2, r3, r2, r3
 800dc26:	0a5b      	lsrs	r3, r3, #9
 800dc28:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc2c:	fb02 f303 	mul.w	r3, r2, r3
 800dc30:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	1e5a      	subs	r2, r3, #1
 800dc36:	60fa      	str	r2, [r7, #12]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d102      	bne.n	800dc42 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dc3c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dc40:	e009      	b.n	800dc56 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d0f1      	beq.n	800dc32 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	4a06      	ldr	r2, [pc, #24]	@ (800dc6c <SDMMC_GetCmdError+0x58>)
 800dc52:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800dc54:	2300      	movs	r3, #0
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3714      	adds	r7, #20
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc60:	4770      	bx	lr
 800dc62:	bf00      	nop
 800dc64:	24000050 	.word	0x24000050
 800dc68:	10624dd3 	.word	0x10624dd3
 800dc6c:	002000c5 	.word	0x002000c5

0800dc70 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800dc74:	4904      	ldr	r1, [pc, #16]	@ (800dc88 <MX_FATFS_Init+0x18>)
 800dc76:	4805      	ldr	r0, [pc, #20]	@ (800dc8c <MX_FATFS_Init+0x1c>)
 800dc78:	f002 fc08 	bl	801048c <FATFS_LinkDriver>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	461a      	mov	r2, r3
 800dc80:	4b03      	ldr	r3, [pc, #12]	@ (800dc90 <MX_FATFS_Init+0x20>)
 800dc82:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800dc84:	bf00      	nop
 800dc86:	bd80      	pop	{r7, pc}
 800dc88:	24000590 	.word	0x24000590
 800dc8c:	08011ce4 	.word	0x08011ce4
 800dc90:	2400058c 	.word	0x2400058c

0800dc94 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800dc94:	b480      	push	{r7}
 800dc96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800dc98:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca2:	4770      	bx	lr

0800dca4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b086      	sub	sp, #24
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	60f8      	str	r0, [r7, #12]
 800dcac:	60b9      	str	r1, [r7, #8]
 800dcae:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	68ba      	ldr	r2, [r7, #8]
 800dcb8:	68f9      	ldr	r1, [r7, #12]
 800dcba:	4806      	ldr	r0, [pc, #24]	@ (800dcd4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800dcbc:	f7fc f95e 	bl	8009f7c <HAL_SD_ReadBlocks_DMA>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d001      	beq.n	800dcca <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dcca:	7dfb      	ldrb	r3, [r7, #23]
}
 800dccc:	4618      	mov	r0, r3
 800dcce:	3718      	adds	r7, #24
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}
 800dcd4:	24000420 	.word	0x24000420

0800dcd8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b086      	sub	sp, #24
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	60f8      	str	r0, [r7, #12]
 800dce0:	60b9      	str	r1, [r7, #8]
 800dce2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800dce4:	2300      	movs	r3, #0
 800dce6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	68ba      	ldr	r2, [r7, #8]
 800dcec:	68f9      	ldr	r1, [r7, #12]
 800dcee:	4806      	ldr	r0, [pc, #24]	@ (800dd08 <BSP_SD_WriteBlocks_DMA+0x30>)
 800dcf0:	f7fc f9ec 	bl	800a0cc <HAL_SD_WriteBlocks_DMA>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d001      	beq.n	800dcfe <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800dcfa:	2301      	movs	r3, #1
 800dcfc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dcfe:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd00:	4618      	mov	r0, r3
 800dd02:	3718      	adds	r7, #24
 800dd04:	46bd      	mov	sp, r7
 800dd06:	bd80      	pop	{r7, pc}
 800dd08:	24000420 	.word	0x24000420

0800dd0c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800dd10:	4805      	ldr	r0, [pc, #20]	@ (800dd28 <BSP_SD_GetCardState+0x1c>)
 800dd12:	f7fc ffe5 	bl	800ace0 <HAL_SD_GetCardState>
 800dd16:	4603      	mov	r3, r0
 800dd18:	2b04      	cmp	r3, #4
 800dd1a:	bf14      	ite	ne
 800dd1c:	2301      	movne	r3, #1
 800dd1e:	2300      	moveq	r3, #0
 800dd20:	b2db      	uxtb	r3, r3
}
 800dd22:	4618      	mov	r0, r3
 800dd24:	bd80      	pop	{r7, pc}
 800dd26:	bf00      	nop
 800dd28:	24000420 	.word	0x24000420

0800dd2c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b082      	sub	sp, #8
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800dd34:	6879      	ldr	r1, [r7, #4]
 800dd36:	4803      	ldr	r0, [pc, #12]	@ (800dd44 <BSP_SD_GetCardInfo+0x18>)
 800dd38:	f7fc fe94 	bl	800aa64 <HAL_SD_GetCardInfo>
}
 800dd3c:	bf00      	nop
 800dd3e:	3708      	adds	r7, #8
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}
 800dd44:	24000420 	.word	0x24000420

0800dd48 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b082      	sub	sp, #8
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800dd50:	f000 fa14 	bl	800e17c <BSP_SD_WriteCpltCallback>
}
 800dd54:	bf00      	nop
 800dd56:	3708      	adds	r7, #8
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}

0800dd5c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b082      	sub	sp, #8
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800dd64:	f000 fa16 	bl	800e194 <BSP_SD_ReadCpltCallback>
}
 800dd68:	bf00      	nop
 800dd6a:	3708      	adds	r7, #8
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bd80      	pop	{r7, pc}

0800dd70 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b084      	sub	sp, #16
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800dd78:	f7f6 fa76 	bl	8004268 <HAL_GetTick>
 800dd7c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800dd7e:	e006      	b.n	800dd8e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dd80:	f7ff ffc4 	bl	800dd0c <BSP_SD_GetCardState>
 800dd84:	4603      	mov	r3, r0
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d101      	bne.n	800dd8e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	e009      	b.n	800dda2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800dd8e:	f7f6 fa6b 	bl	8004268 <HAL_GetTick>
 800dd92:	4602      	mov	r2, r0
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	1ad3      	subs	r3, r2, r3
 800dd98:	687a      	ldr	r2, [r7, #4]
 800dd9a:	429a      	cmp	r2, r3
 800dd9c:	d8f0      	bhi.n	800dd80 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800dd9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dda2:	4618      	mov	r0, r3
 800dda4:	3710      	adds	r7, #16
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}
	...

0800ddac <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b082      	sub	sp, #8
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ddb6:	4b0b      	ldr	r3, [pc, #44]	@ (800dde4 <SD_CheckStatus+0x38>)
 800ddb8:	2201      	movs	r2, #1
 800ddba:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ddbc:	f7ff ffa6 	bl	800dd0c <BSP_SD_GetCardState>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d107      	bne.n	800ddd6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ddc6:	4b07      	ldr	r3, [pc, #28]	@ (800dde4 <SD_CheckStatus+0x38>)
 800ddc8:	781b      	ldrb	r3, [r3, #0]
 800ddca:	b2db      	uxtb	r3, r3
 800ddcc:	f023 0301 	bic.w	r3, r3, #1
 800ddd0:	b2da      	uxtb	r2, r3
 800ddd2:	4b04      	ldr	r3, [pc, #16]	@ (800dde4 <SD_CheckStatus+0x38>)
 800ddd4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ddd6:	4b03      	ldr	r3, [pc, #12]	@ (800dde4 <SD_CheckStatus+0x38>)
 800ddd8:	781b      	ldrb	r3, [r3, #0]
 800ddda:	b2db      	uxtb	r3, r3
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	3708      	adds	r7, #8
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}
 800dde4:	2400005d 	.word	0x2400005d

0800dde8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b082      	sub	sp, #8
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	4603      	mov	r3, r0
 800ddf0:	71fb      	strb	r3, [r7, #7]
  {
    Stat = SD_CheckStatus(lun);
  }

#else
  Stat = SD_CheckStatus(lun);
 800ddf2:	79fb      	ldrb	r3, [r7, #7]
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f7ff ffd9 	bl	800ddac <SD_CheckStatus>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	461a      	mov	r2, r3
 800ddfe:	4b04      	ldr	r3, [pc, #16]	@ (800de10 <SD_initialize+0x28>)
 800de00:	701a      	strb	r2, [r3, #0]
#endif

  return Stat;
 800de02:	4b03      	ldr	r3, [pc, #12]	@ (800de10 <SD_initialize+0x28>)
 800de04:	781b      	ldrb	r3, [r3, #0]
 800de06:	b2db      	uxtb	r3, r3
}
 800de08:	4618      	mov	r0, r3
 800de0a:	3708      	adds	r7, #8
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}
 800de10:	2400005d 	.word	0x2400005d

0800de14 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b082      	sub	sp, #8
 800de18:	af00      	add	r7, sp, #0
 800de1a:	4603      	mov	r3, r0
 800de1c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800de1e:	79fb      	ldrb	r3, [r7, #7]
 800de20:	4618      	mov	r0, r3
 800de22:	f7ff ffc3 	bl	800ddac <SD_CheckStatus>
 800de26:	4603      	mov	r3, r0
}
 800de28:	4618      	mov	r0, r3
 800de2a:	3708      	adds	r7, #8
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}

0800de30 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b088      	sub	sp, #32
 800de34:	af00      	add	r7, sp, #0
 800de36:	60b9      	str	r1, [r7, #8]
 800de38:	607a      	str	r2, [r7, #4]
 800de3a:	603b      	str	r3, [r7, #0]
 800de3c:	4603      	mov	r3, r0
 800de3e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800de40:	2301      	movs	r3, #1
 800de42:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800de44:	f247 5030 	movw	r0, #30000	@ 0x7530
 800de48:	f7ff ff92 	bl	800dd70 <SD_CheckStatusWithTimeout>
 800de4c:	4603      	mov	r3, r0
 800de4e:	2b00      	cmp	r3, #0
 800de50:	da01      	bge.n	800de56 <SD_read+0x26>
  {
    return res;
 800de52:	7ffb      	ldrb	r3, [r7, #31]
 800de54:	e08b      	b.n	800df6e <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	f003 0303 	and.w	r3, r3, #3
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d13b      	bne.n	800ded8 <SD_read+0xa8>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800de60:	683a      	ldr	r2, [r7, #0]
 800de62:	6879      	ldr	r1, [r7, #4]
 800de64:	68b8      	ldr	r0, [r7, #8]
 800de66:	f7ff ff1d 	bl	800dca4 <BSP_SD_ReadBlocks_DMA>
 800de6a:	4603      	mov	r3, r0
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d17d      	bne.n	800df6c <SD_read+0x13c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800de70:	4b41      	ldr	r3, [pc, #260]	@ (800df78 <SD_read+0x148>)
 800de72:	2200      	movs	r2, #0
 800de74:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800de76:	f7f6 f9f7 	bl	8004268 <HAL_GetTick>
 800de7a:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800de7c:	bf00      	nop
 800de7e:	4b3e      	ldr	r3, [pc, #248]	@ (800df78 <SD_read+0x148>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d108      	bne.n	800de98 <SD_read+0x68>
 800de86:	f7f6 f9ef 	bl	8004268 <HAL_GetTick>
 800de8a:	4602      	mov	r2, r0
 800de8c:	697b      	ldr	r3, [r7, #20]
 800de8e:	1ad3      	subs	r3, r2, r3
 800de90:	f247 522f 	movw	r2, #29999	@ 0x752f
 800de94:	4293      	cmp	r3, r2
 800de96:	d9f2      	bls.n	800de7e <SD_read+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800de98:	4b37      	ldr	r3, [pc, #220]	@ (800df78 <SD_read+0x148>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d102      	bne.n	800dea6 <SD_read+0x76>
      {
        res = RES_ERROR;
 800dea0:	2301      	movs	r3, #1
 800dea2:	77fb      	strb	r3, [r7, #31]
 800dea4:	e062      	b.n	800df6c <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 800dea6:	4b34      	ldr	r3, [pc, #208]	@ (800df78 <SD_read+0x148>)
 800dea8:	2200      	movs	r2, #0
 800deaa:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800deac:	f7f6 f9dc 	bl	8004268 <HAL_GetTick>
 800deb0:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800deb2:	e007      	b.n	800dec4 <SD_read+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800deb4:	f7ff ff2a 	bl	800dd0c <BSP_SD_GetCardState>
 800deb8:	4603      	mov	r3, r0
 800deba:	2b00      	cmp	r3, #0
 800debc:	d102      	bne.n	800dec4 <SD_read+0x94>
          {
            res = RES_OK;
 800debe:	2300      	movs	r3, #0
 800dec0:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800dec2:	e053      	b.n	800df6c <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800dec4:	f7f6 f9d0 	bl	8004268 <HAL_GetTick>
 800dec8:	4602      	mov	r2, r0
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	1ad3      	subs	r3, r2, r3
 800dece:	f247 522f 	movw	r2, #29999	@ 0x752f
 800ded2:	4293      	cmp	r3, r2
 800ded4:	d9ee      	bls.n	800deb4 <SD_read+0x84>
 800ded6:	e049      	b.n	800df6c <SD_read+0x13c>
    else
    {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 800ded8:	2300      	movs	r3, #0
 800deda:	61bb      	str	r3, [r7, #24]
 800dedc:	e037      	b.n	800df4e <SD_read+0x11e>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	1c5a      	adds	r2, r3, #1
 800dee2:	607a      	str	r2, [r7, #4]
 800dee4:	2201      	movs	r2, #1
 800dee6:	4619      	mov	r1, r3
 800dee8:	4824      	ldr	r0, [pc, #144]	@ (800df7c <SD_read+0x14c>)
 800deea:	f7ff fedb 	bl	800dca4 <BSP_SD_ReadBlocks_DMA>
 800deee:	4603      	mov	r3, r0
 800def0:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800def2:	7fbb      	ldrb	r3, [r7, #30]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d12f      	bne.n	800df58 <SD_read+0x128>
          /* wait until the read is successful or a timeout occurs */

          timeout = HAL_GetTick();
 800def8:	f7f6 f9b6 	bl	8004268 <HAL_GetTick>
 800defc:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800defe:	bf00      	nop
 800df00:	4b1d      	ldr	r3, [pc, #116]	@ (800df78 <SD_read+0x148>)
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d108      	bne.n	800df1a <SD_read+0xea>
 800df08:	f7f6 f9ae 	bl	8004268 <HAL_GetTick>
 800df0c:	4602      	mov	r2, r0
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	1ad3      	subs	r3, r2, r3
 800df12:	f247 522f 	movw	r2, #29999	@ 0x752f
 800df16:	4293      	cmp	r3, r2
 800df18:	d9f2      	bls.n	800df00 <SD_read+0xd0>
          {
          }
          if (ReadStatus == 0)
 800df1a:	4b17      	ldr	r3, [pc, #92]	@ (800df78 <SD_read+0x148>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d102      	bne.n	800df28 <SD_read+0xf8>
          {
            res = RES_ERROR;
 800df22:	2301      	movs	r3, #1
 800df24:	77fb      	strb	r3, [r7, #31]
            break;
 800df26:	e018      	b.n	800df5a <SD_read+0x12a>
          }
          ReadStatus = 0;
 800df28:	4b13      	ldr	r3, [pc, #76]	@ (800df78 <SD_read+0x148>)
 800df2a:	2200      	movs	r2, #0
 800df2c:	601a      	str	r2, [r3, #0]
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	4a12      	ldr	r2, [pc, #72]	@ (800df7c <SD_read+0x14c>)
 800df32:	4618      	mov	r0, r3
 800df34:	4611      	mov	r1, r2
 800df36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800df3a:	461a      	mov	r2, r3
 800df3c:	f003 f825 	bl	8010f8a <memcpy>
          buff += BLOCKSIZE;
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800df46:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 800df48:	69bb      	ldr	r3, [r7, #24]
 800df4a:	3301      	adds	r3, #1
 800df4c:	61bb      	str	r3, [r7, #24]
 800df4e:	69bb      	ldr	r3, [r7, #24]
 800df50:	683a      	ldr	r2, [r7, #0]
 800df52:	429a      	cmp	r2, r3
 800df54:	d8c3      	bhi.n	800dede <SD_read+0xae>
 800df56:	e000      	b.n	800df5a <SD_read+0x12a>
        }
        else
        {
          break;
 800df58:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 800df5a:	69bb      	ldr	r3, [r7, #24]
 800df5c:	683a      	ldr	r2, [r7, #0]
 800df5e:	429a      	cmp	r2, r3
 800df60:	d104      	bne.n	800df6c <SD_read+0x13c>
 800df62:	7fbb      	ldrb	r3, [r7, #30]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d101      	bne.n	800df6c <SD_read+0x13c>
        res = RES_OK;
 800df68:	2300      	movs	r3, #0
 800df6a:	77fb      	strb	r3, [r7, #31]
    }
#endif

  return res;
 800df6c:	7ffb      	ldrb	r3, [r7, #31]
}
 800df6e:	4618      	mov	r0, r3
 800df70:	3720      	adds	r7, #32
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}
 800df76:	bf00      	nop
 800df78:	24000bf8 	.word	0x24000bf8
 800df7c:	240009f4 	.word	0x240009f4

0800df80 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b088      	sub	sp, #32
 800df84:	af00      	add	r7, sp, #0
 800df86:	60b9      	str	r1, [r7, #8]
 800df88:	607a      	str	r2, [r7, #4]
 800df8a:	603b      	str	r3, [r7, #0]
 800df8c:	4603      	mov	r3, r0
 800df8e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800df90:	2301      	movs	r3, #1
 800df92:	77fb      	strb	r3, [r7, #31]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800df94:	4b4b      	ldr	r3, [pc, #300]	@ (800e0c4 <SD_write+0x144>)
 800df96:	2200      	movs	r2, #0
 800df98:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800df9a:	f247 5030 	movw	r0, #30000	@ 0x7530
 800df9e:	f7ff fee7 	bl	800dd70 <SD_CheckStatusWithTimeout>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	da01      	bge.n	800dfac <SD_write+0x2c>
  {
    return res;
 800dfa8:	7ffb      	ldrb	r3, [r7, #31]
 800dfaa:	e087      	b.n	800e0bc <SD_write+0x13c>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800dfac:	68bb      	ldr	r3, [r7, #8]
 800dfae:	f003 0303 	and.w	r3, r3, #3
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d138      	bne.n	800e028 <SD_write+0xa8>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800dfb6:	683a      	ldr	r2, [r7, #0]
 800dfb8:	6879      	ldr	r1, [r7, #4]
 800dfba:	68b8      	ldr	r0, [r7, #8]
 800dfbc:	f7ff fe8c 	bl	800dcd8 <BSP_SD_WriteBlocks_DMA>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d179      	bne.n	800e0ba <SD_write+0x13a>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800dfc6:	f7f6 f94f 	bl	8004268 <HAL_GetTick>
 800dfca:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800dfcc:	bf00      	nop
 800dfce:	4b3d      	ldr	r3, [pc, #244]	@ (800e0c4 <SD_write+0x144>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d108      	bne.n	800dfe8 <SD_write+0x68>
 800dfd6:	f7f6 f947 	bl	8004268 <HAL_GetTick>
 800dfda:	4602      	mov	r2, r0
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	1ad3      	subs	r3, r2, r3
 800dfe0:	f247 522f 	movw	r2, #29999	@ 0x752f
 800dfe4:	4293      	cmp	r3, r2
 800dfe6:	d9f2      	bls.n	800dfce <SD_write+0x4e>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800dfe8:	4b36      	ldr	r3, [pc, #216]	@ (800e0c4 <SD_write+0x144>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d102      	bne.n	800dff6 <SD_write+0x76>
      {
        res = RES_ERROR;
 800dff0:	2301      	movs	r3, #1
 800dff2:	77fb      	strb	r3, [r7, #31]
 800dff4:	e061      	b.n	800e0ba <SD_write+0x13a>
      }
      else
      {
        WriteStatus = 0;
 800dff6:	4b33      	ldr	r3, [pc, #204]	@ (800e0c4 <SD_write+0x144>)
 800dff8:	2200      	movs	r2, #0
 800dffa:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800dffc:	f7f6 f934 	bl	8004268 <HAL_GetTick>
 800e000:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e002:	e007      	b.n	800e014 <SD_write+0x94>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e004:	f7ff fe82 	bl	800dd0c <BSP_SD_GetCardState>
 800e008:	4603      	mov	r3, r0
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d102      	bne.n	800e014 <SD_write+0x94>
          {
            res = RES_OK;
 800e00e:	2300      	movs	r3, #0
 800e010:	77fb      	strb	r3, [r7, #31]
            break;
 800e012:	e052      	b.n	800e0ba <SD_write+0x13a>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e014:	f7f6 f928 	bl	8004268 <HAL_GetTick>
 800e018:	4602      	mov	r2, r0
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	1ad3      	subs	r3, r2, r3
 800e01e:	f247 522f 	movw	r2, #29999	@ 0x752f
 800e022:	4293      	cmp	r3, r2
 800e024:	d9ee      	bls.n	800e004 <SD_write+0x84>
 800e026:	e048      	b.n	800e0ba <SD_write+0x13a>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 800e028:	2300      	movs	r3, #0
 800e02a:	61bb      	str	r3, [r7, #24]
 800e02c:	e034      	b.n	800e098 <SD_write+0x118>
      {
        WriteStatus = 0;
 800e02e:	4b25      	ldr	r3, [pc, #148]	@ (800e0c4 <SD_write+0x144>)
 800e030:	2200      	movs	r2, #0
 800e032:	601a      	str	r2, [r3, #0]

        memcpy((void *)scratch, (void *)buff, BLOCKSIZE);
 800e034:	4a24      	ldr	r2, [pc, #144]	@ (800e0c8 <SD_write+0x148>)
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	4610      	mov	r0, r2
 800e03a:	4619      	mov	r1, r3
 800e03c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e040:	461a      	mov	r2, r3
 800e042:	f002 ffa2 	bl	8010f8a <memcpy>
        buff += BLOCKSIZE;
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800e04c:	60bb      	str	r3, [r7, #8]

        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	1c5a      	adds	r2, r3, #1
 800e052:	607a      	str	r2, [r7, #4]
 800e054:	2201      	movs	r2, #1
 800e056:	4619      	mov	r1, r3
 800e058:	481b      	ldr	r0, [pc, #108]	@ (800e0c8 <SD_write+0x148>)
 800e05a:	f7ff fe3d 	bl	800dcd8 <BSP_SD_WriteBlocks_DMA>
 800e05e:	4603      	mov	r3, r0
 800e060:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800e062:	7fbb      	ldrb	r3, [r7, #30]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d11c      	bne.n	800e0a2 <SD_write+0x122>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 800e068:	f7f6 f8fe 	bl	8004268 <HAL_GetTick>
 800e06c:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e06e:	bf00      	nop
 800e070:	4b14      	ldr	r3, [pc, #80]	@ (800e0c4 <SD_write+0x144>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d108      	bne.n	800e08a <SD_write+0x10a>
 800e078:	f7f6 f8f6 	bl	8004268 <HAL_GetTick>
 800e07c:	4602      	mov	r2, r0
 800e07e:	697b      	ldr	r3, [r7, #20]
 800e080:	1ad3      	subs	r3, r2, r3
 800e082:	f247 522f 	movw	r2, #29999	@ 0x752f
 800e086:	4293      	cmp	r3, r2
 800e088:	d9f2      	bls.n	800e070 <SD_write+0xf0>
          {
          }
          if (WriteStatus == 0)
 800e08a:	4b0e      	ldr	r3, [pc, #56]	@ (800e0c4 <SD_write+0x144>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d009      	beq.n	800e0a6 <SD_write+0x126>
      for (i = 0; i < count; i++)
 800e092:	69bb      	ldr	r3, [r7, #24]
 800e094:	3301      	adds	r3, #1
 800e096:	61bb      	str	r3, [r7, #24]
 800e098:	69bb      	ldr	r3, [r7, #24]
 800e09a:	683a      	ldr	r2, [r7, #0]
 800e09c:	429a      	cmp	r2, r3
 800e09e:	d8c6      	bhi.n	800e02e <SD_write+0xae>
 800e0a0:	e002      	b.n	800e0a8 <SD_write+0x128>
          }

        }
        else
        {
          break;
 800e0a2:	bf00      	nop
 800e0a4:	e000      	b.n	800e0a8 <SD_write+0x128>
            break;
 800e0a6:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 800e0a8:	69bb      	ldr	r3, [r7, #24]
 800e0aa:	683a      	ldr	r2, [r7, #0]
 800e0ac:	429a      	cmp	r2, r3
 800e0ae:	d104      	bne.n	800e0ba <SD_write+0x13a>
 800e0b0:	7fbb      	ldrb	r3, [r7, #30]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d101      	bne.n	800e0ba <SD_write+0x13a>
        res = RES_OK;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	77fb      	strb	r3, [r7, #31]
    }
#endif
  return res;
 800e0ba:	7ffb      	ldrb	r3, [r7, #31]
}
 800e0bc:	4618      	mov	r0, r3
 800e0be:	3720      	adds	r7, #32
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	bd80      	pop	{r7, pc}
 800e0c4:	24000bf4 	.word	0x24000bf4
 800e0c8:	240009f4 	.word	0x240009f4

0800e0cc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b08c      	sub	sp, #48	@ 0x30
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	603a      	str	r2, [r7, #0]
 800e0d6:	71fb      	strb	r3, [r7, #7]
 800e0d8:	460b      	mov	r3, r1
 800e0da:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e0dc:	2301      	movs	r3, #1
 800e0de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e0e2:	4b25      	ldr	r3, [pc, #148]	@ (800e178 <SD_ioctl+0xac>)
 800e0e4:	781b      	ldrb	r3, [r3, #0]
 800e0e6:	b2db      	uxtb	r3, r3
 800e0e8:	f003 0301 	and.w	r3, r3, #1
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d001      	beq.n	800e0f4 <SD_ioctl+0x28>
 800e0f0:	2303      	movs	r3, #3
 800e0f2:	e03c      	b.n	800e16e <SD_ioctl+0xa2>

  switch (cmd)
 800e0f4:	79bb      	ldrb	r3, [r7, #6]
 800e0f6:	2b03      	cmp	r3, #3
 800e0f8:	d834      	bhi.n	800e164 <SD_ioctl+0x98>
 800e0fa:	a201      	add	r2, pc, #4	@ (adr r2, 800e100 <SD_ioctl+0x34>)
 800e0fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e100:	0800e111 	.word	0x0800e111
 800e104:	0800e119 	.word	0x0800e119
 800e108:	0800e131 	.word	0x0800e131
 800e10c:	0800e14b 	.word	0x0800e14b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e110:	2300      	movs	r3, #0
 800e112:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e116:	e028      	b.n	800e16a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e118:	f107 0308 	add.w	r3, r7, #8
 800e11c:	4618      	mov	r0, r3
 800e11e:	f7ff fe05 	bl	800dd2c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e122:	6a3a      	ldr	r2, [r7, #32]
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e128:	2300      	movs	r3, #0
 800e12a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e12e:	e01c      	b.n	800e16a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e130:	f107 0308 	add.w	r3, r7, #8
 800e134:	4618      	mov	r0, r3
 800e136:	f7ff fdf9 	bl	800dd2c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e13c:	b29a      	uxth	r2, r3
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e142:	2300      	movs	r3, #0
 800e144:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e148:	e00f      	b.n	800e16a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e14a:	f107 0308 	add.w	r3, r7, #8
 800e14e:	4618      	mov	r0, r3
 800e150:	f7ff fdec 	bl	800dd2c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e156:	0a5a      	lsrs	r2, r3, #9
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e15c:	2300      	movs	r3, #0
 800e15e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800e162:	e002      	b.n	800e16a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e164:	2304      	movs	r3, #4
 800e166:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800e16a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800e16e:	4618      	mov	r0, r3
 800e170:	3730      	adds	r7, #48	@ 0x30
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
 800e176:	bf00      	nop
 800e178:	2400005d 	.word	0x2400005d

0800e17c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e17c:	b480      	push	{r7}
 800e17e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800e180:	4b03      	ldr	r3, [pc, #12]	@ (800e190 <BSP_SD_WriteCpltCallback+0x14>)
 800e182:	2201      	movs	r2, #1
 800e184:	601a      	str	r2, [r3, #0]
}
 800e186:	bf00      	nop
 800e188:	46bd      	mov	sp, r7
 800e18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18e:	4770      	bx	lr
 800e190:	24000bf4 	.word	0x24000bf4

0800e194 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e194:	b480      	push	{r7}
 800e196:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800e198:	4b03      	ldr	r3, [pc, #12]	@ (800e1a8 <BSP_SD_ReadCpltCallback+0x14>)
 800e19a:	2201      	movs	r2, #1
 800e19c:	601a      	str	r2, [r3, #0]
}
 800e19e:	bf00      	nop
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a6:	4770      	bx	lr
 800e1a8:	24000bf8 	.word	0x24000bf8

0800e1ac <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b084      	sub	sp, #16
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e1b6:	79fb      	ldrb	r3, [r7, #7]
 800e1b8:	4a08      	ldr	r2, [pc, #32]	@ (800e1dc <disk_status+0x30>)
 800e1ba:	009b      	lsls	r3, r3, #2
 800e1bc:	4413      	add	r3, r2
 800e1be:	685b      	ldr	r3, [r3, #4]
 800e1c0:	685b      	ldr	r3, [r3, #4]
 800e1c2:	79fa      	ldrb	r2, [r7, #7]
 800e1c4:	4905      	ldr	r1, [pc, #20]	@ (800e1dc <disk_status+0x30>)
 800e1c6:	440a      	add	r2, r1
 800e1c8:	7a12      	ldrb	r2, [r2, #8]
 800e1ca:	4610      	mov	r0, r2
 800e1cc:	4798      	blx	r3
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e1d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3710      	adds	r7, #16
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}
 800e1dc:	24000c24 	.word	0x24000c24

0800e1e0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b084      	sub	sp, #16
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e1ee:	79fb      	ldrb	r3, [r7, #7]
 800e1f0:	4a0e      	ldr	r2, [pc, #56]	@ (800e22c <disk_initialize+0x4c>)
 800e1f2:	5cd3      	ldrb	r3, [r2, r3]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d114      	bne.n	800e222 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e1f8:	79fb      	ldrb	r3, [r7, #7]
 800e1fa:	4a0c      	ldr	r2, [pc, #48]	@ (800e22c <disk_initialize+0x4c>)
 800e1fc:	009b      	lsls	r3, r3, #2
 800e1fe:	4413      	add	r3, r2
 800e200:	685b      	ldr	r3, [r3, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	79fa      	ldrb	r2, [r7, #7]
 800e206:	4909      	ldr	r1, [pc, #36]	@ (800e22c <disk_initialize+0x4c>)
 800e208:	440a      	add	r2, r1
 800e20a:	7a12      	ldrb	r2, [r2, #8]
 800e20c:	4610      	mov	r0, r2
 800e20e:	4798      	blx	r3
 800e210:	4603      	mov	r3, r0
 800e212:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800e214:	7bfb      	ldrb	r3, [r7, #15]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d103      	bne.n	800e222 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800e21a:	79fb      	ldrb	r3, [r7, #7]
 800e21c:	4a03      	ldr	r2, [pc, #12]	@ (800e22c <disk_initialize+0x4c>)
 800e21e:	2101      	movs	r1, #1
 800e220:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800e222:	7bfb      	ldrb	r3, [r7, #15]
}
 800e224:	4618      	mov	r0, r3
 800e226:	3710      	adds	r7, #16
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd80      	pop	{r7, pc}
 800e22c:	24000c24 	.word	0x24000c24

0800e230 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e230:	b590      	push	{r4, r7, lr}
 800e232:	b087      	sub	sp, #28
 800e234:	af00      	add	r7, sp, #0
 800e236:	60b9      	str	r1, [r7, #8]
 800e238:	607a      	str	r2, [r7, #4]
 800e23a:	603b      	str	r3, [r7, #0]
 800e23c:	4603      	mov	r3, r0
 800e23e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e240:	7bfb      	ldrb	r3, [r7, #15]
 800e242:	4a0a      	ldr	r2, [pc, #40]	@ (800e26c <disk_read+0x3c>)
 800e244:	009b      	lsls	r3, r3, #2
 800e246:	4413      	add	r3, r2
 800e248:	685b      	ldr	r3, [r3, #4]
 800e24a:	689c      	ldr	r4, [r3, #8]
 800e24c:	7bfb      	ldrb	r3, [r7, #15]
 800e24e:	4a07      	ldr	r2, [pc, #28]	@ (800e26c <disk_read+0x3c>)
 800e250:	4413      	add	r3, r2
 800e252:	7a18      	ldrb	r0, [r3, #8]
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	687a      	ldr	r2, [r7, #4]
 800e258:	68b9      	ldr	r1, [r7, #8]
 800e25a:	47a0      	blx	r4
 800e25c:	4603      	mov	r3, r0
 800e25e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e260:	7dfb      	ldrb	r3, [r7, #23]
}
 800e262:	4618      	mov	r0, r3
 800e264:	371c      	adds	r7, #28
 800e266:	46bd      	mov	sp, r7
 800e268:	bd90      	pop	{r4, r7, pc}
 800e26a:	bf00      	nop
 800e26c:	24000c24 	.word	0x24000c24

0800e270 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e270:	b590      	push	{r4, r7, lr}
 800e272:	b087      	sub	sp, #28
 800e274:	af00      	add	r7, sp, #0
 800e276:	60b9      	str	r1, [r7, #8]
 800e278:	607a      	str	r2, [r7, #4]
 800e27a:	603b      	str	r3, [r7, #0]
 800e27c:	4603      	mov	r3, r0
 800e27e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e280:	7bfb      	ldrb	r3, [r7, #15]
 800e282:	4a0a      	ldr	r2, [pc, #40]	@ (800e2ac <disk_write+0x3c>)
 800e284:	009b      	lsls	r3, r3, #2
 800e286:	4413      	add	r3, r2
 800e288:	685b      	ldr	r3, [r3, #4]
 800e28a:	68dc      	ldr	r4, [r3, #12]
 800e28c:	7bfb      	ldrb	r3, [r7, #15]
 800e28e:	4a07      	ldr	r2, [pc, #28]	@ (800e2ac <disk_write+0x3c>)
 800e290:	4413      	add	r3, r2
 800e292:	7a18      	ldrb	r0, [r3, #8]
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	687a      	ldr	r2, [r7, #4]
 800e298:	68b9      	ldr	r1, [r7, #8]
 800e29a:	47a0      	blx	r4
 800e29c:	4603      	mov	r3, r0
 800e29e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e2a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	371c      	adds	r7, #28
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd90      	pop	{r4, r7, pc}
 800e2aa:	bf00      	nop
 800e2ac:	24000c24 	.word	0x24000c24

0800e2b0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b084      	sub	sp, #16
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	603a      	str	r2, [r7, #0]
 800e2ba:	71fb      	strb	r3, [r7, #7]
 800e2bc:	460b      	mov	r3, r1
 800e2be:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e2c0:	79fb      	ldrb	r3, [r7, #7]
 800e2c2:	4a09      	ldr	r2, [pc, #36]	@ (800e2e8 <disk_ioctl+0x38>)
 800e2c4:	009b      	lsls	r3, r3, #2
 800e2c6:	4413      	add	r3, r2
 800e2c8:	685b      	ldr	r3, [r3, #4]
 800e2ca:	691b      	ldr	r3, [r3, #16]
 800e2cc:	79fa      	ldrb	r2, [r7, #7]
 800e2ce:	4906      	ldr	r1, [pc, #24]	@ (800e2e8 <disk_ioctl+0x38>)
 800e2d0:	440a      	add	r2, r1
 800e2d2:	7a10      	ldrb	r0, [r2, #8]
 800e2d4:	79b9      	ldrb	r1, [r7, #6]
 800e2d6:	683a      	ldr	r2, [r7, #0]
 800e2d8:	4798      	blx	r3
 800e2da:	4603      	mov	r3, r0
 800e2dc:	73fb      	strb	r3, [r7, #15]
  return res;
 800e2de:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3710      	adds	r7, #16
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}
 800e2e8:	24000c24 	.word	0x24000c24

0800e2ec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e2ec:	b480      	push	{r7}
 800e2ee:	b085      	sub	sp, #20
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	3301      	adds	r3, #1
 800e2f8:	781b      	ldrb	r3, [r3, #0]
 800e2fa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e2fc:	89fb      	ldrh	r3, [r7, #14]
 800e2fe:	021b      	lsls	r3, r3, #8
 800e300:	b21a      	sxth	r2, r3
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	781b      	ldrb	r3, [r3, #0]
 800e306:	b21b      	sxth	r3, r3
 800e308:	4313      	orrs	r3, r2
 800e30a:	b21b      	sxth	r3, r3
 800e30c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e30e:	89fb      	ldrh	r3, [r7, #14]
}
 800e310:	4618      	mov	r0, r3
 800e312:	3714      	adds	r7, #20
 800e314:	46bd      	mov	sp, r7
 800e316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31a:	4770      	bx	lr

0800e31c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e31c:	b480      	push	{r7}
 800e31e:	b085      	sub	sp, #20
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	3303      	adds	r3, #3
 800e328:	781b      	ldrb	r3, [r3, #0]
 800e32a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	021b      	lsls	r3, r3, #8
 800e330:	687a      	ldr	r2, [r7, #4]
 800e332:	3202      	adds	r2, #2
 800e334:	7812      	ldrb	r2, [r2, #0]
 800e336:	4313      	orrs	r3, r2
 800e338:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	021b      	lsls	r3, r3, #8
 800e33e:	687a      	ldr	r2, [r7, #4]
 800e340:	3201      	adds	r2, #1
 800e342:	7812      	ldrb	r2, [r2, #0]
 800e344:	4313      	orrs	r3, r2
 800e346:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	021b      	lsls	r3, r3, #8
 800e34c:	687a      	ldr	r2, [r7, #4]
 800e34e:	7812      	ldrb	r2, [r2, #0]
 800e350:	4313      	orrs	r3, r2
 800e352:	60fb      	str	r3, [r7, #12]
	return rv;
 800e354:	68fb      	ldr	r3, [r7, #12]
}
 800e356:	4618      	mov	r0, r3
 800e358:	3714      	adds	r7, #20
 800e35a:	46bd      	mov	sp, r7
 800e35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e360:	4770      	bx	lr

0800e362 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e362:	b480      	push	{r7}
 800e364:	b083      	sub	sp, #12
 800e366:	af00      	add	r7, sp, #0
 800e368:	6078      	str	r0, [r7, #4]
 800e36a:	460b      	mov	r3, r1
 800e36c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	1c5a      	adds	r2, r3, #1
 800e372:	607a      	str	r2, [r7, #4]
 800e374:	887a      	ldrh	r2, [r7, #2]
 800e376:	b2d2      	uxtb	r2, r2
 800e378:	701a      	strb	r2, [r3, #0]
 800e37a:	887b      	ldrh	r3, [r7, #2]
 800e37c:	0a1b      	lsrs	r3, r3, #8
 800e37e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	1c5a      	adds	r2, r3, #1
 800e384:	607a      	str	r2, [r7, #4]
 800e386:	887a      	ldrh	r2, [r7, #2]
 800e388:	b2d2      	uxtb	r2, r2
 800e38a:	701a      	strb	r2, [r3, #0]
}
 800e38c:	bf00      	nop
 800e38e:	370c      	adds	r7, #12
 800e390:	46bd      	mov	sp, r7
 800e392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e396:	4770      	bx	lr

0800e398 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e398:	b480      	push	{r7}
 800e39a:	b083      	sub	sp, #12
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
 800e3a0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	1c5a      	adds	r2, r3, #1
 800e3a6:	607a      	str	r2, [r7, #4]
 800e3a8:	683a      	ldr	r2, [r7, #0]
 800e3aa:	b2d2      	uxtb	r2, r2
 800e3ac:	701a      	strb	r2, [r3, #0]
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	0a1b      	lsrs	r3, r3, #8
 800e3b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	1c5a      	adds	r2, r3, #1
 800e3b8:	607a      	str	r2, [r7, #4]
 800e3ba:	683a      	ldr	r2, [r7, #0]
 800e3bc:	b2d2      	uxtb	r2, r2
 800e3be:	701a      	strb	r2, [r3, #0]
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	0a1b      	lsrs	r3, r3, #8
 800e3c4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	1c5a      	adds	r2, r3, #1
 800e3ca:	607a      	str	r2, [r7, #4]
 800e3cc:	683a      	ldr	r2, [r7, #0]
 800e3ce:	b2d2      	uxtb	r2, r2
 800e3d0:	701a      	strb	r2, [r3, #0]
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	0a1b      	lsrs	r3, r3, #8
 800e3d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	1c5a      	adds	r2, r3, #1
 800e3dc:	607a      	str	r2, [r7, #4]
 800e3de:	683a      	ldr	r2, [r7, #0]
 800e3e0:	b2d2      	uxtb	r2, r2
 800e3e2:	701a      	strb	r2, [r3, #0]
}
 800e3e4:	bf00      	nop
 800e3e6:	370c      	adds	r7, #12
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ee:	4770      	bx	lr

0800e3f0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e3f0:	b480      	push	{r7}
 800e3f2:	b087      	sub	sp, #28
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	60f8      	str	r0, [r7, #12]
 800e3f8:	60b9      	str	r1, [r7, #8]
 800e3fa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e400:	68bb      	ldr	r3, [r7, #8]
 800e402:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d00d      	beq.n	800e426 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e40a:	693a      	ldr	r2, [r7, #16]
 800e40c:	1c53      	adds	r3, r2, #1
 800e40e:	613b      	str	r3, [r7, #16]
 800e410:	697b      	ldr	r3, [r7, #20]
 800e412:	1c59      	adds	r1, r3, #1
 800e414:	6179      	str	r1, [r7, #20]
 800e416:	7812      	ldrb	r2, [r2, #0]
 800e418:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	3b01      	subs	r3, #1
 800e41e:	607b      	str	r3, [r7, #4]
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d1f1      	bne.n	800e40a <mem_cpy+0x1a>
	}
}
 800e426:	bf00      	nop
 800e428:	371c      	adds	r7, #28
 800e42a:	46bd      	mov	sp, r7
 800e42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e430:	4770      	bx	lr

0800e432 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e432:	b480      	push	{r7}
 800e434:	b087      	sub	sp, #28
 800e436:	af00      	add	r7, sp, #0
 800e438:	60f8      	str	r0, [r7, #12]
 800e43a:	60b9      	str	r1, [r7, #8]
 800e43c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e442:	697b      	ldr	r3, [r7, #20]
 800e444:	1c5a      	adds	r2, r3, #1
 800e446:	617a      	str	r2, [r7, #20]
 800e448:	68ba      	ldr	r2, [r7, #8]
 800e44a:	b2d2      	uxtb	r2, r2
 800e44c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	3b01      	subs	r3, #1
 800e452:	607b      	str	r3, [r7, #4]
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d1f3      	bne.n	800e442 <mem_set+0x10>
}
 800e45a:	bf00      	nop
 800e45c:	bf00      	nop
 800e45e:	371c      	adds	r7, #28
 800e460:	46bd      	mov	sp, r7
 800e462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e466:	4770      	bx	lr

0800e468 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e468:	b480      	push	{r7}
 800e46a:	b089      	sub	sp, #36	@ 0x24
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	60f8      	str	r0, [r7, #12]
 800e470:	60b9      	str	r1, [r7, #8]
 800e472:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	61fb      	str	r3, [r7, #28]
 800e478:	68bb      	ldr	r3, [r7, #8]
 800e47a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e47c:	2300      	movs	r3, #0
 800e47e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e480:	69fb      	ldr	r3, [r7, #28]
 800e482:	1c5a      	adds	r2, r3, #1
 800e484:	61fa      	str	r2, [r7, #28]
 800e486:	781b      	ldrb	r3, [r3, #0]
 800e488:	4619      	mov	r1, r3
 800e48a:	69bb      	ldr	r3, [r7, #24]
 800e48c:	1c5a      	adds	r2, r3, #1
 800e48e:	61ba      	str	r2, [r7, #24]
 800e490:	781b      	ldrb	r3, [r3, #0]
 800e492:	1acb      	subs	r3, r1, r3
 800e494:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	3b01      	subs	r3, #1
 800e49a:	607b      	str	r3, [r7, #4]
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d002      	beq.n	800e4a8 <mem_cmp+0x40>
 800e4a2:	697b      	ldr	r3, [r7, #20]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d0eb      	beq.n	800e480 <mem_cmp+0x18>

	return r;
 800e4a8:	697b      	ldr	r3, [r7, #20]
}
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	3724      	adds	r7, #36	@ 0x24
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b4:	4770      	bx	lr

0800e4b6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e4b6:	b480      	push	{r7}
 800e4b8:	b083      	sub	sp, #12
 800e4ba:	af00      	add	r7, sp, #0
 800e4bc:	6078      	str	r0, [r7, #4]
 800e4be:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e4c0:	e002      	b.n	800e4c8 <chk_chr+0x12>
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	3301      	adds	r3, #1
 800e4c6:	607b      	str	r3, [r7, #4]
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	781b      	ldrb	r3, [r3, #0]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d005      	beq.n	800e4dc <chk_chr+0x26>
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	781b      	ldrb	r3, [r3, #0]
 800e4d4:	461a      	mov	r2, r3
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	4293      	cmp	r3, r2
 800e4da:	d1f2      	bne.n	800e4c2 <chk_chr+0xc>
	return *str;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	781b      	ldrb	r3, [r3, #0]
}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	370c      	adds	r7, #12
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ea:	4770      	bx	lr

0800e4ec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	b085      	sub	sp, #20
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
 800e4f4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	60bb      	str	r3, [r7, #8]
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	60fb      	str	r3, [r7, #12]
 800e4fe:	e029      	b.n	800e554 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e500:	4a27      	ldr	r2, [pc, #156]	@ (800e5a0 <chk_lock+0xb4>)
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	011b      	lsls	r3, r3, #4
 800e506:	4413      	add	r3, r2
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d01d      	beq.n	800e54a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e50e:	4a24      	ldr	r2, [pc, #144]	@ (800e5a0 <chk_lock+0xb4>)
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	011b      	lsls	r3, r3, #4
 800e514:	4413      	add	r3, r2
 800e516:	681a      	ldr	r2, [r3, #0]
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	429a      	cmp	r2, r3
 800e51e:	d116      	bne.n	800e54e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e520:	4a1f      	ldr	r2, [pc, #124]	@ (800e5a0 <chk_lock+0xb4>)
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	011b      	lsls	r3, r3, #4
 800e526:	4413      	add	r3, r2
 800e528:	3304      	adds	r3, #4
 800e52a:	681a      	ldr	r2, [r3, #0]
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e530:	429a      	cmp	r2, r3
 800e532:	d10c      	bne.n	800e54e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e534:	4a1a      	ldr	r2, [pc, #104]	@ (800e5a0 <chk_lock+0xb4>)
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	011b      	lsls	r3, r3, #4
 800e53a:	4413      	add	r3, r2
 800e53c:	3308      	adds	r3, #8
 800e53e:	681a      	ldr	r2, [r3, #0]
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e544:	429a      	cmp	r2, r3
 800e546:	d102      	bne.n	800e54e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e548:	e007      	b.n	800e55a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e54a:	2301      	movs	r3, #1
 800e54c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	3301      	adds	r3, #1
 800e552:	60fb      	str	r3, [r7, #12]
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	2b01      	cmp	r3, #1
 800e558:	d9d2      	bls.n	800e500 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	2b02      	cmp	r3, #2
 800e55e:	d109      	bne.n	800e574 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e560:	68bb      	ldr	r3, [r7, #8]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d102      	bne.n	800e56c <chk_lock+0x80>
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	2b02      	cmp	r3, #2
 800e56a:	d101      	bne.n	800e570 <chk_lock+0x84>
 800e56c:	2300      	movs	r3, #0
 800e56e:	e010      	b.n	800e592 <chk_lock+0xa6>
 800e570:	2312      	movs	r3, #18
 800e572:	e00e      	b.n	800e592 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d108      	bne.n	800e58c <chk_lock+0xa0>
 800e57a:	4a09      	ldr	r2, [pc, #36]	@ (800e5a0 <chk_lock+0xb4>)
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	011b      	lsls	r3, r3, #4
 800e580:	4413      	add	r3, r2
 800e582:	330c      	adds	r3, #12
 800e584:	881b      	ldrh	r3, [r3, #0]
 800e586:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e58a:	d101      	bne.n	800e590 <chk_lock+0xa4>
 800e58c:	2310      	movs	r3, #16
 800e58e:	e000      	b.n	800e592 <chk_lock+0xa6>
 800e590:	2300      	movs	r3, #0
}
 800e592:	4618      	mov	r0, r3
 800e594:	3714      	adds	r7, #20
 800e596:	46bd      	mov	sp, r7
 800e598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59c:	4770      	bx	lr
 800e59e:	bf00      	nop
 800e5a0:	24000c04 	.word	0x24000c04

0800e5a4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e5a4:	b480      	push	{r7}
 800e5a6:	b083      	sub	sp, #12
 800e5a8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	607b      	str	r3, [r7, #4]
 800e5ae:	e002      	b.n	800e5b6 <enq_lock+0x12>
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	3301      	adds	r3, #1
 800e5b4:	607b      	str	r3, [r7, #4]
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	2b01      	cmp	r3, #1
 800e5ba:	d806      	bhi.n	800e5ca <enq_lock+0x26>
 800e5bc:	4a09      	ldr	r2, [pc, #36]	@ (800e5e4 <enq_lock+0x40>)
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	011b      	lsls	r3, r3, #4
 800e5c2:	4413      	add	r3, r2
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d1f2      	bne.n	800e5b0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	2b02      	cmp	r3, #2
 800e5ce:	bf14      	ite	ne
 800e5d0:	2301      	movne	r3, #1
 800e5d2:	2300      	moveq	r3, #0
 800e5d4:	b2db      	uxtb	r3, r3
}
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	370c      	adds	r7, #12
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e0:	4770      	bx	lr
 800e5e2:	bf00      	nop
 800e5e4:	24000c04 	.word	0x24000c04

0800e5e8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e5e8:	b480      	push	{r7}
 800e5ea:	b085      	sub	sp, #20
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
 800e5f0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	60fb      	str	r3, [r7, #12]
 800e5f6:	e01f      	b.n	800e638 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e5f8:	4a41      	ldr	r2, [pc, #260]	@ (800e700 <inc_lock+0x118>)
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	011b      	lsls	r3, r3, #4
 800e5fe:	4413      	add	r3, r2
 800e600:	681a      	ldr	r2, [r3, #0]
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	429a      	cmp	r2, r3
 800e608:	d113      	bne.n	800e632 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e60a:	4a3d      	ldr	r2, [pc, #244]	@ (800e700 <inc_lock+0x118>)
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	011b      	lsls	r3, r3, #4
 800e610:	4413      	add	r3, r2
 800e612:	3304      	adds	r3, #4
 800e614:	681a      	ldr	r2, [r3, #0]
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e61a:	429a      	cmp	r2, r3
 800e61c:	d109      	bne.n	800e632 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e61e:	4a38      	ldr	r2, [pc, #224]	@ (800e700 <inc_lock+0x118>)
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	011b      	lsls	r3, r3, #4
 800e624:	4413      	add	r3, r2
 800e626:	3308      	adds	r3, #8
 800e628:	681a      	ldr	r2, [r3, #0]
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e62e:	429a      	cmp	r2, r3
 800e630:	d006      	beq.n	800e640 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	3301      	adds	r3, #1
 800e636:	60fb      	str	r3, [r7, #12]
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	2b01      	cmp	r3, #1
 800e63c:	d9dc      	bls.n	800e5f8 <inc_lock+0x10>
 800e63e:	e000      	b.n	800e642 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e640:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	2b02      	cmp	r3, #2
 800e646:	d132      	bne.n	800e6ae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e648:	2300      	movs	r3, #0
 800e64a:	60fb      	str	r3, [r7, #12]
 800e64c:	e002      	b.n	800e654 <inc_lock+0x6c>
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	3301      	adds	r3, #1
 800e652:	60fb      	str	r3, [r7, #12]
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	2b01      	cmp	r3, #1
 800e658:	d806      	bhi.n	800e668 <inc_lock+0x80>
 800e65a:	4a29      	ldr	r2, [pc, #164]	@ (800e700 <inc_lock+0x118>)
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	011b      	lsls	r3, r3, #4
 800e660:	4413      	add	r3, r2
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d1f2      	bne.n	800e64e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	2b02      	cmp	r3, #2
 800e66c:	d101      	bne.n	800e672 <inc_lock+0x8a>
 800e66e:	2300      	movs	r3, #0
 800e670:	e040      	b.n	800e6f4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681a      	ldr	r2, [r3, #0]
 800e676:	4922      	ldr	r1, [pc, #136]	@ (800e700 <inc_lock+0x118>)
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	011b      	lsls	r3, r3, #4
 800e67c:	440b      	add	r3, r1
 800e67e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	689a      	ldr	r2, [r3, #8]
 800e684:	491e      	ldr	r1, [pc, #120]	@ (800e700 <inc_lock+0x118>)
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	011b      	lsls	r3, r3, #4
 800e68a:	440b      	add	r3, r1
 800e68c:	3304      	adds	r3, #4
 800e68e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	695a      	ldr	r2, [r3, #20]
 800e694:	491a      	ldr	r1, [pc, #104]	@ (800e700 <inc_lock+0x118>)
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	011b      	lsls	r3, r3, #4
 800e69a:	440b      	add	r3, r1
 800e69c:	3308      	adds	r3, #8
 800e69e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e6a0:	4a17      	ldr	r2, [pc, #92]	@ (800e700 <inc_lock+0x118>)
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	011b      	lsls	r3, r3, #4
 800e6a6:	4413      	add	r3, r2
 800e6a8:	330c      	adds	r3, #12
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d009      	beq.n	800e6c8 <inc_lock+0xe0>
 800e6b4:	4a12      	ldr	r2, [pc, #72]	@ (800e700 <inc_lock+0x118>)
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	011b      	lsls	r3, r3, #4
 800e6ba:	4413      	add	r3, r2
 800e6bc:	330c      	adds	r3, #12
 800e6be:	881b      	ldrh	r3, [r3, #0]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d001      	beq.n	800e6c8 <inc_lock+0xe0>
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	e015      	b.n	800e6f4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d108      	bne.n	800e6e0 <inc_lock+0xf8>
 800e6ce:	4a0c      	ldr	r2, [pc, #48]	@ (800e700 <inc_lock+0x118>)
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	011b      	lsls	r3, r3, #4
 800e6d4:	4413      	add	r3, r2
 800e6d6:	330c      	adds	r3, #12
 800e6d8:	881b      	ldrh	r3, [r3, #0]
 800e6da:	3301      	adds	r3, #1
 800e6dc:	b29a      	uxth	r2, r3
 800e6de:	e001      	b.n	800e6e4 <inc_lock+0xfc>
 800e6e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e6e4:	4906      	ldr	r1, [pc, #24]	@ (800e700 <inc_lock+0x118>)
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	011b      	lsls	r3, r3, #4
 800e6ea:	440b      	add	r3, r1
 800e6ec:	330c      	adds	r3, #12
 800e6ee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	3301      	adds	r3, #1
}
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	3714      	adds	r7, #20
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fe:	4770      	bx	lr
 800e700:	24000c04 	.word	0x24000c04

0800e704 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e704:	b480      	push	{r7}
 800e706:	b085      	sub	sp, #20
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	3b01      	subs	r3, #1
 800e710:	607b      	str	r3, [r7, #4]
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	2b01      	cmp	r3, #1
 800e716:	d825      	bhi.n	800e764 <dec_lock+0x60>
		n = Files[i].ctr;
 800e718:	4a17      	ldr	r2, [pc, #92]	@ (800e778 <dec_lock+0x74>)
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	011b      	lsls	r3, r3, #4
 800e71e:	4413      	add	r3, r2
 800e720:	330c      	adds	r3, #12
 800e722:	881b      	ldrh	r3, [r3, #0]
 800e724:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e726:	89fb      	ldrh	r3, [r7, #14]
 800e728:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e72c:	d101      	bne.n	800e732 <dec_lock+0x2e>
 800e72e:	2300      	movs	r3, #0
 800e730:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e732:	89fb      	ldrh	r3, [r7, #14]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d002      	beq.n	800e73e <dec_lock+0x3a>
 800e738:	89fb      	ldrh	r3, [r7, #14]
 800e73a:	3b01      	subs	r3, #1
 800e73c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e73e:	4a0e      	ldr	r2, [pc, #56]	@ (800e778 <dec_lock+0x74>)
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	011b      	lsls	r3, r3, #4
 800e744:	4413      	add	r3, r2
 800e746:	330c      	adds	r3, #12
 800e748:	89fa      	ldrh	r2, [r7, #14]
 800e74a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e74c:	89fb      	ldrh	r3, [r7, #14]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d105      	bne.n	800e75e <dec_lock+0x5a>
 800e752:	4a09      	ldr	r2, [pc, #36]	@ (800e778 <dec_lock+0x74>)
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	011b      	lsls	r3, r3, #4
 800e758:	4413      	add	r3, r2
 800e75a:	2200      	movs	r2, #0
 800e75c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e75e:	2300      	movs	r3, #0
 800e760:	737b      	strb	r3, [r7, #13]
 800e762:	e001      	b.n	800e768 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e764:	2302      	movs	r3, #2
 800e766:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e768:	7b7b      	ldrb	r3, [r7, #13]
}
 800e76a:	4618      	mov	r0, r3
 800e76c:	3714      	adds	r7, #20
 800e76e:	46bd      	mov	sp, r7
 800e770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e774:	4770      	bx	lr
 800e776:	bf00      	nop
 800e778:	24000c04 	.word	0x24000c04

0800e77c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e77c:	b480      	push	{r7}
 800e77e:	b085      	sub	sp, #20
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e784:	2300      	movs	r3, #0
 800e786:	60fb      	str	r3, [r7, #12]
 800e788:	e010      	b.n	800e7ac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e78a:	4a0d      	ldr	r2, [pc, #52]	@ (800e7c0 <clear_lock+0x44>)
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	011b      	lsls	r3, r3, #4
 800e790:	4413      	add	r3, r2
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	687a      	ldr	r2, [r7, #4]
 800e796:	429a      	cmp	r2, r3
 800e798:	d105      	bne.n	800e7a6 <clear_lock+0x2a>
 800e79a:	4a09      	ldr	r2, [pc, #36]	@ (800e7c0 <clear_lock+0x44>)
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	011b      	lsls	r3, r3, #4
 800e7a0:	4413      	add	r3, r2
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	3301      	adds	r3, #1
 800e7aa:	60fb      	str	r3, [r7, #12]
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	2b01      	cmp	r3, #1
 800e7b0:	d9eb      	bls.n	800e78a <clear_lock+0xe>
	}
}
 800e7b2:	bf00      	nop
 800e7b4:	bf00      	nop
 800e7b6:	3714      	adds	r7, #20
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7be:	4770      	bx	lr
 800e7c0:	24000c04 	.word	0x24000c04

0800e7c4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b086      	sub	sp, #24
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	78db      	ldrb	r3, [r3, #3]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d034      	beq.n	800e842 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7dc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	7858      	ldrb	r0, [r3, #1]
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e7e8:	2301      	movs	r3, #1
 800e7ea:	697a      	ldr	r2, [r7, #20]
 800e7ec:	f7ff fd40 	bl	800e270 <disk_write>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d002      	beq.n	800e7fc <sync_window+0x38>
			res = FR_DISK_ERR;
 800e7f6:	2301      	movs	r3, #1
 800e7f8:	73fb      	strb	r3, [r7, #15]
 800e7fa:	e022      	b.n	800e842 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	2200      	movs	r2, #0
 800e800:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	6a1b      	ldr	r3, [r3, #32]
 800e806:	697a      	ldr	r2, [r7, #20]
 800e808:	1ad2      	subs	r2, r2, r3
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	699b      	ldr	r3, [r3, #24]
 800e80e:	429a      	cmp	r2, r3
 800e810:	d217      	bcs.n	800e842 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	789b      	ldrb	r3, [r3, #2]
 800e816:	613b      	str	r3, [r7, #16]
 800e818:	e010      	b.n	800e83c <sync_window+0x78>
					wsect += fs->fsize;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	699b      	ldr	r3, [r3, #24]
 800e81e:	697a      	ldr	r2, [r7, #20]
 800e820:	4413      	add	r3, r2
 800e822:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	7858      	ldrb	r0, [r3, #1]
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e82e:	2301      	movs	r3, #1
 800e830:	697a      	ldr	r2, [r7, #20]
 800e832:	f7ff fd1d 	bl	800e270 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e836:	693b      	ldr	r3, [r7, #16]
 800e838:	3b01      	subs	r3, #1
 800e83a:	613b      	str	r3, [r7, #16]
 800e83c:	693b      	ldr	r3, [r7, #16]
 800e83e:	2b01      	cmp	r3, #1
 800e840:	d8eb      	bhi.n	800e81a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e842:	7bfb      	ldrb	r3, [r7, #15]
}
 800e844:	4618      	mov	r0, r3
 800e846:	3718      	adds	r7, #24
 800e848:	46bd      	mov	sp, r7
 800e84a:	bd80      	pop	{r7, pc}

0800e84c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b084      	sub	sp, #16
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
 800e854:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e856:	2300      	movs	r3, #0
 800e858:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e85e:	683a      	ldr	r2, [r7, #0]
 800e860:	429a      	cmp	r2, r3
 800e862:	d01b      	beq.n	800e89c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e864:	6878      	ldr	r0, [r7, #4]
 800e866:	f7ff ffad 	bl	800e7c4 <sync_window>
 800e86a:	4603      	mov	r3, r0
 800e86c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e86e:	7bfb      	ldrb	r3, [r7, #15]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d113      	bne.n	800e89c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	7858      	ldrb	r0, [r3, #1]
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e87e:	2301      	movs	r3, #1
 800e880:	683a      	ldr	r2, [r7, #0]
 800e882:	f7ff fcd5 	bl	800e230 <disk_read>
 800e886:	4603      	mov	r3, r0
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d004      	beq.n	800e896 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e88c:	f04f 33ff 	mov.w	r3, #4294967295
 800e890:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e892:	2301      	movs	r3, #1
 800e894:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	683a      	ldr	r2, [r7, #0]
 800e89a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800e89c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e89e:	4618      	mov	r0, r3
 800e8a0:	3710      	adds	r7, #16
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd80      	pop	{r7, pc}
	...

0800e8a8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b084      	sub	sp, #16
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	f7ff ff87 	bl	800e7c4 <sync_window>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e8ba:	7bfb      	ldrb	r3, [r7, #15]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d158      	bne.n	800e972 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	781b      	ldrb	r3, [r3, #0]
 800e8c4:	2b03      	cmp	r3, #3
 800e8c6:	d148      	bne.n	800e95a <sync_fs+0xb2>
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	791b      	ldrb	r3, [r3, #4]
 800e8cc:	2b01      	cmp	r3, #1
 800e8ce:	d144      	bne.n	800e95a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	3330      	adds	r3, #48	@ 0x30
 800e8d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e8d8:	2100      	movs	r1, #0
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f7ff fda9 	bl	800e432 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	3330      	adds	r3, #48	@ 0x30
 800e8e4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e8e8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f7ff fd38 	bl	800e362 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	3330      	adds	r3, #48	@ 0x30
 800e8f6:	4921      	ldr	r1, [pc, #132]	@ (800e97c <sync_fs+0xd4>)
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f7ff fd4d 	bl	800e398 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	3330      	adds	r3, #48	@ 0x30
 800e902:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e906:	491e      	ldr	r1, [pc, #120]	@ (800e980 <sync_fs+0xd8>)
 800e908:	4618      	mov	r0, r3
 800e90a:	f7ff fd45 	bl	800e398 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	3330      	adds	r3, #48	@ 0x30
 800e912:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	691b      	ldr	r3, [r3, #16]
 800e91a:	4619      	mov	r1, r3
 800e91c:	4610      	mov	r0, r2
 800e91e:	f7ff fd3b 	bl	800e398 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	3330      	adds	r3, #48	@ 0x30
 800e926:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	68db      	ldr	r3, [r3, #12]
 800e92e:	4619      	mov	r1, r3
 800e930:	4610      	mov	r0, r2
 800e932:	f7ff fd31 	bl	800e398 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	69db      	ldr	r3, [r3, #28]
 800e93a:	1c5a      	adds	r2, r3, #1
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	7858      	ldrb	r0, [r3, #1]
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e94e:	2301      	movs	r3, #1
 800e950:	f7ff fc8e 	bl	800e270 <disk_write>
			fs->fsi_flag = 0;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2200      	movs	r2, #0
 800e958:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	785b      	ldrb	r3, [r3, #1]
 800e95e:	2200      	movs	r2, #0
 800e960:	2100      	movs	r1, #0
 800e962:	4618      	mov	r0, r3
 800e964:	f7ff fca4 	bl	800e2b0 <disk_ioctl>
 800e968:	4603      	mov	r3, r0
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d001      	beq.n	800e972 <sync_fs+0xca>
 800e96e:	2301      	movs	r3, #1
 800e970:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e972:	7bfb      	ldrb	r3, [r7, #15]
}
 800e974:	4618      	mov	r0, r3
 800e976:	3710      	adds	r7, #16
 800e978:	46bd      	mov	sp, r7
 800e97a:	bd80      	pop	{r7, pc}
 800e97c:	41615252 	.word	0x41615252
 800e980:	61417272 	.word	0x61417272

0800e984 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e984:	b480      	push	{r7}
 800e986:	b083      	sub	sp, #12
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
 800e98c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	3b02      	subs	r3, #2
 800e992:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	695b      	ldr	r3, [r3, #20]
 800e998:	3b02      	subs	r3, #2
 800e99a:	683a      	ldr	r2, [r7, #0]
 800e99c:	429a      	cmp	r2, r3
 800e99e:	d301      	bcc.n	800e9a4 <clust2sect+0x20>
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	e008      	b.n	800e9b6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	895b      	ldrh	r3, [r3, #10]
 800e9a8:	461a      	mov	r2, r3
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	fb03 f202 	mul.w	r2, r3, r2
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e9b4:	4413      	add	r3, r2
}
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	370c      	adds	r7, #12
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c0:	4770      	bx	lr

0800e9c2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e9c2:	b580      	push	{r7, lr}
 800e9c4:	b086      	sub	sp, #24
 800e9c6:	af00      	add	r7, sp, #0
 800e9c8:	6078      	str	r0, [r7, #4]
 800e9ca:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e9d2:	683b      	ldr	r3, [r7, #0]
 800e9d4:	2b01      	cmp	r3, #1
 800e9d6:	d904      	bls.n	800e9e2 <get_fat+0x20>
 800e9d8:	693b      	ldr	r3, [r7, #16]
 800e9da:	695b      	ldr	r3, [r3, #20]
 800e9dc:	683a      	ldr	r2, [r7, #0]
 800e9de:	429a      	cmp	r2, r3
 800e9e0:	d302      	bcc.n	800e9e8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	617b      	str	r3, [r7, #20]
 800e9e6:	e08e      	b.n	800eb06 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e9e8:	f04f 33ff 	mov.w	r3, #4294967295
 800e9ec:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e9ee:	693b      	ldr	r3, [r7, #16]
 800e9f0:	781b      	ldrb	r3, [r3, #0]
 800e9f2:	2b03      	cmp	r3, #3
 800e9f4:	d061      	beq.n	800eaba <get_fat+0xf8>
 800e9f6:	2b03      	cmp	r3, #3
 800e9f8:	dc7b      	bgt.n	800eaf2 <get_fat+0x130>
 800e9fa:	2b01      	cmp	r3, #1
 800e9fc:	d002      	beq.n	800ea04 <get_fat+0x42>
 800e9fe:	2b02      	cmp	r3, #2
 800ea00:	d041      	beq.n	800ea86 <get_fat+0xc4>
 800ea02:	e076      	b.n	800eaf2 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	60fb      	str	r3, [r7, #12]
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	085b      	lsrs	r3, r3, #1
 800ea0c:	68fa      	ldr	r2, [r7, #12]
 800ea0e:	4413      	add	r3, r2
 800ea10:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ea12:	693b      	ldr	r3, [r7, #16]
 800ea14:	6a1a      	ldr	r2, [r3, #32]
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	0a5b      	lsrs	r3, r3, #9
 800ea1a:	4413      	add	r3, r2
 800ea1c:	4619      	mov	r1, r3
 800ea1e:	6938      	ldr	r0, [r7, #16]
 800ea20:	f7ff ff14 	bl	800e84c <move_window>
 800ea24:	4603      	mov	r3, r0
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d166      	bne.n	800eaf8 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	1c5a      	adds	r2, r3, #1
 800ea2e:	60fa      	str	r2, [r7, #12]
 800ea30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea34:	693a      	ldr	r2, [r7, #16]
 800ea36:	4413      	add	r3, r2
 800ea38:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ea3c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ea3e:	693b      	ldr	r3, [r7, #16]
 800ea40:	6a1a      	ldr	r2, [r3, #32]
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	0a5b      	lsrs	r3, r3, #9
 800ea46:	4413      	add	r3, r2
 800ea48:	4619      	mov	r1, r3
 800ea4a:	6938      	ldr	r0, [r7, #16]
 800ea4c:	f7ff fefe 	bl	800e84c <move_window>
 800ea50:	4603      	mov	r3, r0
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d152      	bne.n	800eafc <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea5c:	693a      	ldr	r2, [r7, #16]
 800ea5e:	4413      	add	r3, r2
 800ea60:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ea64:	021b      	lsls	r3, r3, #8
 800ea66:	68ba      	ldr	r2, [r7, #8]
 800ea68:	4313      	orrs	r3, r2
 800ea6a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	f003 0301 	and.w	r3, r3, #1
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d002      	beq.n	800ea7c <get_fat+0xba>
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	091b      	lsrs	r3, r3, #4
 800ea7a:	e002      	b.n	800ea82 <get_fat+0xc0>
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ea82:	617b      	str	r3, [r7, #20]
			break;
 800ea84:	e03f      	b.n	800eb06 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ea86:	693b      	ldr	r3, [r7, #16]
 800ea88:	6a1a      	ldr	r2, [r3, #32]
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	0a1b      	lsrs	r3, r3, #8
 800ea8e:	4413      	add	r3, r2
 800ea90:	4619      	mov	r1, r3
 800ea92:	6938      	ldr	r0, [r7, #16]
 800ea94:	f7ff feda 	bl	800e84c <move_window>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d130      	bne.n	800eb00 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ea9e:	693b      	ldr	r3, [r7, #16]
 800eaa0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800eaa4:	683b      	ldr	r3, [r7, #0]
 800eaa6:	005b      	lsls	r3, r3, #1
 800eaa8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800eaac:	4413      	add	r3, r2
 800eaae:	4618      	mov	r0, r3
 800eab0:	f7ff fc1c 	bl	800e2ec <ld_word>
 800eab4:	4603      	mov	r3, r0
 800eab6:	617b      	str	r3, [r7, #20]
			break;
 800eab8:	e025      	b.n	800eb06 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800eaba:	693b      	ldr	r3, [r7, #16]
 800eabc:	6a1a      	ldr	r2, [r3, #32]
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	09db      	lsrs	r3, r3, #7
 800eac2:	4413      	add	r3, r2
 800eac4:	4619      	mov	r1, r3
 800eac6:	6938      	ldr	r0, [r7, #16]
 800eac8:	f7ff fec0 	bl	800e84c <move_window>
 800eacc:	4603      	mov	r3, r0
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d118      	bne.n	800eb04 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ead2:	693b      	ldr	r3, [r7, #16]
 800ead4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	009b      	lsls	r3, r3, #2
 800eadc:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800eae0:	4413      	add	r3, r2
 800eae2:	4618      	mov	r0, r3
 800eae4:	f7ff fc1a 	bl	800e31c <ld_dword>
 800eae8:	4603      	mov	r3, r0
 800eaea:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800eaee:	617b      	str	r3, [r7, #20]
			break;
 800eaf0:	e009      	b.n	800eb06 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	617b      	str	r3, [r7, #20]
 800eaf6:	e006      	b.n	800eb06 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eaf8:	bf00      	nop
 800eafa:	e004      	b.n	800eb06 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eafc:	bf00      	nop
 800eafe:	e002      	b.n	800eb06 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800eb00:	bf00      	nop
 800eb02:	e000      	b.n	800eb06 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800eb04:	bf00      	nop
		}
	}

	return val;
 800eb06:	697b      	ldr	r3, [r7, #20]
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3718      	adds	r7, #24
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}

0800eb10 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800eb10:	b590      	push	{r4, r7, lr}
 800eb12:	b089      	sub	sp, #36	@ 0x24
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	60f8      	str	r0, [r7, #12]
 800eb18:	60b9      	str	r1, [r7, #8]
 800eb1a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800eb1c:	2302      	movs	r3, #2
 800eb1e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800eb20:	68bb      	ldr	r3, [r7, #8]
 800eb22:	2b01      	cmp	r3, #1
 800eb24:	f240 80d9 	bls.w	800ecda <put_fat+0x1ca>
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	695b      	ldr	r3, [r3, #20]
 800eb2c:	68ba      	ldr	r2, [r7, #8]
 800eb2e:	429a      	cmp	r2, r3
 800eb30:	f080 80d3 	bcs.w	800ecda <put_fat+0x1ca>
		switch (fs->fs_type) {
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	781b      	ldrb	r3, [r3, #0]
 800eb38:	2b03      	cmp	r3, #3
 800eb3a:	f000 8096 	beq.w	800ec6a <put_fat+0x15a>
 800eb3e:	2b03      	cmp	r3, #3
 800eb40:	f300 80cb 	bgt.w	800ecda <put_fat+0x1ca>
 800eb44:	2b01      	cmp	r3, #1
 800eb46:	d002      	beq.n	800eb4e <put_fat+0x3e>
 800eb48:	2b02      	cmp	r3, #2
 800eb4a:	d06e      	beq.n	800ec2a <put_fat+0x11a>
 800eb4c:	e0c5      	b.n	800ecda <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800eb4e:	68bb      	ldr	r3, [r7, #8]
 800eb50:	61bb      	str	r3, [r7, #24]
 800eb52:	69bb      	ldr	r3, [r7, #24]
 800eb54:	085b      	lsrs	r3, r3, #1
 800eb56:	69ba      	ldr	r2, [r7, #24]
 800eb58:	4413      	add	r3, r2
 800eb5a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	6a1a      	ldr	r2, [r3, #32]
 800eb60:	69bb      	ldr	r3, [r7, #24]
 800eb62:	0a5b      	lsrs	r3, r3, #9
 800eb64:	4413      	add	r3, r2
 800eb66:	4619      	mov	r1, r3
 800eb68:	68f8      	ldr	r0, [r7, #12]
 800eb6a:	f7ff fe6f 	bl	800e84c <move_window>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eb72:	7ffb      	ldrb	r3, [r7, #31]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	f040 80a9 	bne.w	800eccc <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800eb80:	69bb      	ldr	r3, [r7, #24]
 800eb82:	1c59      	adds	r1, r3, #1
 800eb84:	61b9      	str	r1, [r7, #24]
 800eb86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb8a:	4413      	add	r3, r2
 800eb8c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800eb8e:	68bb      	ldr	r3, [r7, #8]
 800eb90:	f003 0301 	and.w	r3, r3, #1
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d00d      	beq.n	800ebb4 <put_fat+0xa4>
 800eb98:	697b      	ldr	r3, [r7, #20]
 800eb9a:	781b      	ldrb	r3, [r3, #0]
 800eb9c:	b25b      	sxtb	r3, r3
 800eb9e:	f003 030f 	and.w	r3, r3, #15
 800eba2:	b25a      	sxtb	r2, r3
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	b2db      	uxtb	r3, r3
 800eba8:	011b      	lsls	r3, r3, #4
 800ebaa:	b25b      	sxtb	r3, r3
 800ebac:	4313      	orrs	r3, r2
 800ebae:	b25b      	sxtb	r3, r3
 800ebb0:	b2db      	uxtb	r3, r3
 800ebb2:	e001      	b.n	800ebb8 <put_fat+0xa8>
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	b2db      	uxtb	r3, r3
 800ebb8:	697a      	ldr	r2, [r7, #20]
 800ebba:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	2201      	movs	r2, #1
 800ebc0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	6a1a      	ldr	r2, [r3, #32]
 800ebc6:	69bb      	ldr	r3, [r7, #24]
 800ebc8:	0a5b      	lsrs	r3, r3, #9
 800ebca:	4413      	add	r3, r2
 800ebcc:	4619      	mov	r1, r3
 800ebce:	68f8      	ldr	r0, [r7, #12]
 800ebd0:	f7ff fe3c 	bl	800e84c <move_window>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ebd8:	7ffb      	ldrb	r3, [r7, #31]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d178      	bne.n	800ecd0 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ebe4:	69bb      	ldr	r3, [r7, #24]
 800ebe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebea:	4413      	add	r3, r2
 800ebec:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ebee:	68bb      	ldr	r3, [r7, #8]
 800ebf0:	f003 0301 	and.w	r3, r3, #1
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d003      	beq.n	800ec00 <put_fat+0xf0>
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	091b      	lsrs	r3, r3, #4
 800ebfc:	b2db      	uxtb	r3, r3
 800ebfe:	e00e      	b.n	800ec1e <put_fat+0x10e>
 800ec00:	697b      	ldr	r3, [r7, #20]
 800ec02:	781b      	ldrb	r3, [r3, #0]
 800ec04:	b25b      	sxtb	r3, r3
 800ec06:	f023 030f 	bic.w	r3, r3, #15
 800ec0a:	b25a      	sxtb	r2, r3
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	0a1b      	lsrs	r3, r3, #8
 800ec10:	b25b      	sxtb	r3, r3
 800ec12:	f003 030f 	and.w	r3, r3, #15
 800ec16:	b25b      	sxtb	r3, r3
 800ec18:	4313      	orrs	r3, r2
 800ec1a:	b25b      	sxtb	r3, r3
 800ec1c:	b2db      	uxtb	r3, r3
 800ec1e:	697a      	ldr	r2, [r7, #20]
 800ec20:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	2201      	movs	r2, #1
 800ec26:	70da      	strb	r2, [r3, #3]
			break;
 800ec28:	e057      	b.n	800ecda <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	6a1a      	ldr	r2, [r3, #32]
 800ec2e:	68bb      	ldr	r3, [r7, #8]
 800ec30:	0a1b      	lsrs	r3, r3, #8
 800ec32:	4413      	add	r3, r2
 800ec34:	4619      	mov	r1, r3
 800ec36:	68f8      	ldr	r0, [r7, #12]
 800ec38:	f7ff fe08 	bl	800e84c <move_window>
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ec40:	7ffb      	ldrb	r3, [r7, #31]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d146      	bne.n	800ecd4 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ec4c:	68bb      	ldr	r3, [r7, #8]
 800ec4e:	005b      	lsls	r3, r3, #1
 800ec50:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ec54:	4413      	add	r3, r2
 800ec56:	687a      	ldr	r2, [r7, #4]
 800ec58:	b292      	uxth	r2, r2
 800ec5a:	4611      	mov	r1, r2
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f7ff fb80 	bl	800e362 <st_word>
			fs->wflag = 1;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	2201      	movs	r2, #1
 800ec66:	70da      	strb	r2, [r3, #3]
			break;
 800ec68:	e037      	b.n	800ecda <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	6a1a      	ldr	r2, [r3, #32]
 800ec6e:	68bb      	ldr	r3, [r7, #8]
 800ec70:	09db      	lsrs	r3, r3, #7
 800ec72:	4413      	add	r3, r2
 800ec74:	4619      	mov	r1, r3
 800ec76:	68f8      	ldr	r0, [r7, #12]
 800ec78:	f7ff fde8 	bl	800e84c <move_window>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ec80:	7ffb      	ldrb	r3, [r7, #31]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d128      	bne.n	800ecd8 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ec92:	68bb      	ldr	r3, [r7, #8]
 800ec94:	009b      	lsls	r3, r3, #2
 800ec96:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ec9a:	4413      	add	r3, r2
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	f7ff fb3d 	bl	800e31c <ld_dword>
 800eca2:	4603      	mov	r3, r0
 800eca4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800eca8:	4323      	orrs	r3, r4
 800ecaa:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	009b      	lsls	r3, r3, #2
 800ecb6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ecba:	4413      	add	r3, r2
 800ecbc:	6879      	ldr	r1, [r7, #4]
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f7ff fb6a 	bl	800e398 <st_dword>
			fs->wflag = 1;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	2201      	movs	r2, #1
 800ecc8:	70da      	strb	r2, [r3, #3]
			break;
 800ecca:	e006      	b.n	800ecda <put_fat+0x1ca>
			if (res != FR_OK) break;
 800eccc:	bf00      	nop
 800ecce:	e004      	b.n	800ecda <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ecd0:	bf00      	nop
 800ecd2:	e002      	b.n	800ecda <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ecd4:	bf00      	nop
 800ecd6:	e000      	b.n	800ecda <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ecd8:	bf00      	nop
		}
	}
	return res;
 800ecda:	7ffb      	ldrb	r3, [r7, #31]
}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3724      	adds	r7, #36	@ 0x24
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd90      	pop	{r4, r7, pc}

0800ece4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b088      	sub	sp, #32
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	60f8      	str	r0, [r7, #12]
 800ecec:	60b9      	str	r1, [r7, #8]
 800ecee:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ecfa:	68bb      	ldr	r3, [r7, #8]
 800ecfc:	2b01      	cmp	r3, #1
 800ecfe:	d904      	bls.n	800ed0a <remove_chain+0x26>
 800ed00:	69bb      	ldr	r3, [r7, #24]
 800ed02:	695b      	ldr	r3, [r3, #20]
 800ed04:	68ba      	ldr	r2, [r7, #8]
 800ed06:	429a      	cmp	r2, r3
 800ed08:	d301      	bcc.n	800ed0e <remove_chain+0x2a>
 800ed0a:	2302      	movs	r3, #2
 800ed0c:	e04b      	b.n	800eda6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d00c      	beq.n	800ed2e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ed14:	f04f 32ff 	mov.w	r2, #4294967295
 800ed18:	6879      	ldr	r1, [r7, #4]
 800ed1a:	69b8      	ldr	r0, [r7, #24]
 800ed1c:	f7ff fef8 	bl	800eb10 <put_fat>
 800ed20:	4603      	mov	r3, r0
 800ed22:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ed24:	7ffb      	ldrb	r3, [r7, #31]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d001      	beq.n	800ed2e <remove_chain+0x4a>
 800ed2a:	7ffb      	ldrb	r3, [r7, #31]
 800ed2c:	e03b      	b.n	800eda6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ed2e:	68b9      	ldr	r1, [r7, #8]
 800ed30:	68f8      	ldr	r0, [r7, #12]
 800ed32:	f7ff fe46 	bl	800e9c2 <get_fat>
 800ed36:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ed38:	697b      	ldr	r3, [r7, #20]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d031      	beq.n	800eda2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ed3e:	697b      	ldr	r3, [r7, #20]
 800ed40:	2b01      	cmp	r3, #1
 800ed42:	d101      	bne.n	800ed48 <remove_chain+0x64>
 800ed44:	2302      	movs	r3, #2
 800ed46:	e02e      	b.n	800eda6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ed48:	697b      	ldr	r3, [r7, #20]
 800ed4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed4e:	d101      	bne.n	800ed54 <remove_chain+0x70>
 800ed50:	2301      	movs	r3, #1
 800ed52:	e028      	b.n	800eda6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ed54:	2200      	movs	r2, #0
 800ed56:	68b9      	ldr	r1, [r7, #8]
 800ed58:	69b8      	ldr	r0, [r7, #24]
 800ed5a:	f7ff fed9 	bl	800eb10 <put_fat>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ed62:	7ffb      	ldrb	r3, [r7, #31]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d001      	beq.n	800ed6c <remove_chain+0x88>
 800ed68:	7ffb      	ldrb	r3, [r7, #31]
 800ed6a:	e01c      	b.n	800eda6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ed6c:	69bb      	ldr	r3, [r7, #24]
 800ed6e:	691a      	ldr	r2, [r3, #16]
 800ed70:	69bb      	ldr	r3, [r7, #24]
 800ed72:	695b      	ldr	r3, [r3, #20]
 800ed74:	3b02      	subs	r3, #2
 800ed76:	429a      	cmp	r2, r3
 800ed78:	d20b      	bcs.n	800ed92 <remove_chain+0xae>
			fs->free_clst++;
 800ed7a:	69bb      	ldr	r3, [r7, #24]
 800ed7c:	691b      	ldr	r3, [r3, #16]
 800ed7e:	1c5a      	adds	r2, r3, #1
 800ed80:	69bb      	ldr	r3, [r7, #24]
 800ed82:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800ed84:	69bb      	ldr	r3, [r7, #24]
 800ed86:	791b      	ldrb	r3, [r3, #4]
 800ed88:	f043 0301 	orr.w	r3, r3, #1
 800ed8c:	b2da      	uxtb	r2, r3
 800ed8e:	69bb      	ldr	r3, [r7, #24]
 800ed90:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ed96:	69bb      	ldr	r3, [r7, #24]
 800ed98:	695b      	ldr	r3, [r3, #20]
 800ed9a:	68ba      	ldr	r2, [r7, #8]
 800ed9c:	429a      	cmp	r2, r3
 800ed9e:	d3c6      	bcc.n	800ed2e <remove_chain+0x4a>
 800eda0:	e000      	b.n	800eda4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800eda2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800eda4:	2300      	movs	r3, #0
}
 800eda6:	4618      	mov	r0, r3
 800eda8:	3720      	adds	r7, #32
 800edaa:	46bd      	mov	sp, r7
 800edac:	bd80      	pop	{r7, pc}

0800edae <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800edae:	b580      	push	{r7, lr}
 800edb0:	b088      	sub	sp, #32
 800edb2:	af00      	add	r7, sp, #0
 800edb4:	6078      	str	r0, [r7, #4]
 800edb6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800edbe:	683b      	ldr	r3, [r7, #0]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d10d      	bne.n	800ede0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800edc4:	693b      	ldr	r3, [r7, #16]
 800edc6:	68db      	ldr	r3, [r3, #12]
 800edc8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800edca:	69bb      	ldr	r3, [r7, #24]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d004      	beq.n	800edda <create_chain+0x2c>
 800edd0:	693b      	ldr	r3, [r7, #16]
 800edd2:	695b      	ldr	r3, [r3, #20]
 800edd4:	69ba      	ldr	r2, [r7, #24]
 800edd6:	429a      	cmp	r2, r3
 800edd8:	d31b      	bcc.n	800ee12 <create_chain+0x64>
 800edda:	2301      	movs	r3, #1
 800eddc:	61bb      	str	r3, [r7, #24]
 800edde:	e018      	b.n	800ee12 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ede0:	6839      	ldr	r1, [r7, #0]
 800ede2:	6878      	ldr	r0, [r7, #4]
 800ede4:	f7ff fded 	bl	800e9c2 <get_fat>
 800ede8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	2b01      	cmp	r3, #1
 800edee:	d801      	bhi.n	800edf4 <create_chain+0x46>
 800edf0:	2301      	movs	r3, #1
 800edf2:	e070      	b.n	800eed6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edfa:	d101      	bne.n	800ee00 <create_chain+0x52>
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	e06a      	b.n	800eed6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ee00:	693b      	ldr	r3, [r7, #16]
 800ee02:	695b      	ldr	r3, [r3, #20]
 800ee04:	68fa      	ldr	r2, [r7, #12]
 800ee06:	429a      	cmp	r2, r3
 800ee08:	d201      	bcs.n	800ee0e <create_chain+0x60>
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	e063      	b.n	800eed6 <create_chain+0x128>
		scl = clst;
 800ee0e:	683b      	ldr	r3, [r7, #0]
 800ee10:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ee12:	69bb      	ldr	r3, [r7, #24]
 800ee14:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ee16:	69fb      	ldr	r3, [r7, #28]
 800ee18:	3301      	adds	r3, #1
 800ee1a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ee1c:	693b      	ldr	r3, [r7, #16]
 800ee1e:	695b      	ldr	r3, [r3, #20]
 800ee20:	69fa      	ldr	r2, [r7, #28]
 800ee22:	429a      	cmp	r2, r3
 800ee24:	d307      	bcc.n	800ee36 <create_chain+0x88>
				ncl = 2;
 800ee26:	2302      	movs	r3, #2
 800ee28:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ee2a:	69fa      	ldr	r2, [r7, #28]
 800ee2c:	69bb      	ldr	r3, [r7, #24]
 800ee2e:	429a      	cmp	r2, r3
 800ee30:	d901      	bls.n	800ee36 <create_chain+0x88>
 800ee32:	2300      	movs	r3, #0
 800ee34:	e04f      	b.n	800eed6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ee36:	69f9      	ldr	r1, [r7, #28]
 800ee38:	6878      	ldr	r0, [r7, #4]
 800ee3a:	f7ff fdc2 	bl	800e9c2 <get_fat>
 800ee3e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d00e      	beq.n	800ee64 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	2b01      	cmp	r3, #1
 800ee4a:	d003      	beq.n	800ee54 <create_chain+0xa6>
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee52:	d101      	bne.n	800ee58 <create_chain+0xaa>
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	e03e      	b.n	800eed6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ee58:	69fa      	ldr	r2, [r7, #28]
 800ee5a:	69bb      	ldr	r3, [r7, #24]
 800ee5c:	429a      	cmp	r2, r3
 800ee5e:	d1da      	bne.n	800ee16 <create_chain+0x68>
 800ee60:	2300      	movs	r3, #0
 800ee62:	e038      	b.n	800eed6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ee64:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ee66:	f04f 32ff 	mov.w	r2, #4294967295
 800ee6a:	69f9      	ldr	r1, [r7, #28]
 800ee6c:	6938      	ldr	r0, [r7, #16]
 800ee6e:	f7ff fe4f 	bl	800eb10 <put_fat>
 800ee72:	4603      	mov	r3, r0
 800ee74:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ee76:	7dfb      	ldrb	r3, [r7, #23]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d109      	bne.n	800ee90 <create_chain+0xe2>
 800ee7c:	683b      	ldr	r3, [r7, #0]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d006      	beq.n	800ee90 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ee82:	69fa      	ldr	r2, [r7, #28]
 800ee84:	6839      	ldr	r1, [r7, #0]
 800ee86:	6938      	ldr	r0, [r7, #16]
 800ee88:	f7ff fe42 	bl	800eb10 <put_fat>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ee90:	7dfb      	ldrb	r3, [r7, #23]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d116      	bne.n	800eec4 <create_chain+0x116>
		fs->last_clst = ncl;
 800ee96:	693b      	ldr	r3, [r7, #16]
 800ee98:	69fa      	ldr	r2, [r7, #28]
 800ee9a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ee9c:	693b      	ldr	r3, [r7, #16]
 800ee9e:	691a      	ldr	r2, [r3, #16]
 800eea0:	693b      	ldr	r3, [r7, #16]
 800eea2:	695b      	ldr	r3, [r3, #20]
 800eea4:	3b02      	subs	r3, #2
 800eea6:	429a      	cmp	r2, r3
 800eea8:	d804      	bhi.n	800eeb4 <create_chain+0x106>
 800eeaa:	693b      	ldr	r3, [r7, #16]
 800eeac:	691b      	ldr	r3, [r3, #16]
 800eeae:	1e5a      	subs	r2, r3, #1
 800eeb0:	693b      	ldr	r3, [r7, #16]
 800eeb2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800eeb4:	693b      	ldr	r3, [r7, #16]
 800eeb6:	791b      	ldrb	r3, [r3, #4]
 800eeb8:	f043 0301 	orr.w	r3, r3, #1
 800eebc:	b2da      	uxtb	r2, r3
 800eebe:	693b      	ldr	r3, [r7, #16]
 800eec0:	711a      	strb	r2, [r3, #4]
 800eec2:	e007      	b.n	800eed4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800eec4:	7dfb      	ldrb	r3, [r7, #23]
 800eec6:	2b01      	cmp	r3, #1
 800eec8:	d102      	bne.n	800eed0 <create_chain+0x122>
 800eeca:	f04f 33ff 	mov.w	r3, #4294967295
 800eece:	e000      	b.n	800eed2 <create_chain+0x124>
 800eed0:	2301      	movs	r3, #1
 800eed2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800eed4:	69fb      	ldr	r3, [r7, #28]
}
 800eed6:	4618      	mov	r0, r3
 800eed8:	3720      	adds	r7, #32
 800eeda:	46bd      	mov	sp, r7
 800eedc:	bd80      	pop	{r7, pc}

0800eede <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800eede:	b480      	push	{r7}
 800eee0:	b087      	sub	sp, #28
 800eee2:	af00      	add	r7, sp, #0
 800eee4:	6078      	str	r0, [r7, #4]
 800eee6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eef2:	3304      	adds	r3, #4
 800eef4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	0a5b      	lsrs	r3, r3, #9
 800eefa:	68fa      	ldr	r2, [r7, #12]
 800eefc:	8952      	ldrh	r2, [r2, #10]
 800eefe:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef02:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ef04:	693b      	ldr	r3, [r7, #16]
 800ef06:	1d1a      	adds	r2, r3, #4
 800ef08:	613a      	str	r2, [r7, #16]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ef0e:	68bb      	ldr	r3, [r7, #8]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d101      	bne.n	800ef18 <clmt_clust+0x3a>
 800ef14:	2300      	movs	r3, #0
 800ef16:	e010      	b.n	800ef3a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ef18:	697a      	ldr	r2, [r7, #20]
 800ef1a:	68bb      	ldr	r3, [r7, #8]
 800ef1c:	429a      	cmp	r2, r3
 800ef1e:	d307      	bcc.n	800ef30 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ef20:	697a      	ldr	r2, [r7, #20]
 800ef22:	68bb      	ldr	r3, [r7, #8]
 800ef24:	1ad3      	subs	r3, r2, r3
 800ef26:	617b      	str	r3, [r7, #20]
 800ef28:	693b      	ldr	r3, [r7, #16]
 800ef2a:	3304      	adds	r3, #4
 800ef2c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ef2e:	e7e9      	b.n	800ef04 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ef30:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ef32:	693b      	ldr	r3, [r7, #16]
 800ef34:	681a      	ldr	r2, [r3, #0]
 800ef36:	697b      	ldr	r3, [r7, #20]
 800ef38:	4413      	add	r3, r2
}
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	371c      	adds	r7, #28
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef44:	4770      	bx	lr

0800ef46 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ef46:	b580      	push	{r7, lr}
 800ef48:	b086      	sub	sp, #24
 800ef4a:	af00      	add	r7, sp, #0
 800ef4c:	6078      	str	r0, [r7, #4]
 800ef4e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ef56:	683b      	ldr	r3, [r7, #0]
 800ef58:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ef5c:	d204      	bcs.n	800ef68 <dir_sdi+0x22>
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	f003 031f 	and.w	r3, r3, #31
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d001      	beq.n	800ef6c <dir_sdi+0x26>
		return FR_INT_ERR;
 800ef68:	2302      	movs	r3, #2
 800ef6a:	e063      	b.n	800f034 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	683a      	ldr	r2, [r7, #0]
 800ef70:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	689b      	ldr	r3, [r3, #8]
 800ef76:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ef78:	697b      	ldr	r3, [r7, #20]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d106      	bne.n	800ef8c <dir_sdi+0x46>
 800ef7e:	693b      	ldr	r3, [r7, #16]
 800ef80:	781b      	ldrb	r3, [r3, #0]
 800ef82:	2b02      	cmp	r3, #2
 800ef84:	d902      	bls.n	800ef8c <dir_sdi+0x46>
		clst = fs->dirbase;
 800ef86:	693b      	ldr	r3, [r7, #16]
 800ef88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef8a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ef8c:	697b      	ldr	r3, [r7, #20]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d10c      	bne.n	800efac <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	095b      	lsrs	r3, r3, #5
 800ef96:	693a      	ldr	r2, [r7, #16]
 800ef98:	8912      	ldrh	r2, [r2, #8]
 800ef9a:	4293      	cmp	r3, r2
 800ef9c:	d301      	bcc.n	800efa2 <dir_sdi+0x5c>
 800ef9e:	2302      	movs	r3, #2
 800efa0:	e048      	b.n	800f034 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800efa2:	693b      	ldr	r3, [r7, #16]
 800efa4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	61da      	str	r2, [r3, #28]
 800efaa:	e029      	b.n	800f000 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800efac:	693b      	ldr	r3, [r7, #16]
 800efae:	895b      	ldrh	r3, [r3, #10]
 800efb0:	025b      	lsls	r3, r3, #9
 800efb2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800efb4:	e019      	b.n	800efea <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	6979      	ldr	r1, [r7, #20]
 800efba:	4618      	mov	r0, r3
 800efbc:	f7ff fd01 	bl	800e9c2 <get_fat>
 800efc0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800efc2:	697b      	ldr	r3, [r7, #20]
 800efc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efc8:	d101      	bne.n	800efce <dir_sdi+0x88>
 800efca:	2301      	movs	r3, #1
 800efcc:	e032      	b.n	800f034 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800efce:	697b      	ldr	r3, [r7, #20]
 800efd0:	2b01      	cmp	r3, #1
 800efd2:	d904      	bls.n	800efde <dir_sdi+0x98>
 800efd4:	693b      	ldr	r3, [r7, #16]
 800efd6:	695b      	ldr	r3, [r3, #20]
 800efd8:	697a      	ldr	r2, [r7, #20]
 800efda:	429a      	cmp	r2, r3
 800efdc:	d301      	bcc.n	800efe2 <dir_sdi+0x9c>
 800efde:	2302      	movs	r3, #2
 800efe0:	e028      	b.n	800f034 <dir_sdi+0xee>
			ofs -= csz;
 800efe2:	683a      	ldr	r2, [r7, #0]
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	1ad3      	subs	r3, r2, r3
 800efe8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800efea:	683a      	ldr	r2, [r7, #0]
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	429a      	cmp	r2, r3
 800eff0:	d2e1      	bcs.n	800efb6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800eff2:	6979      	ldr	r1, [r7, #20]
 800eff4:	6938      	ldr	r0, [r7, #16]
 800eff6:	f7ff fcc5 	bl	800e984 <clust2sect>
 800effa:	4602      	mov	r2, r0
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	697a      	ldr	r2, [r7, #20]
 800f004:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	69db      	ldr	r3, [r3, #28]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d101      	bne.n	800f012 <dir_sdi+0xcc>
 800f00e:	2302      	movs	r3, #2
 800f010:	e010      	b.n	800f034 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	69da      	ldr	r2, [r3, #28]
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	0a5b      	lsrs	r3, r3, #9
 800f01a:	441a      	add	r2, r3
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f020:	693b      	ldr	r3, [r7, #16]
 800f022:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f02c:	441a      	add	r2, r3
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f032:	2300      	movs	r3, #0
}
 800f034:	4618      	mov	r0, r3
 800f036:	3718      	adds	r7, #24
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}

0800f03c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b086      	sub	sp, #24
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
 800f044:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	695b      	ldr	r3, [r3, #20]
 800f050:	3320      	adds	r3, #32
 800f052:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	69db      	ldr	r3, [r3, #28]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d003      	beq.n	800f064 <dir_next+0x28>
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f062:	d301      	bcc.n	800f068 <dir_next+0x2c>
 800f064:	2304      	movs	r3, #4
 800f066:	e0aa      	b.n	800f1be <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f06e:	2b00      	cmp	r3, #0
 800f070:	f040 8098 	bne.w	800f1a4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	69db      	ldr	r3, [r3, #28]
 800f078:	1c5a      	adds	r2, r3, #1
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	699b      	ldr	r3, [r3, #24]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d10b      	bne.n	800f09e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f086:	68bb      	ldr	r3, [r7, #8]
 800f088:	095b      	lsrs	r3, r3, #5
 800f08a:	68fa      	ldr	r2, [r7, #12]
 800f08c:	8912      	ldrh	r2, [r2, #8]
 800f08e:	4293      	cmp	r3, r2
 800f090:	f0c0 8088 	bcc.w	800f1a4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2200      	movs	r2, #0
 800f098:	61da      	str	r2, [r3, #28]
 800f09a:	2304      	movs	r3, #4
 800f09c:	e08f      	b.n	800f1be <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f09e:	68bb      	ldr	r3, [r7, #8]
 800f0a0:	0a5b      	lsrs	r3, r3, #9
 800f0a2:	68fa      	ldr	r2, [r7, #12]
 800f0a4:	8952      	ldrh	r2, [r2, #10]
 800f0a6:	3a01      	subs	r2, #1
 800f0a8:	4013      	ands	r3, r2
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d17a      	bne.n	800f1a4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f0ae:	687a      	ldr	r2, [r7, #4]
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	699b      	ldr	r3, [r3, #24]
 800f0b4:	4619      	mov	r1, r3
 800f0b6:	4610      	mov	r0, r2
 800f0b8:	f7ff fc83 	bl	800e9c2 <get_fat>
 800f0bc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f0be:	697b      	ldr	r3, [r7, #20]
 800f0c0:	2b01      	cmp	r3, #1
 800f0c2:	d801      	bhi.n	800f0c8 <dir_next+0x8c>
 800f0c4:	2302      	movs	r3, #2
 800f0c6:	e07a      	b.n	800f1be <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f0c8:	697b      	ldr	r3, [r7, #20]
 800f0ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0ce:	d101      	bne.n	800f0d4 <dir_next+0x98>
 800f0d0:	2301      	movs	r3, #1
 800f0d2:	e074      	b.n	800f1be <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	695b      	ldr	r3, [r3, #20]
 800f0d8:	697a      	ldr	r2, [r7, #20]
 800f0da:	429a      	cmp	r2, r3
 800f0dc:	d358      	bcc.n	800f190 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f0de:	683b      	ldr	r3, [r7, #0]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d104      	bne.n	800f0ee <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	61da      	str	r2, [r3, #28]
 800f0ea:	2304      	movs	r3, #4
 800f0ec:	e067      	b.n	800f1be <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f0ee:	687a      	ldr	r2, [r7, #4]
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	699b      	ldr	r3, [r3, #24]
 800f0f4:	4619      	mov	r1, r3
 800f0f6:	4610      	mov	r0, r2
 800f0f8:	f7ff fe59 	bl	800edae <create_chain>
 800f0fc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f0fe:	697b      	ldr	r3, [r7, #20]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d101      	bne.n	800f108 <dir_next+0xcc>
 800f104:	2307      	movs	r3, #7
 800f106:	e05a      	b.n	800f1be <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	2b01      	cmp	r3, #1
 800f10c:	d101      	bne.n	800f112 <dir_next+0xd6>
 800f10e:	2302      	movs	r3, #2
 800f110:	e055      	b.n	800f1be <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f112:	697b      	ldr	r3, [r7, #20]
 800f114:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f118:	d101      	bne.n	800f11e <dir_next+0xe2>
 800f11a:	2301      	movs	r3, #1
 800f11c:	e04f      	b.n	800f1be <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f11e:	68f8      	ldr	r0, [r7, #12]
 800f120:	f7ff fb50 	bl	800e7c4 <sync_window>
 800f124:	4603      	mov	r3, r0
 800f126:	2b00      	cmp	r3, #0
 800f128:	d001      	beq.n	800f12e <dir_next+0xf2>
 800f12a:	2301      	movs	r3, #1
 800f12c:	e047      	b.n	800f1be <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	3330      	adds	r3, #48	@ 0x30
 800f132:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f136:	2100      	movs	r1, #0
 800f138:	4618      	mov	r0, r3
 800f13a:	f7ff f97a 	bl	800e432 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f13e:	2300      	movs	r3, #0
 800f140:	613b      	str	r3, [r7, #16]
 800f142:	6979      	ldr	r1, [r7, #20]
 800f144:	68f8      	ldr	r0, [r7, #12]
 800f146:	f7ff fc1d 	bl	800e984 <clust2sect>
 800f14a:	4602      	mov	r2, r0
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800f150:	e012      	b.n	800f178 <dir_next+0x13c>
						fs->wflag = 1;
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	2201      	movs	r2, #1
 800f156:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f158:	68f8      	ldr	r0, [r7, #12]
 800f15a:	f7ff fb33 	bl	800e7c4 <sync_window>
 800f15e:	4603      	mov	r3, r0
 800f160:	2b00      	cmp	r3, #0
 800f162:	d001      	beq.n	800f168 <dir_next+0x12c>
 800f164:	2301      	movs	r3, #1
 800f166:	e02a      	b.n	800f1be <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f168:	693b      	ldr	r3, [r7, #16]
 800f16a:	3301      	adds	r3, #1
 800f16c:	613b      	str	r3, [r7, #16]
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f172:	1c5a      	adds	r2, r3, #1
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	62da      	str	r2, [r3, #44]	@ 0x2c
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	895b      	ldrh	r3, [r3, #10]
 800f17c:	461a      	mov	r2, r3
 800f17e:	693b      	ldr	r3, [r7, #16]
 800f180:	4293      	cmp	r3, r2
 800f182:	d3e6      	bcc.n	800f152 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f188:	693b      	ldr	r3, [r7, #16]
 800f18a:	1ad2      	subs	r2, r2, r3
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	697a      	ldr	r2, [r7, #20]
 800f194:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f196:	6979      	ldr	r1, [r7, #20]
 800f198:	68f8      	ldr	r0, [r7, #12]
 800f19a:	f7ff fbf3 	bl	800e984 <clust2sect>
 800f19e:	4602      	mov	r2, r0
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	68ba      	ldr	r2, [r7, #8]
 800f1a8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f1b0:	68bb      	ldr	r3, [r7, #8]
 800f1b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1b6:	441a      	add	r2, r3
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f1bc:	2300      	movs	r3, #0
}
 800f1be:	4618      	mov	r0, r3
 800f1c0:	3718      	adds	r7, #24
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}

0800f1c6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f1c6:	b580      	push	{r7, lr}
 800f1c8:	b086      	sub	sp, #24
 800f1ca:	af00      	add	r7, sp, #0
 800f1cc:	6078      	str	r0, [r7, #4]
 800f1ce:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f1d6:	2100      	movs	r1, #0
 800f1d8:	6878      	ldr	r0, [r7, #4]
 800f1da:	f7ff feb4 	bl	800ef46 <dir_sdi>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f1e2:	7dfb      	ldrb	r3, [r7, #23]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d12b      	bne.n	800f240 <dir_alloc+0x7a>
		n = 0;
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	69db      	ldr	r3, [r3, #28]
 800f1f0:	4619      	mov	r1, r3
 800f1f2:	68f8      	ldr	r0, [r7, #12]
 800f1f4:	f7ff fb2a 	bl	800e84c <move_window>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f1fc:	7dfb      	ldrb	r3, [r7, #23]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d11d      	bne.n	800f23e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	6a1b      	ldr	r3, [r3, #32]
 800f206:	781b      	ldrb	r3, [r3, #0]
 800f208:	2be5      	cmp	r3, #229	@ 0xe5
 800f20a:	d004      	beq.n	800f216 <dir_alloc+0x50>
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6a1b      	ldr	r3, [r3, #32]
 800f210:	781b      	ldrb	r3, [r3, #0]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d107      	bne.n	800f226 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f216:	693b      	ldr	r3, [r7, #16]
 800f218:	3301      	adds	r3, #1
 800f21a:	613b      	str	r3, [r7, #16]
 800f21c:	693a      	ldr	r2, [r7, #16]
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	429a      	cmp	r2, r3
 800f222:	d102      	bne.n	800f22a <dir_alloc+0x64>
 800f224:	e00c      	b.n	800f240 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f226:	2300      	movs	r3, #0
 800f228:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f22a:	2101      	movs	r1, #1
 800f22c:	6878      	ldr	r0, [r7, #4]
 800f22e:	f7ff ff05 	bl	800f03c <dir_next>
 800f232:	4603      	mov	r3, r0
 800f234:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f236:	7dfb      	ldrb	r3, [r7, #23]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d0d7      	beq.n	800f1ec <dir_alloc+0x26>
 800f23c:	e000      	b.n	800f240 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f23e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f240:	7dfb      	ldrb	r3, [r7, #23]
 800f242:	2b04      	cmp	r3, #4
 800f244:	d101      	bne.n	800f24a <dir_alloc+0x84>
 800f246:	2307      	movs	r3, #7
 800f248:	75fb      	strb	r3, [r7, #23]
	return res;
 800f24a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f24c:	4618      	mov	r0, r3
 800f24e:	3718      	adds	r7, #24
 800f250:	46bd      	mov	sp, r7
 800f252:	bd80      	pop	{r7, pc}

0800f254 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b084      	sub	sp, #16
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
 800f25c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	331a      	adds	r3, #26
 800f262:	4618      	mov	r0, r3
 800f264:	f7ff f842 	bl	800e2ec <ld_word>
 800f268:	4603      	mov	r3, r0
 800f26a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	781b      	ldrb	r3, [r3, #0]
 800f270:	2b03      	cmp	r3, #3
 800f272:	d109      	bne.n	800f288 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	3314      	adds	r3, #20
 800f278:	4618      	mov	r0, r3
 800f27a:	f7ff f837 	bl	800e2ec <ld_word>
 800f27e:	4603      	mov	r3, r0
 800f280:	041b      	lsls	r3, r3, #16
 800f282:	68fa      	ldr	r2, [r7, #12]
 800f284:	4313      	orrs	r3, r2
 800f286:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f288:	68fb      	ldr	r3, [r7, #12]
}
 800f28a:	4618      	mov	r0, r3
 800f28c:	3710      	adds	r7, #16
 800f28e:	46bd      	mov	sp, r7
 800f290:	bd80      	pop	{r7, pc}

0800f292 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f292:	b580      	push	{r7, lr}
 800f294:	b084      	sub	sp, #16
 800f296:	af00      	add	r7, sp, #0
 800f298:	60f8      	str	r0, [r7, #12]
 800f29a:	60b9      	str	r1, [r7, #8]
 800f29c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	331a      	adds	r3, #26
 800f2a2:	687a      	ldr	r2, [r7, #4]
 800f2a4:	b292      	uxth	r2, r2
 800f2a6:	4611      	mov	r1, r2
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f7ff f85a 	bl	800e362 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	781b      	ldrb	r3, [r3, #0]
 800f2b2:	2b03      	cmp	r3, #3
 800f2b4:	d109      	bne.n	800f2ca <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f2b6:	68bb      	ldr	r3, [r7, #8]
 800f2b8:	f103 0214 	add.w	r2, r3, #20
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	0c1b      	lsrs	r3, r3, #16
 800f2c0:	b29b      	uxth	r3, r3
 800f2c2:	4619      	mov	r1, r3
 800f2c4:	4610      	mov	r0, r2
 800f2c6:	f7ff f84c 	bl	800e362 <st_word>
	}
}
 800f2ca:	bf00      	nop
 800f2cc:	3710      	adds	r7, #16
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	bd80      	pop	{r7, pc}

0800f2d2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f2d2:	b580      	push	{r7, lr}
 800f2d4:	b086      	sub	sp, #24
 800f2d6:	af00      	add	r7, sp, #0
 800f2d8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f2e0:	2100      	movs	r1, #0
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	f7ff fe2f 	bl	800ef46 <dir_sdi>
 800f2e8:	4603      	mov	r3, r0
 800f2ea:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f2ec:	7dfb      	ldrb	r3, [r7, #23]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d001      	beq.n	800f2f6 <dir_find+0x24>
 800f2f2:	7dfb      	ldrb	r3, [r7, #23]
 800f2f4:	e03e      	b.n	800f374 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	69db      	ldr	r3, [r3, #28]
 800f2fa:	4619      	mov	r1, r3
 800f2fc:	6938      	ldr	r0, [r7, #16]
 800f2fe:	f7ff faa5 	bl	800e84c <move_window>
 800f302:	4603      	mov	r3, r0
 800f304:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f306:	7dfb      	ldrb	r3, [r7, #23]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d12f      	bne.n	800f36c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	6a1b      	ldr	r3, [r3, #32]
 800f310:	781b      	ldrb	r3, [r3, #0]
 800f312:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f314:	7bfb      	ldrb	r3, [r7, #15]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d102      	bne.n	800f320 <dir_find+0x4e>
 800f31a:	2304      	movs	r3, #4
 800f31c:	75fb      	strb	r3, [r7, #23]
 800f31e:	e028      	b.n	800f372 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	6a1b      	ldr	r3, [r3, #32]
 800f324:	330b      	adds	r3, #11
 800f326:	781b      	ldrb	r3, [r3, #0]
 800f328:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f32c:	b2da      	uxtb	r2, r3
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	6a1b      	ldr	r3, [r3, #32]
 800f336:	330b      	adds	r3, #11
 800f338:	781b      	ldrb	r3, [r3, #0]
 800f33a:	f003 0308 	and.w	r3, r3, #8
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d10a      	bne.n	800f358 <dir_find+0x86>
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	6a18      	ldr	r0, [r3, #32]
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	3324      	adds	r3, #36	@ 0x24
 800f34a:	220b      	movs	r2, #11
 800f34c:	4619      	mov	r1, r3
 800f34e:	f7ff f88b 	bl	800e468 <mem_cmp>
 800f352:	4603      	mov	r3, r0
 800f354:	2b00      	cmp	r3, #0
 800f356:	d00b      	beq.n	800f370 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f358:	2100      	movs	r1, #0
 800f35a:	6878      	ldr	r0, [r7, #4]
 800f35c:	f7ff fe6e 	bl	800f03c <dir_next>
 800f360:	4603      	mov	r3, r0
 800f362:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f364:	7dfb      	ldrb	r3, [r7, #23]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d0c5      	beq.n	800f2f6 <dir_find+0x24>
 800f36a:	e002      	b.n	800f372 <dir_find+0xa0>
		if (res != FR_OK) break;
 800f36c:	bf00      	nop
 800f36e:	e000      	b.n	800f372 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f370:	bf00      	nop

	return res;
 800f372:	7dfb      	ldrb	r3, [r7, #23]
}
 800f374:	4618      	mov	r0, r3
 800f376:	3718      	adds	r7, #24
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}

0800f37c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b084      	sub	sp, #16
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f38a:	2101      	movs	r1, #1
 800f38c:	6878      	ldr	r0, [r7, #4]
 800f38e:	f7ff ff1a 	bl	800f1c6 <dir_alloc>
 800f392:	4603      	mov	r3, r0
 800f394:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f396:	7bfb      	ldrb	r3, [r7, #15]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d11c      	bne.n	800f3d6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	69db      	ldr	r3, [r3, #28]
 800f3a0:	4619      	mov	r1, r3
 800f3a2:	68b8      	ldr	r0, [r7, #8]
 800f3a4:	f7ff fa52 	bl	800e84c <move_window>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f3ac:	7bfb      	ldrb	r3, [r7, #15]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d111      	bne.n	800f3d6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	6a1b      	ldr	r3, [r3, #32]
 800f3b6:	2220      	movs	r2, #32
 800f3b8:	2100      	movs	r1, #0
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	f7ff f839 	bl	800e432 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	6a18      	ldr	r0, [r3, #32]
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	3324      	adds	r3, #36	@ 0x24
 800f3c8:	220b      	movs	r2, #11
 800f3ca:	4619      	mov	r1, r3
 800f3cc:	f7ff f810 	bl	800e3f0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f3d0:	68bb      	ldr	r3, [r7, #8]
 800f3d2:	2201      	movs	r2, #1
 800f3d4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f3d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3d8:	4618      	mov	r0, r3
 800f3da:	3710      	adds	r7, #16
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	bd80      	pop	{r7, pc}

0800f3e0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b088      	sub	sp, #32
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
 800f3e8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	60fb      	str	r3, [r7, #12]
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	3324      	adds	r3, #36	@ 0x24
 800f3f4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f3f6:	220b      	movs	r2, #11
 800f3f8:	2120      	movs	r1, #32
 800f3fa:	68b8      	ldr	r0, [r7, #8]
 800f3fc:	f7ff f819 	bl	800e432 <mem_set>
	si = i = 0; ni = 8;
 800f400:	2300      	movs	r3, #0
 800f402:	613b      	str	r3, [r7, #16]
 800f404:	693b      	ldr	r3, [r7, #16]
 800f406:	61fb      	str	r3, [r7, #28]
 800f408:	2308      	movs	r3, #8
 800f40a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f40c:	69fb      	ldr	r3, [r7, #28]
 800f40e:	1c5a      	adds	r2, r3, #1
 800f410:	61fa      	str	r2, [r7, #28]
 800f412:	68fa      	ldr	r2, [r7, #12]
 800f414:	4413      	add	r3, r2
 800f416:	781b      	ldrb	r3, [r3, #0]
 800f418:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f41a:	7efb      	ldrb	r3, [r7, #27]
 800f41c:	2b20      	cmp	r3, #32
 800f41e:	d94e      	bls.n	800f4be <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f420:	7efb      	ldrb	r3, [r7, #27]
 800f422:	2b2f      	cmp	r3, #47	@ 0x2f
 800f424:	d006      	beq.n	800f434 <create_name+0x54>
 800f426:	7efb      	ldrb	r3, [r7, #27]
 800f428:	2b5c      	cmp	r3, #92	@ 0x5c
 800f42a:	d110      	bne.n	800f44e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f42c:	e002      	b.n	800f434 <create_name+0x54>
 800f42e:	69fb      	ldr	r3, [r7, #28]
 800f430:	3301      	adds	r3, #1
 800f432:	61fb      	str	r3, [r7, #28]
 800f434:	68fa      	ldr	r2, [r7, #12]
 800f436:	69fb      	ldr	r3, [r7, #28]
 800f438:	4413      	add	r3, r2
 800f43a:	781b      	ldrb	r3, [r3, #0]
 800f43c:	2b2f      	cmp	r3, #47	@ 0x2f
 800f43e:	d0f6      	beq.n	800f42e <create_name+0x4e>
 800f440:	68fa      	ldr	r2, [r7, #12]
 800f442:	69fb      	ldr	r3, [r7, #28]
 800f444:	4413      	add	r3, r2
 800f446:	781b      	ldrb	r3, [r3, #0]
 800f448:	2b5c      	cmp	r3, #92	@ 0x5c
 800f44a:	d0f0      	beq.n	800f42e <create_name+0x4e>
			break;
 800f44c:	e038      	b.n	800f4c0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f44e:	7efb      	ldrb	r3, [r7, #27]
 800f450:	2b2e      	cmp	r3, #46	@ 0x2e
 800f452:	d003      	beq.n	800f45c <create_name+0x7c>
 800f454:	693a      	ldr	r2, [r7, #16]
 800f456:	697b      	ldr	r3, [r7, #20]
 800f458:	429a      	cmp	r2, r3
 800f45a:	d30c      	bcc.n	800f476 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f45c:	697b      	ldr	r3, [r7, #20]
 800f45e:	2b0b      	cmp	r3, #11
 800f460:	d002      	beq.n	800f468 <create_name+0x88>
 800f462:	7efb      	ldrb	r3, [r7, #27]
 800f464:	2b2e      	cmp	r3, #46	@ 0x2e
 800f466:	d001      	beq.n	800f46c <create_name+0x8c>
 800f468:	2306      	movs	r3, #6
 800f46a:	e044      	b.n	800f4f6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800f46c:	2308      	movs	r3, #8
 800f46e:	613b      	str	r3, [r7, #16]
 800f470:	230b      	movs	r3, #11
 800f472:	617b      	str	r3, [r7, #20]
			continue;
 800f474:	e022      	b.n	800f4bc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f476:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	da04      	bge.n	800f488 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f47e:	7efb      	ldrb	r3, [r7, #27]
 800f480:	3b80      	subs	r3, #128	@ 0x80
 800f482:	4a1f      	ldr	r2, [pc, #124]	@ (800f500 <create_name+0x120>)
 800f484:	5cd3      	ldrb	r3, [r2, r3]
 800f486:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f488:	7efb      	ldrb	r3, [r7, #27]
 800f48a:	4619      	mov	r1, r3
 800f48c:	481d      	ldr	r0, [pc, #116]	@ (800f504 <create_name+0x124>)
 800f48e:	f7ff f812 	bl	800e4b6 <chk_chr>
 800f492:	4603      	mov	r3, r0
 800f494:	2b00      	cmp	r3, #0
 800f496:	d001      	beq.n	800f49c <create_name+0xbc>
 800f498:	2306      	movs	r3, #6
 800f49a:	e02c      	b.n	800f4f6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f49c:	7efb      	ldrb	r3, [r7, #27]
 800f49e:	2b60      	cmp	r3, #96	@ 0x60
 800f4a0:	d905      	bls.n	800f4ae <create_name+0xce>
 800f4a2:	7efb      	ldrb	r3, [r7, #27]
 800f4a4:	2b7a      	cmp	r3, #122	@ 0x7a
 800f4a6:	d802      	bhi.n	800f4ae <create_name+0xce>
 800f4a8:	7efb      	ldrb	r3, [r7, #27]
 800f4aa:	3b20      	subs	r3, #32
 800f4ac:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800f4ae:	693b      	ldr	r3, [r7, #16]
 800f4b0:	1c5a      	adds	r2, r3, #1
 800f4b2:	613a      	str	r2, [r7, #16]
 800f4b4:	68ba      	ldr	r2, [r7, #8]
 800f4b6:	4413      	add	r3, r2
 800f4b8:	7efa      	ldrb	r2, [r7, #27]
 800f4ba:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f4bc:	e7a6      	b.n	800f40c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f4be:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f4c0:	68fa      	ldr	r2, [r7, #12]
 800f4c2:	69fb      	ldr	r3, [r7, #28]
 800f4c4:	441a      	add	r2, r3
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f4ca:	693b      	ldr	r3, [r7, #16]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d101      	bne.n	800f4d4 <create_name+0xf4>
 800f4d0:	2306      	movs	r3, #6
 800f4d2:	e010      	b.n	800f4f6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	781b      	ldrb	r3, [r3, #0]
 800f4d8:	2be5      	cmp	r3, #229	@ 0xe5
 800f4da:	d102      	bne.n	800f4e2 <create_name+0x102>
 800f4dc:	68bb      	ldr	r3, [r7, #8]
 800f4de:	2205      	movs	r2, #5
 800f4e0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f4e2:	7efb      	ldrb	r3, [r7, #27]
 800f4e4:	2b20      	cmp	r3, #32
 800f4e6:	d801      	bhi.n	800f4ec <create_name+0x10c>
 800f4e8:	2204      	movs	r2, #4
 800f4ea:	e000      	b.n	800f4ee <create_name+0x10e>
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	68bb      	ldr	r3, [r7, #8]
 800f4f0:	330b      	adds	r3, #11
 800f4f2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f4f4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	3720      	adds	r7, #32
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}
 800f4fe:	bf00      	nop
 800f500:	08011cf8 	.word	0x08011cf8
 800f504:	08011c00 	.word	0x08011c00

0800f508 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b086      	sub	sp, #24
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
 800f510:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f516:	693b      	ldr	r3, [r7, #16]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f51c:	e002      	b.n	800f524 <follow_path+0x1c>
 800f51e:	683b      	ldr	r3, [r7, #0]
 800f520:	3301      	adds	r3, #1
 800f522:	603b      	str	r3, [r7, #0]
 800f524:	683b      	ldr	r3, [r7, #0]
 800f526:	781b      	ldrb	r3, [r3, #0]
 800f528:	2b2f      	cmp	r3, #47	@ 0x2f
 800f52a:	d0f8      	beq.n	800f51e <follow_path+0x16>
 800f52c:	683b      	ldr	r3, [r7, #0]
 800f52e:	781b      	ldrb	r3, [r3, #0]
 800f530:	2b5c      	cmp	r3, #92	@ 0x5c
 800f532:	d0f4      	beq.n	800f51e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f534:	693b      	ldr	r3, [r7, #16]
 800f536:	2200      	movs	r2, #0
 800f538:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	781b      	ldrb	r3, [r3, #0]
 800f53e:	2b1f      	cmp	r3, #31
 800f540:	d80a      	bhi.n	800f558 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	2280      	movs	r2, #128	@ 0x80
 800f546:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800f54a:	2100      	movs	r1, #0
 800f54c:	6878      	ldr	r0, [r7, #4]
 800f54e:	f7ff fcfa 	bl	800ef46 <dir_sdi>
 800f552:	4603      	mov	r3, r0
 800f554:	75fb      	strb	r3, [r7, #23]
 800f556:	e043      	b.n	800f5e0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f558:	463b      	mov	r3, r7
 800f55a:	4619      	mov	r1, r3
 800f55c:	6878      	ldr	r0, [r7, #4]
 800f55e:	f7ff ff3f 	bl	800f3e0 <create_name>
 800f562:	4603      	mov	r3, r0
 800f564:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f566:	7dfb      	ldrb	r3, [r7, #23]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d134      	bne.n	800f5d6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f7ff feb0 	bl	800f2d2 <dir_find>
 800f572:	4603      	mov	r3, r0
 800f574:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f57c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f57e:	7dfb      	ldrb	r3, [r7, #23]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d00a      	beq.n	800f59a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f584:	7dfb      	ldrb	r3, [r7, #23]
 800f586:	2b04      	cmp	r3, #4
 800f588:	d127      	bne.n	800f5da <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f58a:	7afb      	ldrb	r3, [r7, #11]
 800f58c:	f003 0304 	and.w	r3, r3, #4
 800f590:	2b00      	cmp	r3, #0
 800f592:	d122      	bne.n	800f5da <follow_path+0xd2>
 800f594:	2305      	movs	r3, #5
 800f596:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f598:	e01f      	b.n	800f5da <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f59a:	7afb      	ldrb	r3, [r7, #11]
 800f59c:	f003 0304 	and.w	r3, r3, #4
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d11c      	bne.n	800f5de <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f5a4:	693b      	ldr	r3, [r7, #16]
 800f5a6:	799b      	ldrb	r3, [r3, #6]
 800f5a8:	f003 0310 	and.w	r3, r3, #16
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d102      	bne.n	800f5b6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f5b0:	2305      	movs	r3, #5
 800f5b2:	75fb      	strb	r3, [r7, #23]
 800f5b4:	e014      	b.n	800f5e0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	695b      	ldr	r3, [r3, #20]
 800f5c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f5c4:	4413      	add	r3, r2
 800f5c6:	4619      	mov	r1, r3
 800f5c8:	68f8      	ldr	r0, [r7, #12]
 800f5ca:	f7ff fe43 	bl	800f254 <ld_clust>
 800f5ce:	4602      	mov	r2, r0
 800f5d0:	693b      	ldr	r3, [r7, #16]
 800f5d2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f5d4:	e7c0      	b.n	800f558 <follow_path+0x50>
			if (res != FR_OK) break;
 800f5d6:	bf00      	nop
 800f5d8:	e002      	b.n	800f5e0 <follow_path+0xd8>
				break;
 800f5da:	bf00      	nop
 800f5dc:	e000      	b.n	800f5e0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f5de:	bf00      	nop
			}
		}
	}

	return res;
 800f5e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	3718      	adds	r7, #24
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bd80      	pop	{r7, pc}

0800f5ea <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f5ea:	b480      	push	{r7}
 800f5ec:	b087      	sub	sp, #28
 800f5ee:	af00      	add	r7, sp, #0
 800f5f0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f5f2:	f04f 33ff 	mov.w	r3, #4294967295
 800f5f6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d031      	beq.n	800f664 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	617b      	str	r3, [r7, #20]
 800f606:	e002      	b.n	800f60e <get_ldnumber+0x24>
 800f608:	697b      	ldr	r3, [r7, #20]
 800f60a:	3301      	adds	r3, #1
 800f60c:	617b      	str	r3, [r7, #20]
 800f60e:	697b      	ldr	r3, [r7, #20]
 800f610:	781b      	ldrb	r3, [r3, #0]
 800f612:	2b20      	cmp	r3, #32
 800f614:	d903      	bls.n	800f61e <get_ldnumber+0x34>
 800f616:	697b      	ldr	r3, [r7, #20]
 800f618:	781b      	ldrb	r3, [r3, #0]
 800f61a:	2b3a      	cmp	r3, #58	@ 0x3a
 800f61c:	d1f4      	bne.n	800f608 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f61e:	697b      	ldr	r3, [r7, #20]
 800f620:	781b      	ldrb	r3, [r3, #0]
 800f622:	2b3a      	cmp	r3, #58	@ 0x3a
 800f624:	d11c      	bne.n	800f660 <get_ldnumber+0x76>
			tp = *path;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	1c5a      	adds	r2, r3, #1
 800f630:	60fa      	str	r2, [r7, #12]
 800f632:	781b      	ldrb	r3, [r3, #0]
 800f634:	3b30      	subs	r3, #48	@ 0x30
 800f636:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f638:	68bb      	ldr	r3, [r7, #8]
 800f63a:	2b09      	cmp	r3, #9
 800f63c:	d80e      	bhi.n	800f65c <get_ldnumber+0x72>
 800f63e:	68fa      	ldr	r2, [r7, #12]
 800f640:	697b      	ldr	r3, [r7, #20]
 800f642:	429a      	cmp	r2, r3
 800f644:	d10a      	bne.n	800f65c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f646:	68bb      	ldr	r3, [r7, #8]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d107      	bne.n	800f65c <get_ldnumber+0x72>
					vol = (int)i;
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f650:	697b      	ldr	r3, [r7, #20]
 800f652:	3301      	adds	r3, #1
 800f654:	617b      	str	r3, [r7, #20]
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	697a      	ldr	r2, [r7, #20]
 800f65a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f65c:	693b      	ldr	r3, [r7, #16]
 800f65e:	e002      	b.n	800f666 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f660:	2300      	movs	r3, #0
 800f662:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f664:	693b      	ldr	r3, [r7, #16]
}
 800f666:	4618      	mov	r0, r3
 800f668:	371c      	adds	r7, #28
 800f66a:	46bd      	mov	sp, r7
 800f66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f670:	4770      	bx	lr
	...

0800f674 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b082      	sub	sp, #8
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
 800f67c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	2200      	movs	r2, #0
 800f682:	70da      	strb	r2, [r3, #3]
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	f04f 32ff 	mov.w	r2, #4294967295
 800f68a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f68c:	6839      	ldr	r1, [r7, #0]
 800f68e:	6878      	ldr	r0, [r7, #4]
 800f690:	f7ff f8dc 	bl	800e84c <move_window>
 800f694:	4603      	mov	r3, r0
 800f696:	2b00      	cmp	r3, #0
 800f698:	d001      	beq.n	800f69e <check_fs+0x2a>
 800f69a:	2304      	movs	r3, #4
 800f69c:	e038      	b.n	800f710 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	3330      	adds	r3, #48	@ 0x30
 800f6a2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f7fe fe20 	bl	800e2ec <ld_word>
 800f6ac:	4603      	mov	r3, r0
 800f6ae:	461a      	mov	r2, r3
 800f6b0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f6b4:	429a      	cmp	r2, r3
 800f6b6:	d001      	beq.n	800f6bc <check_fs+0x48>
 800f6b8:	2303      	movs	r3, #3
 800f6ba:	e029      	b.n	800f710 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f6c2:	2be9      	cmp	r3, #233	@ 0xe9
 800f6c4:	d009      	beq.n	800f6da <check_fs+0x66>
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f6cc:	2beb      	cmp	r3, #235	@ 0xeb
 800f6ce:	d11e      	bne.n	800f70e <check_fs+0x9a>
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800f6d6:	2b90      	cmp	r3, #144	@ 0x90
 800f6d8:	d119      	bne.n	800f70e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	3330      	adds	r3, #48	@ 0x30
 800f6de:	3336      	adds	r3, #54	@ 0x36
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f7fe fe1b 	bl	800e31c <ld_dword>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800f6ec:	4a0a      	ldr	r2, [pc, #40]	@ (800f718 <check_fs+0xa4>)
 800f6ee:	4293      	cmp	r3, r2
 800f6f0:	d101      	bne.n	800f6f6 <check_fs+0x82>
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	e00c      	b.n	800f710 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	3330      	adds	r3, #48	@ 0x30
 800f6fa:	3352      	adds	r3, #82	@ 0x52
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f7fe fe0d 	bl	800e31c <ld_dword>
 800f702:	4603      	mov	r3, r0
 800f704:	4a05      	ldr	r2, [pc, #20]	@ (800f71c <check_fs+0xa8>)
 800f706:	4293      	cmp	r3, r2
 800f708:	d101      	bne.n	800f70e <check_fs+0x9a>
 800f70a:	2300      	movs	r3, #0
 800f70c:	e000      	b.n	800f710 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f70e:	2302      	movs	r3, #2
}
 800f710:	4618      	mov	r0, r3
 800f712:	3708      	adds	r7, #8
 800f714:	46bd      	mov	sp, r7
 800f716:	bd80      	pop	{r7, pc}
 800f718:	00544146 	.word	0x00544146
 800f71c:	33544146 	.word	0x33544146

0800f720 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b096      	sub	sp, #88	@ 0x58
 800f724:	af00      	add	r7, sp, #0
 800f726:	60f8      	str	r0, [r7, #12]
 800f728:	60b9      	str	r1, [r7, #8]
 800f72a:	4613      	mov	r3, r2
 800f72c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f72e:	68bb      	ldr	r3, [r7, #8]
 800f730:	2200      	movs	r2, #0
 800f732:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f734:	68f8      	ldr	r0, [r7, #12]
 800f736:	f7ff ff58 	bl	800f5ea <get_ldnumber>
 800f73a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f73c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f73e:	2b00      	cmp	r3, #0
 800f740:	da01      	bge.n	800f746 <find_volume+0x26>
 800f742:	230b      	movs	r3, #11
 800f744:	e22d      	b.n	800fba2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f746:	4aa1      	ldr	r2, [pc, #644]	@ (800f9cc <find_volume+0x2ac>)
 800f748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f74a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f74e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f752:	2b00      	cmp	r3, #0
 800f754:	d101      	bne.n	800f75a <find_volume+0x3a>
 800f756:	230c      	movs	r3, #12
 800f758:	e223      	b.n	800fba2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f75a:	68bb      	ldr	r3, [r7, #8]
 800f75c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f75e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f760:	79fb      	ldrb	r3, [r7, #7]
 800f762:	f023 0301 	bic.w	r3, r3, #1
 800f766:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f76a:	781b      	ldrb	r3, [r3, #0]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d01a      	beq.n	800f7a6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f772:	785b      	ldrb	r3, [r3, #1]
 800f774:	4618      	mov	r0, r3
 800f776:	f7fe fd19 	bl	800e1ac <disk_status>
 800f77a:	4603      	mov	r3, r0
 800f77c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f780:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f784:	f003 0301 	and.w	r3, r3, #1
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d10c      	bne.n	800f7a6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f78c:	79fb      	ldrb	r3, [r7, #7]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d007      	beq.n	800f7a2 <find_volume+0x82>
 800f792:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f796:	f003 0304 	and.w	r3, r3, #4
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d001      	beq.n	800f7a2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f79e:	230a      	movs	r3, #10
 800f7a0:	e1ff      	b.n	800fba2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	e1fd      	b.n	800fba2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f7a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f7ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f7ae:	b2da      	uxtb	r2, r3
 800f7b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7b2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f7b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7b6:	785b      	ldrb	r3, [r3, #1]
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	f7fe fd11 	bl	800e1e0 <disk_initialize>
 800f7be:	4603      	mov	r3, r0
 800f7c0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f7c4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f7c8:	f003 0301 	and.w	r3, r3, #1
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d001      	beq.n	800f7d4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f7d0:	2303      	movs	r3, #3
 800f7d2:	e1e6      	b.n	800fba2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f7d4:	79fb      	ldrb	r3, [r7, #7]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d007      	beq.n	800f7ea <find_volume+0xca>
 800f7da:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f7de:	f003 0304 	and.w	r3, r3, #4
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d001      	beq.n	800f7ea <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f7e6:	230a      	movs	r3, #10
 800f7e8:	e1db      	b.n	800fba2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f7ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f7f0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f7f2:	f7ff ff3f 	bl	800f674 <check_fs>
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f7fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f800:	2b02      	cmp	r3, #2
 800f802:	d149      	bne.n	800f898 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f804:	2300      	movs	r3, #0
 800f806:	643b      	str	r3, [r7, #64]	@ 0x40
 800f808:	e01e      	b.n	800f848 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f80a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f80c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f810:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f812:	011b      	lsls	r3, r3, #4
 800f814:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800f818:	4413      	add	r3, r2
 800f81a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f81c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f81e:	3304      	adds	r3, #4
 800f820:	781b      	ldrb	r3, [r3, #0]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d006      	beq.n	800f834 <find_volume+0x114>
 800f826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f828:	3308      	adds	r3, #8
 800f82a:	4618      	mov	r0, r3
 800f82c:	f7fe fd76 	bl	800e31c <ld_dword>
 800f830:	4602      	mov	r2, r0
 800f832:	e000      	b.n	800f836 <find_volume+0x116>
 800f834:	2200      	movs	r2, #0
 800f836:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f838:	009b      	lsls	r3, r3, #2
 800f83a:	3358      	adds	r3, #88	@ 0x58
 800f83c:	443b      	add	r3, r7
 800f83e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f842:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f844:	3301      	adds	r3, #1
 800f846:	643b      	str	r3, [r7, #64]	@ 0x40
 800f848:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f84a:	2b03      	cmp	r3, #3
 800f84c:	d9dd      	bls.n	800f80a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f84e:	2300      	movs	r3, #0
 800f850:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800f852:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f854:	2b00      	cmp	r3, #0
 800f856:	d002      	beq.n	800f85e <find_volume+0x13e>
 800f858:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f85a:	3b01      	subs	r3, #1
 800f85c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f85e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f860:	009b      	lsls	r3, r3, #2
 800f862:	3358      	adds	r3, #88	@ 0x58
 800f864:	443b      	add	r3, r7
 800f866:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f86a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f86c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d005      	beq.n	800f87e <find_volume+0x15e>
 800f872:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f874:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f876:	f7ff fefd 	bl	800f674 <check_fs>
 800f87a:	4603      	mov	r3, r0
 800f87c:	e000      	b.n	800f880 <find_volume+0x160>
 800f87e:	2303      	movs	r3, #3
 800f880:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f884:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f888:	2b01      	cmp	r3, #1
 800f88a:	d905      	bls.n	800f898 <find_volume+0x178>
 800f88c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f88e:	3301      	adds	r3, #1
 800f890:	643b      	str	r3, [r7, #64]	@ 0x40
 800f892:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f894:	2b03      	cmp	r3, #3
 800f896:	d9e2      	bls.n	800f85e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f898:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f89c:	2b04      	cmp	r3, #4
 800f89e:	d101      	bne.n	800f8a4 <find_volume+0x184>
 800f8a0:	2301      	movs	r3, #1
 800f8a2:	e17e      	b.n	800fba2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f8a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f8a8:	2b01      	cmp	r3, #1
 800f8aa:	d901      	bls.n	800f8b0 <find_volume+0x190>
 800f8ac:	230d      	movs	r3, #13
 800f8ae:	e178      	b.n	800fba2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f8b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8b2:	3330      	adds	r3, #48	@ 0x30
 800f8b4:	330b      	adds	r3, #11
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f7fe fd18 	bl	800e2ec <ld_word>
 800f8bc:	4603      	mov	r3, r0
 800f8be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f8c2:	d001      	beq.n	800f8c8 <find_volume+0x1a8>
 800f8c4:	230d      	movs	r3, #13
 800f8c6:	e16c      	b.n	800fba2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f8c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8ca:	3330      	adds	r3, #48	@ 0x30
 800f8cc:	3316      	adds	r3, #22
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	f7fe fd0c 	bl	800e2ec <ld_word>
 800f8d4:	4603      	mov	r3, r0
 800f8d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f8d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d106      	bne.n	800f8ec <find_volume+0x1cc>
 800f8de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8e0:	3330      	adds	r3, #48	@ 0x30
 800f8e2:	3324      	adds	r3, #36	@ 0x24
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	f7fe fd19 	bl	800e31c <ld_dword>
 800f8ea:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800f8ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f8f0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f8f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8f4:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800f8f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8fa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f8fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8fe:	789b      	ldrb	r3, [r3, #2]
 800f900:	2b01      	cmp	r3, #1
 800f902:	d005      	beq.n	800f910 <find_volume+0x1f0>
 800f904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f906:	789b      	ldrb	r3, [r3, #2]
 800f908:	2b02      	cmp	r3, #2
 800f90a:	d001      	beq.n	800f910 <find_volume+0x1f0>
 800f90c:	230d      	movs	r3, #13
 800f90e:	e148      	b.n	800fba2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f912:	789b      	ldrb	r3, [r3, #2]
 800f914:	461a      	mov	r2, r3
 800f916:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f918:	fb02 f303 	mul.w	r3, r2, r3
 800f91c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f91e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f920:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f924:	461a      	mov	r2, r3
 800f926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f928:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f92a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f92c:	895b      	ldrh	r3, [r3, #10]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d008      	beq.n	800f944 <find_volume+0x224>
 800f932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f934:	895b      	ldrh	r3, [r3, #10]
 800f936:	461a      	mov	r2, r3
 800f938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f93a:	895b      	ldrh	r3, [r3, #10]
 800f93c:	3b01      	subs	r3, #1
 800f93e:	4013      	ands	r3, r2
 800f940:	2b00      	cmp	r3, #0
 800f942:	d001      	beq.n	800f948 <find_volume+0x228>
 800f944:	230d      	movs	r3, #13
 800f946:	e12c      	b.n	800fba2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f94a:	3330      	adds	r3, #48	@ 0x30
 800f94c:	3311      	adds	r3, #17
 800f94e:	4618      	mov	r0, r3
 800f950:	f7fe fccc 	bl	800e2ec <ld_word>
 800f954:	4603      	mov	r3, r0
 800f956:	461a      	mov	r2, r3
 800f958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f95a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f95c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f95e:	891b      	ldrh	r3, [r3, #8]
 800f960:	f003 030f 	and.w	r3, r3, #15
 800f964:	b29b      	uxth	r3, r3
 800f966:	2b00      	cmp	r3, #0
 800f968:	d001      	beq.n	800f96e <find_volume+0x24e>
 800f96a:	230d      	movs	r3, #13
 800f96c:	e119      	b.n	800fba2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f96e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f970:	3330      	adds	r3, #48	@ 0x30
 800f972:	3313      	adds	r3, #19
 800f974:	4618      	mov	r0, r3
 800f976:	f7fe fcb9 	bl	800e2ec <ld_word>
 800f97a:	4603      	mov	r3, r0
 800f97c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f97e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f980:	2b00      	cmp	r3, #0
 800f982:	d106      	bne.n	800f992 <find_volume+0x272>
 800f984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f986:	3330      	adds	r3, #48	@ 0x30
 800f988:	3320      	adds	r3, #32
 800f98a:	4618      	mov	r0, r3
 800f98c:	f7fe fcc6 	bl	800e31c <ld_dword>
 800f990:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f994:	3330      	adds	r3, #48	@ 0x30
 800f996:	330e      	adds	r3, #14
 800f998:	4618      	mov	r0, r3
 800f99a:	f7fe fca7 	bl	800e2ec <ld_word>
 800f99e:	4603      	mov	r3, r0
 800f9a0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f9a2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d101      	bne.n	800f9ac <find_volume+0x28c>
 800f9a8:	230d      	movs	r3, #13
 800f9aa:	e0fa      	b.n	800fba2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f9ac:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f9ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9b0:	4413      	add	r3, r2
 800f9b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f9b4:	8912      	ldrh	r2, [r2, #8]
 800f9b6:	0912      	lsrs	r2, r2, #4
 800f9b8:	b292      	uxth	r2, r2
 800f9ba:	4413      	add	r3, r2
 800f9bc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f9be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f9c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9c2:	429a      	cmp	r2, r3
 800f9c4:	d204      	bcs.n	800f9d0 <find_volume+0x2b0>
 800f9c6:	230d      	movs	r3, #13
 800f9c8:	e0eb      	b.n	800fba2 <find_volume+0x482>
 800f9ca:	bf00      	nop
 800f9cc:	24000bfc 	.word	0x24000bfc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f9d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f9d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9d4:	1ad3      	subs	r3, r2, r3
 800f9d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f9d8:	8952      	ldrh	r2, [r2, #10]
 800f9da:	fbb3 f3f2 	udiv	r3, r3, r2
 800f9de:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f9e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d101      	bne.n	800f9ea <find_volume+0x2ca>
 800f9e6:	230d      	movs	r3, #13
 800f9e8:	e0db      	b.n	800fba2 <find_volume+0x482>
		fmt = FS_FAT32;
 800f9ea:	2303      	movs	r3, #3
 800f9ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9f2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800f9f6:	4293      	cmp	r3, r2
 800f9f8:	d802      	bhi.n	800fa00 <find_volume+0x2e0>
 800f9fa:	2302      	movs	r3, #2
 800f9fc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fa00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa02:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800fa06:	4293      	cmp	r3, r2
 800fa08:	d802      	bhi.n	800fa10 <find_volume+0x2f0>
 800fa0a:	2301      	movs	r3, #1
 800fa0c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fa10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa12:	1c9a      	adds	r2, r3, #2
 800fa14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa16:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800fa18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa1a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fa1c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fa1e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800fa20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa22:	441a      	add	r2, r3
 800fa24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa26:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800fa28:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fa2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa2c:	441a      	add	r2, r3
 800fa2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa30:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800fa32:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fa36:	2b03      	cmp	r3, #3
 800fa38:	d11e      	bne.n	800fa78 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fa3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa3c:	3330      	adds	r3, #48	@ 0x30
 800fa3e:	332a      	adds	r3, #42	@ 0x2a
 800fa40:	4618      	mov	r0, r3
 800fa42:	f7fe fc53 	bl	800e2ec <ld_word>
 800fa46:	4603      	mov	r3, r0
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d001      	beq.n	800fa50 <find_volume+0x330>
 800fa4c:	230d      	movs	r3, #13
 800fa4e:	e0a8      	b.n	800fba2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800fa50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa52:	891b      	ldrh	r3, [r3, #8]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d001      	beq.n	800fa5c <find_volume+0x33c>
 800fa58:	230d      	movs	r3, #13
 800fa5a:	e0a2      	b.n	800fba2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800fa5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa5e:	3330      	adds	r3, #48	@ 0x30
 800fa60:	332c      	adds	r3, #44	@ 0x2c
 800fa62:	4618      	mov	r0, r3
 800fa64:	f7fe fc5a 	bl	800e31c <ld_dword>
 800fa68:	4602      	mov	r2, r0
 800fa6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa6c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800fa6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa70:	695b      	ldr	r3, [r3, #20]
 800fa72:	009b      	lsls	r3, r3, #2
 800fa74:	647b      	str	r3, [r7, #68]	@ 0x44
 800fa76:	e01f      	b.n	800fab8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800fa78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa7a:	891b      	ldrh	r3, [r3, #8]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d101      	bne.n	800fa84 <find_volume+0x364>
 800fa80:	230d      	movs	r3, #13
 800fa82:	e08e      	b.n	800fba2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800fa84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa86:	6a1a      	ldr	r2, [r3, #32]
 800fa88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fa8a:	441a      	add	r2, r3
 800fa8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa8e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800fa90:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fa94:	2b02      	cmp	r3, #2
 800fa96:	d103      	bne.n	800faa0 <find_volume+0x380>
 800fa98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa9a:	695b      	ldr	r3, [r3, #20]
 800fa9c:	005b      	lsls	r3, r3, #1
 800fa9e:	e00a      	b.n	800fab6 <find_volume+0x396>
 800faa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faa2:	695a      	ldr	r2, [r3, #20]
 800faa4:	4613      	mov	r3, r2
 800faa6:	005b      	lsls	r3, r3, #1
 800faa8:	4413      	add	r3, r2
 800faaa:	085a      	lsrs	r2, r3, #1
 800faac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faae:	695b      	ldr	r3, [r3, #20]
 800fab0:	f003 0301 	and.w	r3, r3, #1
 800fab4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800fab6:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800fab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faba:	699a      	ldr	r2, [r3, #24]
 800fabc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fabe:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800fac2:	0a5b      	lsrs	r3, r3, #9
 800fac4:	429a      	cmp	r2, r3
 800fac6:	d201      	bcs.n	800facc <find_volume+0x3ac>
 800fac8:	230d      	movs	r3, #13
 800faca:	e06a      	b.n	800fba2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800facc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800face:	f04f 32ff 	mov.w	r2, #4294967295
 800fad2:	611a      	str	r2, [r3, #16]
 800fad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fad6:	691a      	ldr	r2, [r3, #16]
 800fad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fada:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800fadc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fade:	2280      	movs	r2, #128	@ 0x80
 800fae0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800fae2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fae6:	2b03      	cmp	r3, #3
 800fae8:	d149      	bne.n	800fb7e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800faea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faec:	3330      	adds	r3, #48	@ 0x30
 800faee:	3330      	adds	r3, #48	@ 0x30
 800faf0:	4618      	mov	r0, r3
 800faf2:	f7fe fbfb 	bl	800e2ec <ld_word>
 800faf6:	4603      	mov	r3, r0
 800faf8:	2b01      	cmp	r3, #1
 800fafa:	d140      	bne.n	800fb7e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800fafc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fafe:	3301      	adds	r3, #1
 800fb00:	4619      	mov	r1, r3
 800fb02:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fb04:	f7fe fea2 	bl	800e84c <move_window>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d137      	bne.n	800fb7e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800fb0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb10:	2200      	movs	r2, #0
 800fb12:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fb14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb16:	3330      	adds	r3, #48	@ 0x30
 800fb18:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f7fe fbe5 	bl	800e2ec <ld_word>
 800fb22:	4603      	mov	r3, r0
 800fb24:	461a      	mov	r2, r3
 800fb26:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800fb2a:	429a      	cmp	r2, r3
 800fb2c:	d127      	bne.n	800fb7e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800fb2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb30:	3330      	adds	r3, #48	@ 0x30
 800fb32:	4618      	mov	r0, r3
 800fb34:	f7fe fbf2 	bl	800e31c <ld_dword>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	4a1c      	ldr	r2, [pc, #112]	@ (800fbac <find_volume+0x48c>)
 800fb3c:	4293      	cmp	r3, r2
 800fb3e:	d11e      	bne.n	800fb7e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800fb40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb42:	3330      	adds	r3, #48	@ 0x30
 800fb44:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800fb48:	4618      	mov	r0, r3
 800fb4a:	f7fe fbe7 	bl	800e31c <ld_dword>
 800fb4e:	4603      	mov	r3, r0
 800fb50:	4a17      	ldr	r2, [pc, #92]	@ (800fbb0 <find_volume+0x490>)
 800fb52:	4293      	cmp	r3, r2
 800fb54:	d113      	bne.n	800fb7e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800fb56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb58:	3330      	adds	r3, #48	@ 0x30
 800fb5a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f7fe fbdc 	bl	800e31c <ld_dword>
 800fb64:	4602      	mov	r2, r0
 800fb66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb68:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800fb6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb6c:	3330      	adds	r3, #48	@ 0x30
 800fb6e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800fb72:	4618      	mov	r0, r3
 800fb74:	f7fe fbd2 	bl	800e31c <ld_dword>
 800fb78:	4602      	mov	r2, r0
 800fb7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb7c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800fb7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb80:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800fb84:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800fb86:	4b0b      	ldr	r3, [pc, #44]	@ (800fbb4 <find_volume+0x494>)
 800fb88:	881b      	ldrh	r3, [r3, #0]
 800fb8a:	3301      	adds	r3, #1
 800fb8c:	b29a      	uxth	r2, r3
 800fb8e:	4b09      	ldr	r3, [pc, #36]	@ (800fbb4 <find_volume+0x494>)
 800fb90:	801a      	strh	r2, [r3, #0]
 800fb92:	4b08      	ldr	r3, [pc, #32]	@ (800fbb4 <find_volume+0x494>)
 800fb94:	881a      	ldrh	r2, [r3, #0]
 800fb96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb98:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800fb9a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fb9c:	f7fe fdee 	bl	800e77c <clear_lock>
#endif
	return FR_OK;
 800fba0:	2300      	movs	r3, #0
}
 800fba2:	4618      	mov	r0, r3
 800fba4:	3758      	adds	r7, #88	@ 0x58
 800fba6:	46bd      	mov	sp, r7
 800fba8:	bd80      	pop	{r7, pc}
 800fbaa:	bf00      	nop
 800fbac:	41615252 	.word	0x41615252
 800fbb0:	61417272 	.word	0x61417272
 800fbb4:	24000c00 	.word	0x24000c00

0800fbb8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b084      	sub	sp, #16
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
 800fbc0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800fbc2:	2309      	movs	r3, #9
 800fbc4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d01c      	beq.n	800fc06 <validate+0x4e>
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d018      	beq.n	800fc06 <validate+0x4e>
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	781b      	ldrb	r3, [r3, #0]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d013      	beq.n	800fc06 <validate+0x4e>
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	889a      	ldrh	r2, [r3, #4]
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	88db      	ldrh	r3, [r3, #6]
 800fbe8:	429a      	cmp	r2, r3
 800fbea:	d10c      	bne.n	800fc06 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	785b      	ldrb	r3, [r3, #1]
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f7fe fada 	bl	800e1ac <disk_status>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	f003 0301 	and.w	r3, r3, #1
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d101      	bne.n	800fc06 <validate+0x4e>
			res = FR_OK;
 800fc02:	2300      	movs	r3, #0
 800fc04:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800fc06:	7bfb      	ldrb	r3, [r7, #15]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d102      	bne.n	800fc12 <validate+0x5a>
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	e000      	b.n	800fc14 <validate+0x5c>
 800fc12:	2300      	movs	r3, #0
 800fc14:	683a      	ldr	r2, [r7, #0]
 800fc16:	6013      	str	r3, [r2, #0]
	return res;
 800fc18:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	3710      	adds	r7, #16
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}
	...

0800fc24 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b088      	sub	sp, #32
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	60f8      	str	r0, [r7, #12]
 800fc2c:	60b9      	str	r1, [r7, #8]
 800fc2e:	4613      	mov	r3, r2
 800fc30:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800fc32:	68bb      	ldr	r3, [r7, #8]
 800fc34:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800fc36:	f107 0310 	add.w	r3, r7, #16
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	f7ff fcd5 	bl	800f5ea <get_ldnumber>
 800fc40:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800fc42:	69fb      	ldr	r3, [r7, #28]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	da01      	bge.n	800fc4c <f_mount+0x28>
 800fc48:	230b      	movs	r3, #11
 800fc4a:	e02b      	b.n	800fca4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fc4c:	4a17      	ldr	r2, [pc, #92]	@ (800fcac <f_mount+0x88>)
 800fc4e:	69fb      	ldr	r3, [r7, #28]
 800fc50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc54:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fc56:	69bb      	ldr	r3, [r7, #24]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d005      	beq.n	800fc68 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800fc5c:	69b8      	ldr	r0, [r7, #24]
 800fc5e:	f7fe fd8d 	bl	800e77c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fc62:	69bb      	ldr	r3, [r7, #24]
 800fc64:	2200      	movs	r2, #0
 800fc66:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d002      	beq.n	800fc74 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	2200      	movs	r2, #0
 800fc72:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fc74:	68fa      	ldr	r2, [r7, #12]
 800fc76:	490d      	ldr	r1, [pc, #52]	@ (800fcac <f_mount+0x88>)
 800fc78:	69fb      	ldr	r3, [r7, #28]
 800fc7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d002      	beq.n	800fc8a <f_mount+0x66>
 800fc84:	79fb      	ldrb	r3, [r7, #7]
 800fc86:	2b01      	cmp	r3, #1
 800fc88:	d001      	beq.n	800fc8e <f_mount+0x6a>
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	e00a      	b.n	800fca4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800fc8e:	f107 010c 	add.w	r1, r7, #12
 800fc92:	f107 0308 	add.w	r3, r7, #8
 800fc96:	2200      	movs	r2, #0
 800fc98:	4618      	mov	r0, r3
 800fc9a:	f7ff fd41 	bl	800f720 <find_volume>
 800fc9e:	4603      	mov	r3, r0
 800fca0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fca2:	7dfb      	ldrb	r3, [r7, #23]
}
 800fca4:	4618      	mov	r0, r3
 800fca6:	3720      	adds	r7, #32
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	bd80      	pop	{r7, pc}
 800fcac:	24000bfc 	.word	0x24000bfc

0800fcb0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b098      	sub	sp, #96	@ 0x60
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	60f8      	str	r0, [r7, #12]
 800fcb8:	60b9      	str	r1, [r7, #8]
 800fcba:	4613      	mov	r3, r2
 800fcbc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d101      	bne.n	800fcc8 <f_open+0x18>
 800fcc4:	2309      	movs	r3, #9
 800fcc6:	e1a9      	b.n	801001c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800fcc8:	79fb      	ldrb	r3, [r7, #7]
 800fcca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fcce:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800fcd0:	79fa      	ldrb	r2, [r7, #7]
 800fcd2:	f107 0110 	add.w	r1, r7, #16
 800fcd6:	f107 0308 	add.w	r3, r7, #8
 800fcda:	4618      	mov	r0, r3
 800fcdc:	f7ff fd20 	bl	800f720 <find_volume>
 800fce0:	4603      	mov	r3, r0
 800fce2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800fce6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	f040 818d 	bne.w	801000a <f_open+0x35a>
		dj.obj.fs = fs;
 800fcf0:	693b      	ldr	r3, [r7, #16]
 800fcf2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800fcf4:	68ba      	ldr	r2, [r7, #8]
 800fcf6:	f107 0314 	add.w	r3, r7, #20
 800fcfa:	4611      	mov	r1, r2
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f7ff fc03 	bl	800f508 <follow_path>
 800fd02:	4603      	mov	r3, r0
 800fd04:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fd08:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d118      	bne.n	800fd42 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800fd10:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fd14:	b25b      	sxtb	r3, r3
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	da03      	bge.n	800fd22 <f_open+0x72>
				res = FR_INVALID_NAME;
 800fd1a:	2306      	movs	r3, #6
 800fd1c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800fd20:	e00f      	b.n	800fd42 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fd22:	79fb      	ldrb	r3, [r7, #7]
 800fd24:	2b01      	cmp	r3, #1
 800fd26:	bf8c      	ite	hi
 800fd28:	2301      	movhi	r3, #1
 800fd2a:	2300      	movls	r3, #0
 800fd2c:	b2db      	uxtb	r3, r3
 800fd2e:	461a      	mov	r2, r3
 800fd30:	f107 0314 	add.w	r3, r7, #20
 800fd34:	4611      	mov	r1, r2
 800fd36:	4618      	mov	r0, r3
 800fd38:	f7fe fbd8 	bl	800e4ec <chk_lock>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800fd42:	79fb      	ldrb	r3, [r7, #7]
 800fd44:	f003 031c 	and.w	r3, r3, #28
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d07f      	beq.n	800fe4c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800fd4c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d017      	beq.n	800fd84 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800fd54:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fd58:	2b04      	cmp	r3, #4
 800fd5a:	d10e      	bne.n	800fd7a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fd5c:	f7fe fc22 	bl	800e5a4 <enq_lock>
 800fd60:	4603      	mov	r3, r0
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d006      	beq.n	800fd74 <f_open+0xc4>
 800fd66:	f107 0314 	add.w	r3, r7, #20
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f7ff fb06 	bl	800f37c <dir_register>
 800fd70:	4603      	mov	r3, r0
 800fd72:	e000      	b.n	800fd76 <f_open+0xc6>
 800fd74:	2312      	movs	r3, #18
 800fd76:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800fd7a:	79fb      	ldrb	r3, [r7, #7]
 800fd7c:	f043 0308 	orr.w	r3, r3, #8
 800fd80:	71fb      	strb	r3, [r7, #7]
 800fd82:	e010      	b.n	800fda6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fd84:	7ebb      	ldrb	r3, [r7, #26]
 800fd86:	f003 0311 	and.w	r3, r3, #17
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d003      	beq.n	800fd96 <f_open+0xe6>
					res = FR_DENIED;
 800fd8e:	2307      	movs	r3, #7
 800fd90:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800fd94:	e007      	b.n	800fda6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800fd96:	79fb      	ldrb	r3, [r7, #7]
 800fd98:	f003 0304 	and.w	r3, r3, #4
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d002      	beq.n	800fda6 <f_open+0xf6>
 800fda0:	2308      	movs	r3, #8
 800fda2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fda6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d168      	bne.n	800fe80 <f_open+0x1d0>
 800fdae:	79fb      	ldrb	r3, [r7, #7]
 800fdb0:	f003 0308 	and.w	r3, r3, #8
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d063      	beq.n	800fe80 <f_open+0x1d0>
				dw = GET_FATTIME();
 800fdb8:	f7fd ff6c 	bl	800dc94 <get_fattime>
 800fdbc:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800fdbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdc0:	330e      	adds	r3, #14
 800fdc2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	f7fe fae7 	bl	800e398 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800fdca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdcc:	3316      	adds	r3, #22
 800fdce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	f7fe fae1 	bl	800e398 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800fdd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdd8:	330b      	adds	r3, #11
 800fdda:	2220      	movs	r2, #32
 800fddc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fdde:	693b      	ldr	r3, [r7, #16]
 800fde0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fde2:	4611      	mov	r1, r2
 800fde4:	4618      	mov	r0, r3
 800fde6:	f7ff fa35 	bl	800f254 <ld_clust>
 800fdea:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800fdec:	693b      	ldr	r3, [r7, #16]
 800fdee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	f7ff fa4d 	bl	800f292 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800fdf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdfa:	331c      	adds	r3, #28
 800fdfc:	2100      	movs	r1, #0
 800fdfe:	4618      	mov	r0, r3
 800fe00:	f7fe faca 	bl	800e398 <st_dword>
					fs->wflag = 1;
 800fe04:	693b      	ldr	r3, [r7, #16]
 800fe06:	2201      	movs	r2, #1
 800fe08:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800fe0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d037      	beq.n	800fe80 <f_open+0x1d0>
						dw = fs->winsect;
 800fe10:	693b      	ldr	r3, [r7, #16]
 800fe12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe14:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800fe16:	f107 0314 	add.w	r3, r7, #20
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800fe1e:	4618      	mov	r0, r3
 800fe20:	f7fe ff60 	bl	800ece4 <remove_chain>
 800fe24:	4603      	mov	r3, r0
 800fe26:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800fe2a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d126      	bne.n	800fe80 <f_open+0x1d0>
							res = move_window(fs, dw);
 800fe32:	693b      	ldr	r3, [r7, #16]
 800fe34:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fe36:	4618      	mov	r0, r3
 800fe38:	f7fe fd08 	bl	800e84c <move_window>
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800fe42:	693b      	ldr	r3, [r7, #16]
 800fe44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fe46:	3a01      	subs	r2, #1
 800fe48:	60da      	str	r2, [r3, #12]
 800fe4a:	e019      	b.n	800fe80 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800fe4c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d115      	bne.n	800fe80 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800fe54:	7ebb      	ldrb	r3, [r7, #26]
 800fe56:	f003 0310 	and.w	r3, r3, #16
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d003      	beq.n	800fe66 <f_open+0x1b6>
					res = FR_NO_FILE;
 800fe5e:	2304      	movs	r3, #4
 800fe60:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800fe64:	e00c      	b.n	800fe80 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800fe66:	79fb      	ldrb	r3, [r7, #7]
 800fe68:	f003 0302 	and.w	r3, r3, #2
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d007      	beq.n	800fe80 <f_open+0x1d0>
 800fe70:	7ebb      	ldrb	r3, [r7, #26]
 800fe72:	f003 0301 	and.w	r3, r3, #1
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d002      	beq.n	800fe80 <f_open+0x1d0>
						res = FR_DENIED;
 800fe7a:	2307      	movs	r3, #7
 800fe7c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800fe80:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d126      	bne.n	800fed6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fe88:	79fb      	ldrb	r3, [r7, #7]
 800fe8a:	f003 0308 	and.w	r3, r3, #8
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d003      	beq.n	800fe9a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800fe92:	79fb      	ldrb	r3, [r7, #7]
 800fe94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe98:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fe9a:	693b      	ldr	r3, [r7, #16]
 800fe9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800fea2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fea8:	79fb      	ldrb	r3, [r7, #7]
 800feaa:	2b01      	cmp	r3, #1
 800feac:	bf8c      	ite	hi
 800feae:	2301      	movhi	r3, #1
 800feb0:	2300      	movls	r3, #0
 800feb2:	b2db      	uxtb	r3, r3
 800feb4:	461a      	mov	r2, r3
 800feb6:	f107 0314 	add.w	r3, r7, #20
 800feba:	4611      	mov	r1, r2
 800febc:	4618      	mov	r0, r3
 800febe:	f7fe fb93 	bl	800e5e8 <inc_lock>
 800fec2:	4602      	mov	r2, r0
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	691b      	ldr	r3, [r3, #16]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d102      	bne.n	800fed6 <f_open+0x226>
 800fed0:	2302      	movs	r3, #2
 800fed2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800fed6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800feda:	2b00      	cmp	r3, #0
 800fedc:	f040 8095 	bne.w	801000a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800fee0:	693b      	ldr	r3, [r7, #16]
 800fee2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fee4:	4611      	mov	r1, r2
 800fee6:	4618      	mov	r0, r3
 800fee8:	f7ff f9b4 	bl	800f254 <ld_clust>
 800feec:	4602      	mov	r2, r0
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800fef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fef4:	331c      	adds	r3, #28
 800fef6:	4618      	mov	r0, r3
 800fef8:	f7fe fa10 	bl	800e31c <ld_dword>
 800fefc:	4602      	mov	r2, r0
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	2200      	movs	r2, #0
 800ff06:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ff08:	693a      	ldr	r2, [r7, #16]
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ff0e:	693b      	ldr	r3, [r7, #16]
 800ff10:	88da      	ldrh	r2, [r3, #6]
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	79fa      	ldrb	r2, [r7, #7]
 800ff1a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	2200      	movs	r2, #0
 800ff20:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	2200      	movs	r2, #0
 800ff26:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	3330      	adds	r3, #48	@ 0x30
 800ff32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ff36:	2100      	movs	r1, #0
 800ff38:	4618      	mov	r0, r3
 800ff3a:	f7fe fa7a 	bl	800e432 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ff3e:	79fb      	ldrb	r3, [r7, #7]
 800ff40:	f003 0320 	and.w	r3, r3, #32
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d060      	beq.n	801000a <f_open+0x35a>
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	68db      	ldr	r3, [r3, #12]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d05c      	beq.n	801000a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	68da      	ldr	r2, [r3, #12]
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ff58:	693b      	ldr	r3, [r7, #16]
 800ff5a:	895b      	ldrh	r3, [r3, #10]
 800ff5c:	025b      	lsls	r3, r3, #9
 800ff5e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	689b      	ldr	r3, [r3, #8]
 800ff64:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	68db      	ldr	r3, [r3, #12]
 800ff6a:	657b      	str	r3, [r7, #84]	@ 0x54
 800ff6c:	e016      	b.n	800ff9c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ff72:	4618      	mov	r0, r3
 800ff74:	f7fe fd25 	bl	800e9c2 <get_fat>
 800ff78:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ff7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ff7c:	2b01      	cmp	r3, #1
 800ff7e:	d802      	bhi.n	800ff86 <f_open+0x2d6>
 800ff80:	2302      	movs	r3, #2
 800ff82:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ff86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ff88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff8c:	d102      	bne.n	800ff94 <f_open+0x2e4>
 800ff8e:	2301      	movs	r3, #1
 800ff90:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ff94:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ff96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ff98:	1ad3      	subs	r3, r2, r3
 800ff9a:	657b      	str	r3, [r7, #84]	@ 0x54
 800ff9c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d103      	bne.n	800ffac <f_open+0x2fc>
 800ffa4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ffa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ffa8:	429a      	cmp	r2, r3
 800ffaa:	d8e0      	bhi.n	800ff6e <f_open+0x2be>
				}
				fp->clust = clst;
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ffb0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ffb2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d127      	bne.n	801000a <f_open+0x35a>
 800ffba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ffbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d022      	beq.n	801000a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ffc4:	693b      	ldr	r3, [r7, #16]
 800ffc6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ffc8:	4618      	mov	r0, r3
 800ffca:	f7fe fcdb 	bl	800e984 <clust2sect>
 800ffce:	6478      	str	r0, [r7, #68]	@ 0x44
 800ffd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d103      	bne.n	800ffde <f_open+0x32e>
						res = FR_INT_ERR;
 800ffd6:	2302      	movs	r3, #2
 800ffd8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ffdc:	e015      	b.n	801000a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ffde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ffe0:	0a5a      	lsrs	r2, r3, #9
 800ffe2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ffe4:	441a      	add	r2, r3
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ffea:	693b      	ldr	r3, [r7, #16]
 800ffec:	7858      	ldrb	r0, [r3, #1]
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	6a1a      	ldr	r2, [r3, #32]
 800fff8:	2301      	movs	r3, #1
 800fffa:	f7fe f919 	bl	800e230 <disk_read>
 800fffe:	4603      	mov	r3, r0
 8010000:	2b00      	cmp	r3, #0
 8010002:	d002      	beq.n	801000a <f_open+0x35a>
 8010004:	2301      	movs	r3, #1
 8010006:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801000a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801000e:	2b00      	cmp	r3, #0
 8010010:	d002      	beq.n	8010018 <f_open+0x368>
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	2200      	movs	r2, #0
 8010016:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010018:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 801001c:	4618      	mov	r0, r3
 801001e:	3760      	adds	r7, #96	@ 0x60
 8010020:	46bd      	mov	sp, r7
 8010022:	bd80      	pop	{r7, pc}

08010024 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b08e      	sub	sp, #56	@ 0x38
 8010028:	af00      	add	r7, sp, #0
 801002a:	60f8      	str	r0, [r7, #12]
 801002c:	60b9      	str	r1, [r7, #8]
 801002e:	607a      	str	r2, [r7, #4]
 8010030:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8010032:	68bb      	ldr	r3, [r7, #8]
 8010034:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8010036:	683b      	ldr	r3, [r7, #0]
 8010038:	2200      	movs	r2, #0
 801003a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	f107 0214 	add.w	r2, r7, #20
 8010042:	4611      	mov	r1, r2
 8010044:	4618      	mov	r0, r3
 8010046:	f7ff fdb7 	bl	800fbb8 <validate>
 801004a:	4603      	mov	r3, r0
 801004c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010050:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010054:	2b00      	cmp	r3, #0
 8010056:	d107      	bne.n	8010068 <f_read+0x44>
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	7d5b      	ldrb	r3, [r3, #21]
 801005c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8010060:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010064:	2b00      	cmp	r3, #0
 8010066:	d002      	beq.n	801006e <f_read+0x4a>
 8010068:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801006c:	e115      	b.n	801029a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	7d1b      	ldrb	r3, [r3, #20]
 8010072:	f003 0301 	and.w	r3, r3, #1
 8010076:	2b00      	cmp	r3, #0
 8010078:	d101      	bne.n	801007e <f_read+0x5a>
 801007a:	2307      	movs	r3, #7
 801007c:	e10d      	b.n	801029a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	68da      	ldr	r2, [r3, #12]
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	699b      	ldr	r3, [r3, #24]
 8010086:	1ad3      	subs	r3, r2, r3
 8010088:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801008a:	687a      	ldr	r2, [r7, #4]
 801008c:	6a3b      	ldr	r3, [r7, #32]
 801008e:	429a      	cmp	r2, r3
 8010090:	f240 80fe 	bls.w	8010290 <f_read+0x26c>
 8010094:	6a3b      	ldr	r3, [r7, #32]
 8010096:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8010098:	e0fa      	b.n	8010290 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	699b      	ldr	r3, [r3, #24]
 801009e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	f040 80c6 	bne.w	8010234 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	699b      	ldr	r3, [r3, #24]
 80100ac:	0a5b      	lsrs	r3, r3, #9
 80100ae:	697a      	ldr	r2, [r7, #20]
 80100b0:	8952      	ldrh	r2, [r2, #10]
 80100b2:	3a01      	subs	r2, #1
 80100b4:	4013      	ands	r3, r2
 80100b6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80100b8:	69fb      	ldr	r3, [r7, #28]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d12f      	bne.n	801011e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	699b      	ldr	r3, [r3, #24]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d103      	bne.n	80100ce <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	689b      	ldr	r3, [r3, #8]
 80100ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80100cc:	e013      	b.n	80100f6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d007      	beq.n	80100e6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	699b      	ldr	r3, [r3, #24]
 80100da:	4619      	mov	r1, r3
 80100dc:	68f8      	ldr	r0, [r7, #12]
 80100de:	f7fe fefe 	bl	800eede <clmt_clust>
 80100e2:	6338      	str	r0, [r7, #48]	@ 0x30
 80100e4:	e007      	b.n	80100f6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80100e6:	68fa      	ldr	r2, [r7, #12]
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	69db      	ldr	r3, [r3, #28]
 80100ec:	4619      	mov	r1, r3
 80100ee:	4610      	mov	r0, r2
 80100f0:	f7fe fc67 	bl	800e9c2 <get_fat>
 80100f4:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80100f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100f8:	2b01      	cmp	r3, #1
 80100fa:	d804      	bhi.n	8010106 <f_read+0xe2>
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	2202      	movs	r2, #2
 8010100:	755a      	strb	r2, [r3, #21]
 8010102:	2302      	movs	r3, #2
 8010104:	e0c9      	b.n	801029a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010108:	f1b3 3fff 	cmp.w	r3, #4294967295
 801010c:	d104      	bne.n	8010118 <f_read+0xf4>
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	2201      	movs	r2, #1
 8010112:	755a      	strb	r2, [r3, #21]
 8010114:	2301      	movs	r3, #1
 8010116:	e0c0      	b.n	801029a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801011c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801011e:	697a      	ldr	r2, [r7, #20]
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	69db      	ldr	r3, [r3, #28]
 8010124:	4619      	mov	r1, r3
 8010126:	4610      	mov	r0, r2
 8010128:	f7fe fc2c 	bl	800e984 <clust2sect>
 801012c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801012e:	69bb      	ldr	r3, [r7, #24]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d104      	bne.n	801013e <f_read+0x11a>
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	2202      	movs	r2, #2
 8010138:	755a      	strb	r2, [r3, #21]
 801013a:	2302      	movs	r3, #2
 801013c:	e0ad      	b.n	801029a <f_read+0x276>
			sect += csect;
 801013e:	69ba      	ldr	r2, [r7, #24]
 8010140:	69fb      	ldr	r3, [r7, #28]
 8010142:	4413      	add	r3, r2
 8010144:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	0a5b      	lsrs	r3, r3, #9
 801014a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801014c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801014e:	2b00      	cmp	r3, #0
 8010150:	d039      	beq.n	80101c6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010152:	69fa      	ldr	r2, [r7, #28]
 8010154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010156:	4413      	add	r3, r2
 8010158:	697a      	ldr	r2, [r7, #20]
 801015a:	8952      	ldrh	r2, [r2, #10]
 801015c:	4293      	cmp	r3, r2
 801015e:	d905      	bls.n	801016c <f_read+0x148>
					cc = fs->csize - csect;
 8010160:	697b      	ldr	r3, [r7, #20]
 8010162:	895b      	ldrh	r3, [r3, #10]
 8010164:	461a      	mov	r2, r3
 8010166:	69fb      	ldr	r3, [r7, #28]
 8010168:	1ad3      	subs	r3, r2, r3
 801016a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801016c:	697b      	ldr	r3, [r7, #20]
 801016e:	7858      	ldrb	r0, [r3, #1]
 8010170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010172:	69ba      	ldr	r2, [r7, #24]
 8010174:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010176:	f7fe f85b 	bl	800e230 <disk_read>
 801017a:	4603      	mov	r3, r0
 801017c:	2b00      	cmp	r3, #0
 801017e:	d004      	beq.n	801018a <f_read+0x166>
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	2201      	movs	r2, #1
 8010184:	755a      	strb	r2, [r3, #21]
 8010186:	2301      	movs	r3, #1
 8010188:	e087      	b.n	801029a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	7d1b      	ldrb	r3, [r3, #20]
 801018e:	b25b      	sxtb	r3, r3
 8010190:	2b00      	cmp	r3, #0
 8010192:	da14      	bge.n	80101be <f_read+0x19a>
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	6a1a      	ldr	r2, [r3, #32]
 8010198:	69bb      	ldr	r3, [r7, #24]
 801019a:	1ad3      	subs	r3, r2, r3
 801019c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801019e:	429a      	cmp	r2, r3
 80101a0:	d90d      	bls.n	80101be <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	6a1a      	ldr	r2, [r3, #32]
 80101a6:	69bb      	ldr	r3, [r7, #24]
 80101a8:	1ad3      	subs	r3, r2, r3
 80101aa:	025b      	lsls	r3, r3, #9
 80101ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80101ae:	18d0      	adds	r0, r2, r3
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	3330      	adds	r3, #48	@ 0x30
 80101b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80101b8:	4619      	mov	r1, r3
 80101ba:	f7fe f919 	bl	800e3f0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80101be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101c0:	025b      	lsls	r3, r3, #9
 80101c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80101c4:	e050      	b.n	8010268 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	6a1b      	ldr	r3, [r3, #32]
 80101ca:	69ba      	ldr	r2, [r7, #24]
 80101cc:	429a      	cmp	r2, r3
 80101ce:	d02e      	beq.n	801022e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	7d1b      	ldrb	r3, [r3, #20]
 80101d4:	b25b      	sxtb	r3, r3
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	da18      	bge.n	801020c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80101da:	697b      	ldr	r3, [r7, #20]
 80101dc:	7858      	ldrb	r0, [r3, #1]
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	6a1a      	ldr	r2, [r3, #32]
 80101e8:	2301      	movs	r3, #1
 80101ea:	f7fe f841 	bl	800e270 <disk_write>
 80101ee:	4603      	mov	r3, r0
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d004      	beq.n	80101fe <f_read+0x1da>
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	2201      	movs	r2, #1
 80101f8:	755a      	strb	r2, [r3, #21]
 80101fa:	2301      	movs	r3, #1
 80101fc:	e04d      	b.n	801029a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	7d1b      	ldrb	r3, [r3, #20]
 8010202:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010206:	b2da      	uxtb	r2, r3
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801020c:	697b      	ldr	r3, [r7, #20]
 801020e:	7858      	ldrb	r0, [r3, #1]
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010216:	2301      	movs	r3, #1
 8010218:	69ba      	ldr	r2, [r7, #24]
 801021a:	f7fe f809 	bl	800e230 <disk_read>
 801021e:	4603      	mov	r3, r0
 8010220:	2b00      	cmp	r3, #0
 8010222:	d004      	beq.n	801022e <f_read+0x20a>
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	2201      	movs	r2, #1
 8010228:	755a      	strb	r2, [r3, #21]
 801022a:	2301      	movs	r3, #1
 801022c:	e035      	b.n	801029a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	69ba      	ldr	r2, [r7, #24]
 8010232:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	699b      	ldr	r3, [r3, #24]
 8010238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801023c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8010240:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8010242:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	429a      	cmp	r2, r3
 8010248:	d901      	bls.n	801024e <f_read+0x22a>
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	699b      	ldr	r3, [r3, #24]
 8010258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801025c:	4413      	add	r3, r2
 801025e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010260:	4619      	mov	r1, r3
 8010262:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010264:	f7fe f8c4 	bl	800e3f0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010268:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801026a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801026c:	4413      	add	r3, r2
 801026e:	627b      	str	r3, [r7, #36]	@ 0x24
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	699a      	ldr	r2, [r3, #24]
 8010274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010276:	441a      	add	r2, r3
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	619a      	str	r2, [r3, #24]
 801027c:	683b      	ldr	r3, [r7, #0]
 801027e:	681a      	ldr	r2, [r3, #0]
 8010280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010282:	441a      	add	r2, r3
 8010284:	683b      	ldr	r3, [r7, #0]
 8010286:	601a      	str	r2, [r3, #0]
 8010288:	687a      	ldr	r2, [r7, #4]
 801028a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801028c:	1ad3      	subs	r3, r2, r3
 801028e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	2b00      	cmp	r3, #0
 8010294:	f47f af01 	bne.w	801009a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010298:	2300      	movs	r3, #0
}
 801029a:	4618      	mov	r0, r3
 801029c:	3738      	adds	r7, #56	@ 0x38
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd80      	pop	{r7, pc}

080102a2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80102a2:	b580      	push	{r7, lr}
 80102a4:	b086      	sub	sp, #24
 80102a6:	af00      	add	r7, sp, #0
 80102a8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	f107 0208 	add.w	r2, r7, #8
 80102b0:	4611      	mov	r1, r2
 80102b2:	4618      	mov	r0, r3
 80102b4:	f7ff fc80 	bl	800fbb8 <validate>
 80102b8:	4603      	mov	r3, r0
 80102ba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80102bc:	7dfb      	ldrb	r3, [r7, #23]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d168      	bne.n	8010394 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	7d1b      	ldrb	r3, [r3, #20]
 80102c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d062      	beq.n	8010394 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	7d1b      	ldrb	r3, [r3, #20]
 80102d2:	b25b      	sxtb	r3, r3
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	da15      	bge.n	8010304 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80102d8:	68bb      	ldr	r3, [r7, #8]
 80102da:	7858      	ldrb	r0, [r3, #1]
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	6a1a      	ldr	r2, [r3, #32]
 80102e6:	2301      	movs	r3, #1
 80102e8:	f7fd ffc2 	bl	800e270 <disk_write>
 80102ec:	4603      	mov	r3, r0
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d001      	beq.n	80102f6 <f_sync+0x54>
 80102f2:	2301      	movs	r3, #1
 80102f4:	e04f      	b.n	8010396 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	7d1b      	ldrb	r3, [r3, #20]
 80102fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80102fe:	b2da      	uxtb	r2, r3
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010304:	f7fd fcc6 	bl	800dc94 <get_fattime>
 8010308:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801030a:	68ba      	ldr	r2, [r7, #8]
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010310:	4619      	mov	r1, r3
 8010312:	4610      	mov	r0, r2
 8010314:	f7fe fa9a 	bl	800e84c <move_window>
 8010318:	4603      	mov	r3, r0
 801031a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801031c:	7dfb      	ldrb	r3, [r7, #23]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d138      	bne.n	8010394 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010326:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	330b      	adds	r3, #11
 801032c:	781a      	ldrb	r2, [r3, #0]
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	330b      	adds	r3, #11
 8010332:	f042 0220 	orr.w	r2, r2, #32
 8010336:	b2d2      	uxtb	r2, r2
 8010338:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	6818      	ldr	r0, [r3, #0]
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	689b      	ldr	r3, [r3, #8]
 8010342:	461a      	mov	r2, r3
 8010344:	68f9      	ldr	r1, [r7, #12]
 8010346:	f7fe ffa4 	bl	800f292 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	f103 021c 	add.w	r2, r3, #28
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	68db      	ldr	r3, [r3, #12]
 8010354:	4619      	mov	r1, r3
 8010356:	4610      	mov	r0, r2
 8010358:	f7fe f81e 	bl	800e398 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	3316      	adds	r3, #22
 8010360:	6939      	ldr	r1, [r7, #16]
 8010362:	4618      	mov	r0, r3
 8010364:	f7fe f818 	bl	800e398 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	3312      	adds	r3, #18
 801036c:	2100      	movs	r1, #0
 801036e:	4618      	mov	r0, r3
 8010370:	f7fd fff7 	bl	800e362 <st_word>
					fs->wflag = 1;
 8010374:	68bb      	ldr	r3, [r7, #8]
 8010376:	2201      	movs	r2, #1
 8010378:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801037a:	68bb      	ldr	r3, [r7, #8]
 801037c:	4618      	mov	r0, r3
 801037e:	f7fe fa93 	bl	800e8a8 <sync_fs>
 8010382:	4603      	mov	r3, r0
 8010384:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	7d1b      	ldrb	r3, [r3, #20]
 801038a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801038e:	b2da      	uxtb	r2, r3
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010394:	7dfb      	ldrb	r3, [r7, #23]
}
 8010396:	4618      	mov	r0, r3
 8010398:	3718      	adds	r7, #24
 801039a:	46bd      	mov	sp, r7
 801039c:	bd80      	pop	{r7, pc}

0801039e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801039e:	b580      	push	{r7, lr}
 80103a0:	b084      	sub	sp, #16
 80103a2:	af00      	add	r7, sp, #0
 80103a4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80103a6:	6878      	ldr	r0, [r7, #4]
 80103a8:	f7ff ff7b 	bl	80102a2 <f_sync>
 80103ac:	4603      	mov	r3, r0
 80103ae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80103b0:	7bfb      	ldrb	r3, [r7, #15]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d118      	bne.n	80103e8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	f107 0208 	add.w	r2, r7, #8
 80103bc:	4611      	mov	r1, r2
 80103be:	4618      	mov	r0, r3
 80103c0:	f7ff fbfa 	bl	800fbb8 <validate>
 80103c4:	4603      	mov	r3, r0
 80103c6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80103c8:	7bfb      	ldrb	r3, [r7, #15]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d10c      	bne.n	80103e8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	691b      	ldr	r3, [r3, #16]
 80103d2:	4618      	mov	r0, r3
 80103d4:	f7fe f996 	bl	800e704 <dec_lock>
 80103d8:	4603      	mov	r3, r0
 80103da:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80103dc:	7bfb      	ldrb	r3, [r7, #15]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d102      	bne.n	80103e8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	2200      	movs	r2, #0
 80103e6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80103e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80103ea:	4618      	mov	r0, r3
 80103ec:	3710      	adds	r7, #16
 80103ee:	46bd      	mov	sp, r7
 80103f0:	bd80      	pop	{r7, pc}
	...

080103f4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80103f4:	b480      	push	{r7}
 80103f6:	b087      	sub	sp, #28
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	60f8      	str	r0, [r7, #12]
 80103fc:	60b9      	str	r1, [r7, #8]
 80103fe:	4613      	mov	r3, r2
 8010400:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010402:	2301      	movs	r3, #1
 8010404:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010406:	2300      	movs	r3, #0
 8010408:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801040a:	4b1f      	ldr	r3, [pc, #124]	@ (8010488 <FATFS_LinkDriverEx+0x94>)
 801040c:	7a5b      	ldrb	r3, [r3, #9]
 801040e:	b2db      	uxtb	r3, r3
 8010410:	2b00      	cmp	r3, #0
 8010412:	d131      	bne.n	8010478 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010414:	4b1c      	ldr	r3, [pc, #112]	@ (8010488 <FATFS_LinkDriverEx+0x94>)
 8010416:	7a5b      	ldrb	r3, [r3, #9]
 8010418:	b2db      	uxtb	r3, r3
 801041a:	461a      	mov	r2, r3
 801041c:	4b1a      	ldr	r3, [pc, #104]	@ (8010488 <FATFS_LinkDriverEx+0x94>)
 801041e:	2100      	movs	r1, #0
 8010420:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010422:	4b19      	ldr	r3, [pc, #100]	@ (8010488 <FATFS_LinkDriverEx+0x94>)
 8010424:	7a5b      	ldrb	r3, [r3, #9]
 8010426:	b2db      	uxtb	r3, r3
 8010428:	4a17      	ldr	r2, [pc, #92]	@ (8010488 <FATFS_LinkDriverEx+0x94>)
 801042a:	009b      	lsls	r3, r3, #2
 801042c:	4413      	add	r3, r2
 801042e:	68fa      	ldr	r2, [r7, #12]
 8010430:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010432:	4b15      	ldr	r3, [pc, #84]	@ (8010488 <FATFS_LinkDriverEx+0x94>)
 8010434:	7a5b      	ldrb	r3, [r3, #9]
 8010436:	b2db      	uxtb	r3, r3
 8010438:	461a      	mov	r2, r3
 801043a:	4b13      	ldr	r3, [pc, #76]	@ (8010488 <FATFS_LinkDriverEx+0x94>)
 801043c:	4413      	add	r3, r2
 801043e:	79fa      	ldrb	r2, [r7, #7]
 8010440:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010442:	4b11      	ldr	r3, [pc, #68]	@ (8010488 <FATFS_LinkDriverEx+0x94>)
 8010444:	7a5b      	ldrb	r3, [r3, #9]
 8010446:	b2db      	uxtb	r3, r3
 8010448:	1c5a      	adds	r2, r3, #1
 801044a:	b2d1      	uxtb	r1, r2
 801044c:	4a0e      	ldr	r2, [pc, #56]	@ (8010488 <FATFS_LinkDriverEx+0x94>)
 801044e:	7251      	strb	r1, [r2, #9]
 8010450:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010452:	7dbb      	ldrb	r3, [r7, #22]
 8010454:	3330      	adds	r3, #48	@ 0x30
 8010456:	b2da      	uxtb	r2, r3
 8010458:	68bb      	ldr	r3, [r7, #8]
 801045a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801045c:	68bb      	ldr	r3, [r7, #8]
 801045e:	3301      	adds	r3, #1
 8010460:	223a      	movs	r2, #58	@ 0x3a
 8010462:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010464:	68bb      	ldr	r3, [r7, #8]
 8010466:	3302      	adds	r3, #2
 8010468:	222f      	movs	r2, #47	@ 0x2f
 801046a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801046c:	68bb      	ldr	r3, [r7, #8]
 801046e:	3303      	adds	r3, #3
 8010470:	2200      	movs	r2, #0
 8010472:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010474:	2300      	movs	r3, #0
 8010476:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010478:	7dfb      	ldrb	r3, [r7, #23]
}
 801047a:	4618      	mov	r0, r3
 801047c:	371c      	adds	r7, #28
 801047e:	46bd      	mov	sp, r7
 8010480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010484:	4770      	bx	lr
 8010486:	bf00      	nop
 8010488:	24000c24 	.word	0x24000c24

0801048c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b082      	sub	sp, #8
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
 8010494:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010496:	2200      	movs	r2, #0
 8010498:	6839      	ldr	r1, [r7, #0]
 801049a:	6878      	ldr	r0, [r7, #4]
 801049c:	f7ff ffaa 	bl	80103f4 <FATFS_LinkDriverEx>
 80104a0:	4603      	mov	r3, r0
}
 80104a2:	4618      	mov	r0, r3
 80104a4:	3708      	adds	r7, #8
 80104a6:	46bd      	mov	sp, r7
 80104a8:	bd80      	pop	{r7, pc}

080104aa <_ZdlPvj>:
 80104aa:	f000 b99c 	b.w	80107e6 <_ZdlPv>

080104ae <__cxa_guard_acquire>:
 80104ae:	6802      	ldr	r2, [r0, #0]
 80104b0:	07d2      	lsls	r2, r2, #31
 80104b2:	4603      	mov	r3, r0
 80104b4:	d405      	bmi.n	80104c2 <__cxa_guard_acquire+0x14>
 80104b6:	7842      	ldrb	r2, [r0, #1]
 80104b8:	b102      	cbz	r2, 80104bc <__cxa_guard_acquire+0xe>
 80104ba:	deff      	udf	#255	@ 0xff
 80104bc:	2001      	movs	r0, #1
 80104be:	7058      	strb	r0, [r3, #1]
 80104c0:	4770      	bx	lr
 80104c2:	2000      	movs	r0, #0
 80104c4:	4770      	bx	lr

080104c6 <__cxa_guard_release>:
 80104c6:	2301      	movs	r3, #1
 80104c8:	6003      	str	r3, [r0, #0]
 80104ca:	4770      	bx	lr

080104cc <_Znwj>:
 80104cc:	2801      	cmp	r0, #1
 80104ce:	bf38      	it	cc
 80104d0:	2001      	movcc	r0, #1
 80104d2:	b510      	push	{r4, lr}
 80104d4:	4604      	mov	r4, r0
 80104d6:	4620      	mov	r0, r4
 80104d8:	f000 f99e 	bl	8010818 <malloc>
 80104dc:	b100      	cbz	r0, 80104e0 <_Znwj+0x14>
 80104de:	bd10      	pop	{r4, pc}
 80104e0:	f000 f984 	bl	80107ec <_ZSt15get_new_handlerv>
 80104e4:	b908      	cbnz	r0, 80104ea <_Znwj+0x1e>
 80104e6:	f000 f98f 	bl	8010808 <abort>
 80104ea:	4780      	blx	r0
 80104ec:	e7f3      	b.n	80104d6 <_Znwj+0xa>

080104ee <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 80104ee:	b10a      	cbz	r2, 80104f4 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 80104f0:	f000 bd4b 	b.w	8010f8a <memcpy>
 80104f4:	4770      	bx	lr

080104f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 80104f6:	f850 3b08 	ldr.w	r3, [r0], #8
 80104fa:	1a1b      	subs	r3, r3, r0
 80104fc:	4258      	negs	r0, r3
 80104fe:	4158      	adcs	r0, r3
 8010500:	4770      	bx	lr
	...

08010504 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8010504:	b508      	push	{r3, lr}
 8010506:	680b      	ldr	r3, [r1, #0]
 8010508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801050c:	d302      	bcc.n	8010514 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 801050e:	480d      	ldr	r0, [pc, #52]	@ (8010544 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8010510:	f000 f977 	bl	8010802 <_ZSt20__throw_length_errorPKc>
 8010514:	4293      	cmp	r3, r2
 8010516:	d90b      	bls.n	8010530 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8010518:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 801051c:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8010520:	d206      	bcs.n	8010530 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8010522:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8010526:	bf2a      	itet	cs
 8010528:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 801052c:	6008      	strcc	r0, [r1, #0]
 801052e:	600b      	strcs	r3, [r1, #0]
 8010530:	6808      	ldr	r0, [r1, #0]
 8010532:	3001      	adds	r0, #1
 8010534:	d501      	bpl.n	801053a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8010536:	f000 f961 	bl	80107fc <_ZSt17__throw_bad_allocv>
 801053a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801053e:	f7ff bfc5 	b.w	80104cc <_Znwj>
 8010542:	bf00      	nop
 8010544:	08011d78 	.word	0x08011d78

08010548 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8010548:	b510      	push	{r4, lr}
 801054a:	4604      	mov	r4, r0
 801054c:	f7ff ffd3 	bl	80104f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8010550:	b920      	cbnz	r0, 801055c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 8010552:	6820      	ldr	r0, [r4, #0]
 8010554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010558:	f000 b945 	b.w	80107e6 <_ZdlPv>
 801055c:	bd10      	pop	{r4, pc}

0801055e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 801055e:	6840      	ldr	r0, [r0, #4]
 8010560:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8010564:	3901      	subs	r1, #1
 8010566:	1a09      	subs	r1, r1, r0
 8010568:	4291      	cmp	r1, r2
 801056a:	b508      	push	{r3, lr}
 801056c:	d202      	bcs.n	8010574 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 801056e:	4618      	mov	r0, r3
 8010570:	f000 f947 	bl	8010802 <_ZSt20__throw_length_errorPKc>
 8010574:	bd08      	pop	{r3, pc}

08010576 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8010576:	2a01      	cmp	r2, #1
 8010578:	b410      	push	{r4}
 801057a:	d104      	bne.n	8010586 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 801057c:	780a      	ldrb	r2, [r1, #0]
 801057e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010582:	7002      	strb	r2, [r0, #0]
 8010584:	4770      	bx	lr
 8010586:	f85d 4b04 	ldr.w	r4, [sp], #4
 801058a:	f7ff bfb0 	b.w	80104ee <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0801058e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 801058e:	2a01      	cmp	r2, #1
 8010590:	b430      	push	{r4, r5}
 8010592:	d103      	bne.n	801059c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8010594:	780b      	ldrb	r3, [r1, #0]
 8010596:	7003      	strb	r3, [r0, #0]
 8010598:	bc30      	pop	{r4, r5}
 801059a:	4770      	bx	lr
 801059c:	2a00      	cmp	r2, #0
 801059e:	d0fb      	beq.n	8010598 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 80105a0:	bc30      	pop	{r4, r5}
 80105a2:	f000 bc09 	b.w	8010db8 <memmove>

080105a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 80105a6:	460b      	mov	r3, r1
 80105a8:	2b01      	cmp	r3, #1
 80105aa:	b410      	push	{r4}
 80105ac:	4611      	mov	r1, r2
 80105ae:	4604      	mov	r4, r0
 80105b0:	d103      	bne.n	80105ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 80105b2:	7022      	strb	r2, [r4, #0]
 80105b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80105b8:	4770      	bx	lr
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d0fa      	beq.n	80105b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 80105be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80105c2:	461a      	mov	r2, r3
 80105c4:	f000 bc12 	b.w	8010dec <memset>

080105c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 80105c8:	b508      	push	{r3, lr}
 80105ca:	1a52      	subs	r2, r2, r1
 80105cc:	f7ff ffd3 	bl	8010576 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80105d0:	bd08      	pop	{r3, pc}

080105d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 80105d2:	f100 0208 	add.w	r2, r0, #8
 80105d6:	6002      	str	r2, [r0, #0]
 80105d8:	2200      	movs	r2, #0
 80105da:	6042      	str	r2, [r0, #4]
 80105dc:	7202      	strb	r2, [r0, #8]
 80105de:	4770      	bx	lr

080105e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 80105e0:	b510      	push	{r4, lr}
 80105e2:	4604      	mov	r4, r0
 80105e4:	f7ff ffb0 	bl	8010548 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80105e8:	4620      	mov	r0, r4
 80105ea:	bd10      	pop	{r4, pc}

080105ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 80105ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105ee:	460c      	mov	r4, r1
 80105f0:	4605      	mov	r5, r0
 80105f2:	f7ff ff80 	bl	80104f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 80105f6:	4606      	mov	r6, r0
 80105f8:	4620      	mov	r0, r4
 80105fa:	f7ff ff7c 	bl	80104f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 80105fe:	b190      	cbz	r0, 8010626 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x3a>
 8010600:	42a5      	cmp	r5, r4
 8010602:	d00a      	beq.n	801061a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8010604:	6862      	ldr	r2, [r4, #4]
 8010606:	b11a      	cbz	r2, 8010610 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x24>
 8010608:	6821      	ldr	r1, [r4, #0]
 801060a:	6828      	ldr	r0, [r5, #0]
 801060c:	f7ff ffb3 	bl	8010576 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8010610:	6863      	ldr	r3, [r4, #4]
 8010612:	682a      	ldr	r2, [r5, #0]
 8010614:	606b      	str	r3, [r5, #4]
 8010616:	2100      	movs	r1, #0
 8010618:	54d1      	strb	r1, [r2, r3]
 801061a:	6822      	ldr	r2, [r4, #0]
 801061c:	2300      	movs	r3, #0
 801061e:	6063      	str	r3, [r4, #4]
 8010620:	7013      	strb	r3, [r2, #0]
 8010622:	4628      	mov	r0, r5
 8010624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010626:	b90e      	cbnz	r6, 801062c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 8010628:	6828      	ldr	r0, [r5, #0]
 801062a:	68af      	ldr	r7, [r5, #8]
 801062c:	6823      	ldr	r3, [r4, #0]
 801062e:	602b      	str	r3, [r5, #0]
 8010630:	6863      	ldr	r3, [r4, #4]
 8010632:	606b      	str	r3, [r5, #4]
 8010634:	68a3      	ldr	r3, [r4, #8]
 8010636:	60ab      	str	r3, [r5, #8]
 8010638:	b110      	cbz	r0, 8010640 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x54>
 801063a:	6020      	str	r0, [r4, #0]
 801063c:	60a7      	str	r7, [r4, #8]
 801063e:	e7ec      	b.n	801061a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8010640:	f104 0308 	add.w	r3, r4, #8
 8010644:	6023      	str	r3, [r4, #0]
 8010646:	e7e8      	b.n	801061a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>

08010648 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 8010648:	b510      	push	{r4, lr}
 801064a:	4604      	mov	r4, r0
 801064c:	f7ff ff53 	bl	80104f6 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8010650:	b908      	cbnz	r0, 8010656 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 8010652:	68a0      	ldr	r0, [r4, #8]
 8010654:	bd10      	pop	{r4, pc}
 8010656:	200f      	movs	r0, #15
 8010658:	e7fc      	b.n	8010654 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

0801065a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 801065a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801065e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010660:	461f      	mov	r7, r3
 8010662:	6843      	ldr	r3, [r0, #4]
 8010664:	eb01 0802 	add.w	r8, r1, r2
 8010668:	1ab2      	subs	r2, r6, r2
 801066a:	441a      	add	r2, r3
 801066c:	4604      	mov	r4, r0
 801066e:	460d      	mov	r5, r1
 8010670:	eba3 0908 	sub.w	r9, r3, r8
 8010674:	9201      	str	r2, [sp, #4]
 8010676:	f7ff ffe7 	bl	8010648 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 801067a:	a901      	add	r1, sp, #4
 801067c:	4602      	mov	r2, r0
 801067e:	4620      	mov	r0, r4
 8010680:	f7ff ff40 	bl	8010504 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8010684:	4682      	mov	sl, r0
 8010686:	b11d      	cbz	r5, 8010690 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 8010688:	6821      	ldr	r1, [r4, #0]
 801068a:	462a      	mov	r2, r5
 801068c:	f7ff ff73 	bl	8010576 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8010690:	b137      	cbz	r7, 80106a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8010692:	b12e      	cbz	r6, 80106a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 8010694:	4632      	mov	r2, r6
 8010696:	4639      	mov	r1, r7
 8010698:	eb0a 0005 	add.w	r0, sl, r5
 801069c:	f7ff ff6b 	bl	8010576 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80106a0:	f1b9 0f00 	cmp.w	r9, #0
 80106a4:	d007      	beq.n	80106b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 80106a6:	6821      	ldr	r1, [r4, #0]
 80106a8:	4435      	add	r5, r6
 80106aa:	464a      	mov	r2, r9
 80106ac:	4441      	add	r1, r8
 80106ae:	eb0a 0005 	add.w	r0, sl, r5
 80106b2:	f7ff ff60 	bl	8010576 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80106b6:	4620      	mov	r0, r4
 80106b8:	f7ff ff46 	bl	8010548 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80106bc:	9b01      	ldr	r3, [sp, #4]
 80106be:	f8c4 a000 	str.w	sl, [r4]
 80106c2:	60a3      	str	r3, [r4, #8]
 80106c4:	b002      	add	sp, #8
 80106c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080106ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 80106ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80106cc:	4604      	mov	r4, r0
 80106ce:	9101      	str	r1, [sp, #4]
 80106d0:	f7ff ffba 	bl	8010648 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 80106d4:	9b01      	ldr	r3, [sp, #4]
 80106d6:	4283      	cmp	r3, r0
 80106d8:	4602      	mov	r2, r0
 80106da:	d90f      	bls.n	80106fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x32>
 80106dc:	a901      	add	r1, sp, #4
 80106de:	4620      	mov	r0, r4
 80106e0:	f7ff ff10 	bl	8010504 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80106e4:	6862      	ldr	r2, [r4, #4]
 80106e6:	6821      	ldr	r1, [r4, #0]
 80106e8:	3201      	adds	r2, #1
 80106ea:	4605      	mov	r5, r0
 80106ec:	f7ff ff43 	bl	8010576 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80106f0:	4620      	mov	r0, r4
 80106f2:	f7ff ff29 	bl	8010548 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80106f6:	9b01      	ldr	r3, [sp, #4]
 80106f8:	6025      	str	r5, [r4, #0]
 80106fa:	60a3      	str	r3, [r4, #8]
 80106fc:	b003      	add	sp, #12
 80106fe:	bd30      	pop	{r4, r5, pc}

08010700 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 8010700:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010704:	4616      	mov	r6, r2
 8010706:	461d      	mov	r5, r3
 8010708:	4604      	mov	r4, r0
 801070a:	4b1b      	ldr	r3, [pc, #108]	@ (8010778 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x78>)
 801070c:	462a      	mov	r2, r5
 801070e:	460f      	mov	r7, r1
 8010710:	4631      	mov	r1, r6
 8010712:	f7ff ff24 	bl	801055e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8010716:	4620      	mov	r0, r4
 8010718:	f7ff ff96 	bl	8010648 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 801071c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8010720:	eba5 0806 	sub.w	r8, r5, r6
 8010724:	44c8      	add	r8, r9
 8010726:	4540      	cmp	r0, r8
 8010728:	d31d      	bcc.n	8010766 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x66>
 801072a:	19f3      	adds	r3, r6, r7
 801072c:	ebb9 0203 	subs.w	r2, r9, r3
 8010730:	d007      	beq.n	8010742 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 8010732:	42ae      	cmp	r6, r5
 8010734:	d005      	beq.n	8010742 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 8010736:	6820      	ldr	r0, [r4, #0]
 8010738:	4438      	add	r0, r7
 801073a:	1981      	adds	r1, r0, r6
 801073c:	4428      	add	r0, r5
 801073e:	f7ff ff26 	bl	801058e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8010742:	b135      	cbz	r5, 8010752 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x52>
 8010744:	6820      	ldr	r0, [r4, #0]
 8010746:	f89d 2028 	ldrb.w	r2, [sp, #40]	@ 0x28
 801074a:	4629      	mov	r1, r5
 801074c:	4438      	add	r0, r7
 801074e:	f7ff ff2a 	bl	80105a6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 8010752:	6823      	ldr	r3, [r4, #0]
 8010754:	f8c4 8004 	str.w	r8, [r4, #4]
 8010758:	2200      	movs	r2, #0
 801075a:	4620      	mov	r0, r4
 801075c:	f803 2008 	strb.w	r2, [r3, r8]
 8010760:	b003      	add	sp, #12
 8010762:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010766:	9500      	str	r5, [sp, #0]
 8010768:	2300      	movs	r3, #0
 801076a:	4632      	mov	r2, r6
 801076c:	4639      	mov	r1, r7
 801076e:	4620      	mov	r0, r4
 8010770:	f7ff ff73 	bl	801065a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8010774:	e7e5      	b.n	8010742 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x42>
 8010776:	bf00      	nop
 8010778:	08011d90 	.word	0x08011d90

0801077c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>:
 801077c:	b507      	push	{r0, r1, r2, lr}
 801077e:	9200      	str	r2, [sp, #0]
 8010780:	460b      	mov	r3, r1
 8010782:	2200      	movs	r2, #0
 8010784:	6841      	ldr	r1, [r0, #4]
 8010786:	f7ff ffbb 	bl	8010700 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 801078a:	b003      	add	sp, #12
 801078c:	f85d fb04 	ldr.w	pc, [sp], #4

08010790 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8010790:	6800      	ldr	r0, [r0, #0]
 8010792:	4770      	bx	lr

08010794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8010794:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010796:	1a53      	subs	r3, r2, r1
 8010798:	2b0f      	cmp	r3, #15
 801079a:	4604      	mov	r4, r0
 801079c:	460d      	mov	r5, r1
 801079e:	4616      	mov	r6, r2
 80107a0:	9301      	str	r3, [sp, #4]
 80107a2:	d906      	bls.n	80107b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x1e>
 80107a4:	2200      	movs	r2, #0
 80107a6:	a901      	add	r1, sp, #4
 80107a8:	f7ff feac 	bl	8010504 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80107ac:	9b01      	ldr	r3, [sp, #4]
 80107ae:	6020      	str	r0, [r4, #0]
 80107b0:	60a3      	str	r3, [r4, #8]
 80107b2:	4632      	mov	r2, r6
 80107b4:	4629      	mov	r1, r5
 80107b6:	6820      	ldr	r0, [r4, #0]
 80107b8:	f7ff ff06 	bl	80105c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 80107bc:	9b01      	ldr	r3, [sp, #4]
 80107be:	6822      	ldr	r2, [r4, #0]
 80107c0:	6063      	str	r3, [r4, #4]
 80107c2:	2100      	movs	r1, #0
 80107c4:	54d1      	strb	r1, [r2, r3]
 80107c6:	b002      	add	sp, #8
 80107c8:	bd70      	pop	{r4, r5, r6, pc}

080107ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 80107ca:	f100 0208 	add.w	r2, r0, #8
 80107ce:	b510      	push	{r4, lr}
 80107d0:	6002      	str	r2, [r0, #0]
 80107d2:	e9d1 1200 	ldrd	r1, r2, [r1]
 80107d6:	4604      	mov	r4, r0
 80107d8:	f04f 0300 	mov.w	r3, #0
 80107dc:	440a      	add	r2, r1
 80107de:	f7ff ffd9 	bl	8010794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 80107e2:	4620      	mov	r0, r4
 80107e4:	bd10      	pop	{r4, pc}

080107e6 <_ZdlPv>:
 80107e6:	f000 b81f 	b.w	8010828 <free>
	...

080107ec <_ZSt15get_new_handlerv>:
 80107ec:	4b02      	ldr	r3, [pc, #8]	@ (80107f8 <_ZSt15get_new_handlerv+0xc>)
 80107ee:	6818      	ldr	r0, [r3, #0]
 80107f0:	f3bf 8f5b 	dmb	ish
 80107f4:	4770      	bx	lr
 80107f6:	bf00      	nop
 80107f8:	24000c30 	.word	0x24000c30

080107fc <_ZSt17__throw_bad_allocv>:
 80107fc:	b508      	push	{r3, lr}
 80107fe:	f000 f803 	bl	8010808 <abort>

08010802 <_ZSt20__throw_length_errorPKc>:
 8010802:	b508      	push	{r3, lr}
 8010804:	f000 f800 	bl	8010808 <abort>

08010808 <abort>:
 8010808:	b508      	push	{r3, lr}
 801080a:	2006      	movs	r0, #6
 801080c:	f000 fb1e 	bl	8010e4c <raise>
 8010810:	2001      	movs	r0, #1
 8010812:	f7f2 ffd9 	bl	80037c8 <_exit>
	...

08010818 <malloc>:
 8010818:	4b02      	ldr	r3, [pc, #8]	@ (8010824 <malloc+0xc>)
 801081a:	4601      	mov	r1, r0
 801081c:	6818      	ldr	r0, [r3, #0]
 801081e:	f000 b82d 	b.w	801087c <_malloc_r>
 8010822:	bf00      	nop
 8010824:	2400006c 	.word	0x2400006c

08010828 <free>:
 8010828:	4b02      	ldr	r3, [pc, #8]	@ (8010834 <free+0xc>)
 801082a:	4601      	mov	r1, r0
 801082c:	6818      	ldr	r0, [r3, #0]
 801082e:	f000 bbbb 	b.w	8010fa8 <_free_r>
 8010832:	bf00      	nop
 8010834:	2400006c 	.word	0x2400006c

08010838 <sbrk_aligned>:
 8010838:	b570      	push	{r4, r5, r6, lr}
 801083a:	4e0f      	ldr	r6, [pc, #60]	@ (8010878 <sbrk_aligned+0x40>)
 801083c:	460c      	mov	r4, r1
 801083e:	6831      	ldr	r1, [r6, #0]
 8010840:	4605      	mov	r5, r0
 8010842:	b911      	cbnz	r1, 801084a <sbrk_aligned+0x12>
 8010844:	f000 fb52 	bl	8010eec <_sbrk_r>
 8010848:	6030      	str	r0, [r6, #0]
 801084a:	4621      	mov	r1, r4
 801084c:	4628      	mov	r0, r5
 801084e:	f000 fb4d 	bl	8010eec <_sbrk_r>
 8010852:	1c43      	adds	r3, r0, #1
 8010854:	d103      	bne.n	801085e <sbrk_aligned+0x26>
 8010856:	f04f 34ff 	mov.w	r4, #4294967295
 801085a:	4620      	mov	r0, r4
 801085c:	bd70      	pop	{r4, r5, r6, pc}
 801085e:	1cc4      	adds	r4, r0, #3
 8010860:	f024 0403 	bic.w	r4, r4, #3
 8010864:	42a0      	cmp	r0, r4
 8010866:	d0f8      	beq.n	801085a <sbrk_aligned+0x22>
 8010868:	1a21      	subs	r1, r4, r0
 801086a:	4628      	mov	r0, r5
 801086c:	f000 fb3e 	bl	8010eec <_sbrk_r>
 8010870:	3001      	adds	r0, #1
 8010872:	d1f2      	bne.n	801085a <sbrk_aligned+0x22>
 8010874:	e7ef      	b.n	8010856 <sbrk_aligned+0x1e>
 8010876:	bf00      	nop
 8010878:	24000c34 	.word	0x24000c34

0801087c <_malloc_r>:
 801087c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010880:	1ccd      	adds	r5, r1, #3
 8010882:	f025 0503 	bic.w	r5, r5, #3
 8010886:	3508      	adds	r5, #8
 8010888:	2d0c      	cmp	r5, #12
 801088a:	bf38      	it	cc
 801088c:	250c      	movcc	r5, #12
 801088e:	2d00      	cmp	r5, #0
 8010890:	4606      	mov	r6, r0
 8010892:	db01      	blt.n	8010898 <_malloc_r+0x1c>
 8010894:	42a9      	cmp	r1, r5
 8010896:	d904      	bls.n	80108a2 <_malloc_r+0x26>
 8010898:	230c      	movs	r3, #12
 801089a:	6033      	str	r3, [r6, #0]
 801089c:	2000      	movs	r0, #0
 801089e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010978 <_malloc_r+0xfc>
 80108a6:	f000 f869 	bl	801097c <__malloc_lock>
 80108aa:	f8d8 3000 	ldr.w	r3, [r8]
 80108ae:	461c      	mov	r4, r3
 80108b0:	bb44      	cbnz	r4, 8010904 <_malloc_r+0x88>
 80108b2:	4629      	mov	r1, r5
 80108b4:	4630      	mov	r0, r6
 80108b6:	f7ff ffbf 	bl	8010838 <sbrk_aligned>
 80108ba:	1c43      	adds	r3, r0, #1
 80108bc:	4604      	mov	r4, r0
 80108be:	d158      	bne.n	8010972 <_malloc_r+0xf6>
 80108c0:	f8d8 4000 	ldr.w	r4, [r8]
 80108c4:	4627      	mov	r7, r4
 80108c6:	2f00      	cmp	r7, #0
 80108c8:	d143      	bne.n	8010952 <_malloc_r+0xd6>
 80108ca:	2c00      	cmp	r4, #0
 80108cc:	d04b      	beq.n	8010966 <_malloc_r+0xea>
 80108ce:	6823      	ldr	r3, [r4, #0]
 80108d0:	4639      	mov	r1, r7
 80108d2:	4630      	mov	r0, r6
 80108d4:	eb04 0903 	add.w	r9, r4, r3
 80108d8:	f000 fb08 	bl	8010eec <_sbrk_r>
 80108dc:	4581      	cmp	r9, r0
 80108de:	d142      	bne.n	8010966 <_malloc_r+0xea>
 80108e0:	6821      	ldr	r1, [r4, #0]
 80108e2:	1a6d      	subs	r5, r5, r1
 80108e4:	4629      	mov	r1, r5
 80108e6:	4630      	mov	r0, r6
 80108e8:	f7ff ffa6 	bl	8010838 <sbrk_aligned>
 80108ec:	3001      	adds	r0, #1
 80108ee:	d03a      	beq.n	8010966 <_malloc_r+0xea>
 80108f0:	6823      	ldr	r3, [r4, #0]
 80108f2:	442b      	add	r3, r5
 80108f4:	6023      	str	r3, [r4, #0]
 80108f6:	f8d8 3000 	ldr.w	r3, [r8]
 80108fa:	685a      	ldr	r2, [r3, #4]
 80108fc:	bb62      	cbnz	r2, 8010958 <_malloc_r+0xdc>
 80108fe:	f8c8 7000 	str.w	r7, [r8]
 8010902:	e00f      	b.n	8010924 <_malloc_r+0xa8>
 8010904:	6822      	ldr	r2, [r4, #0]
 8010906:	1b52      	subs	r2, r2, r5
 8010908:	d420      	bmi.n	801094c <_malloc_r+0xd0>
 801090a:	2a0b      	cmp	r2, #11
 801090c:	d917      	bls.n	801093e <_malloc_r+0xc2>
 801090e:	1961      	adds	r1, r4, r5
 8010910:	42a3      	cmp	r3, r4
 8010912:	6025      	str	r5, [r4, #0]
 8010914:	bf18      	it	ne
 8010916:	6059      	strne	r1, [r3, #4]
 8010918:	6863      	ldr	r3, [r4, #4]
 801091a:	bf08      	it	eq
 801091c:	f8c8 1000 	streq.w	r1, [r8]
 8010920:	5162      	str	r2, [r4, r5]
 8010922:	604b      	str	r3, [r1, #4]
 8010924:	4630      	mov	r0, r6
 8010926:	f000 f82f 	bl	8010988 <__malloc_unlock>
 801092a:	f104 000b 	add.w	r0, r4, #11
 801092e:	1d23      	adds	r3, r4, #4
 8010930:	f020 0007 	bic.w	r0, r0, #7
 8010934:	1ac2      	subs	r2, r0, r3
 8010936:	bf1c      	itt	ne
 8010938:	1a1b      	subne	r3, r3, r0
 801093a:	50a3      	strne	r3, [r4, r2]
 801093c:	e7af      	b.n	801089e <_malloc_r+0x22>
 801093e:	6862      	ldr	r2, [r4, #4]
 8010940:	42a3      	cmp	r3, r4
 8010942:	bf0c      	ite	eq
 8010944:	f8c8 2000 	streq.w	r2, [r8]
 8010948:	605a      	strne	r2, [r3, #4]
 801094a:	e7eb      	b.n	8010924 <_malloc_r+0xa8>
 801094c:	4623      	mov	r3, r4
 801094e:	6864      	ldr	r4, [r4, #4]
 8010950:	e7ae      	b.n	80108b0 <_malloc_r+0x34>
 8010952:	463c      	mov	r4, r7
 8010954:	687f      	ldr	r7, [r7, #4]
 8010956:	e7b6      	b.n	80108c6 <_malloc_r+0x4a>
 8010958:	461a      	mov	r2, r3
 801095a:	685b      	ldr	r3, [r3, #4]
 801095c:	42a3      	cmp	r3, r4
 801095e:	d1fb      	bne.n	8010958 <_malloc_r+0xdc>
 8010960:	2300      	movs	r3, #0
 8010962:	6053      	str	r3, [r2, #4]
 8010964:	e7de      	b.n	8010924 <_malloc_r+0xa8>
 8010966:	230c      	movs	r3, #12
 8010968:	6033      	str	r3, [r6, #0]
 801096a:	4630      	mov	r0, r6
 801096c:	f000 f80c 	bl	8010988 <__malloc_unlock>
 8010970:	e794      	b.n	801089c <_malloc_r+0x20>
 8010972:	6005      	str	r5, [r0, #0]
 8010974:	e7d6      	b.n	8010924 <_malloc_r+0xa8>
 8010976:	bf00      	nop
 8010978:	24000c38 	.word	0x24000c38

0801097c <__malloc_lock>:
 801097c:	4801      	ldr	r0, [pc, #4]	@ (8010984 <__malloc_lock+0x8>)
 801097e:	f000 bb02 	b.w	8010f86 <__retarget_lock_acquire_recursive>
 8010982:	bf00      	nop
 8010984:	24000d7c 	.word	0x24000d7c

08010988 <__malloc_unlock>:
 8010988:	4801      	ldr	r0, [pc, #4]	@ (8010990 <__malloc_unlock+0x8>)
 801098a:	f000 bafd 	b.w	8010f88 <__retarget_lock_release_recursive>
 801098e:	bf00      	nop
 8010990:	24000d7c 	.word	0x24000d7c

08010994 <std>:
 8010994:	2300      	movs	r3, #0
 8010996:	b510      	push	{r4, lr}
 8010998:	4604      	mov	r4, r0
 801099a:	e9c0 3300 	strd	r3, r3, [r0]
 801099e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80109a2:	6083      	str	r3, [r0, #8]
 80109a4:	8181      	strh	r1, [r0, #12]
 80109a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80109a8:	81c2      	strh	r2, [r0, #14]
 80109aa:	6183      	str	r3, [r0, #24]
 80109ac:	4619      	mov	r1, r3
 80109ae:	2208      	movs	r2, #8
 80109b0:	305c      	adds	r0, #92	@ 0x5c
 80109b2:	f000 fa1b 	bl	8010dec <memset>
 80109b6:	4b0d      	ldr	r3, [pc, #52]	@ (80109ec <std+0x58>)
 80109b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80109ba:	4b0d      	ldr	r3, [pc, #52]	@ (80109f0 <std+0x5c>)
 80109bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80109be:	4b0d      	ldr	r3, [pc, #52]	@ (80109f4 <std+0x60>)
 80109c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80109c2:	4b0d      	ldr	r3, [pc, #52]	@ (80109f8 <std+0x64>)
 80109c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80109c6:	4b0d      	ldr	r3, [pc, #52]	@ (80109fc <std+0x68>)
 80109c8:	6224      	str	r4, [r4, #32]
 80109ca:	429c      	cmp	r4, r3
 80109cc:	d006      	beq.n	80109dc <std+0x48>
 80109ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80109d2:	4294      	cmp	r4, r2
 80109d4:	d002      	beq.n	80109dc <std+0x48>
 80109d6:	33d0      	adds	r3, #208	@ 0xd0
 80109d8:	429c      	cmp	r4, r3
 80109da:	d105      	bne.n	80109e8 <std+0x54>
 80109dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80109e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109e4:	f000 bace 	b.w	8010f84 <__retarget_lock_init_recursive>
 80109e8:	bd10      	pop	{r4, pc}
 80109ea:	bf00      	nop
 80109ec:	08010c09 	.word	0x08010c09
 80109f0:	08010c2b 	.word	0x08010c2b
 80109f4:	08010c63 	.word	0x08010c63
 80109f8:	08010c87 	.word	0x08010c87
 80109fc:	24000c3c 	.word	0x24000c3c

08010a00 <stdio_exit_handler>:
 8010a00:	4a02      	ldr	r2, [pc, #8]	@ (8010a0c <stdio_exit_handler+0xc>)
 8010a02:	4903      	ldr	r1, [pc, #12]	@ (8010a10 <stdio_exit_handler+0x10>)
 8010a04:	4803      	ldr	r0, [pc, #12]	@ (8010a14 <stdio_exit_handler+0x14>)
 8010a06:	f000 b869 	b.w	8010adc <_fwalk_sglue>
 8010a0a:	bf00      	nop
 8010a0c:	24000060 	.word	0x24000060
 8010a10:	080116e5 	.word	0x080116e5
 8010a14:	24000070 	.word	0x24000070

08010a18 <cleanup_stdio>:
 8010a18:	6841      	ldr	r1, [r0, #4]
 8010a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8010a4c <cleanup_stdio+0x34>)
 8010a1c:	4299      	cmp	r1, r3
 8010a1e:	b510      	push	{r4, lr}
 8010a20:	4604      	mov	r4, r0
 8010a22:	d001      	beq.n	8010a28 <cleanup_stdio+0x10>
 8010a24:	f000 fe5e 	bl	80116e4 <_fflush_r>
 8010a28:	68a1      	ldr	r1, [r4, #8]
 8010a2a:	4b09      	ldr	r3, [pc, #36]	@ (8010a50 <cleanup_stdio+0x38>)
 8010a2c:	4299      	cmp	r1, r3
 8010a2e:	d002      	beq.n	8010a36 <cleanup_stdio+0x1e>
 8010a30:	4620      	mov	r0, r4
 8010a32:	f000 fe57 	bl	80116e4 <_fflush_r>
 8010a36:	68e1      	ldr	r1, [r4, #12]
 8010a38:	4b06      	ldr	r3, [pc, #24]	@ (8010a54 <cleanup_stdio+0x3c>)
 8010a3a:	4299      	cmp	r1, r3
 8010a3c:	d004      	beq.n	8010a48 <cleanup_stdio+0x30>
 8010a3e:	4620      	mov	r0, r4
 8010a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a44:	f000 be4e 	b.w	80116e4 <_fflush_r>
 8010a48:	bd10      	pop	{r4, pc}
 8010a4a:	bf00      	nop
 8010a4c:	24000c3c 	.word	0x24000c3c
 8010a50:	24000ca4 	.word	0x24000ca4
 8010a54:	24000d0c 	.word	0x24000d0c

08010a58 <global_stdio_init.part.0>:
 8010a58:	b510      	push	{r4, lr}
 8010a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8010a88 <global_stdio_init.part.0+0x30>)
 8010a5c:	4c0b      	ldr	r4, [pc, #44]	@ (8010a8c <global_stdio_init.part.0+0x34>)
 8010a5e:	4a0c      	ldr	r2, [pc, #48]	@ (8010a90 <global_stdio_init.part.0+0x38>)
 8010a60:	601a      	str	r2, [r3, #0]
 8010a62:	4620      	mov	r0, r4
 8010a64:	2200      	movs	r2, #0
 8010a66:	2104      	movs	r1, #4
 8010a68:	f7ff ff94 	bl	8010994 <std>
 8010a6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010a70:	2201      	movs	r2, #1
 8010a72:	2109      	movs	r1, #9
 8010a74:	f7ff ff8e 	bl	8010994 <std>
 8010a78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010a7c:	2202      	movs	r2, #2
 8010a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a82:	2112      	movs	r1, #18
 8010a84:	f7ff bf86 	b.w	8010994 <std>
 8010a88:	24000d74 	.word	0x24000d74
 8010a8c:	24000c3c 	.word	0x24000c3c
 8010a90:	08010a01 	.word	0x08010a01

08010a94 <__sfp_lock_acquire>:
 8010a94:	4801      	ldr	r0, [pc, #4]	@ (8010a9c <__sfp_lock_acquire+0x8>)
 8010a96:	f000 ba76 	b.w	8010f86 <__retarget_lock_acquire_recursive>
 8010a9a:	bf00      	nop
 8010a9c:	24000d7d 	.word	0x24000d7d

08010aa0 <__sfp_lock_release>:
 8010aa0:	4801      	ldr	r0, [pc, #4]	@ (8010aa8 <__sfp_lock_release+0x8>)
 8010aa2:	f000 ba71 	b.w	8010f88 <__retarget_lock_release_recursive>
 8010aa6:	bf00      	nop
 8010aa8:	24000d7d 	.word	0x24000d7d

08010aac <__sinit>:
 8010aac:	b510      	push	{r4, lr}
 8010aae:	4604      	mov	r4, r0
 8010ab0:	f7ff fff0 	bl	8010a94 <__sfp_lock_acquire>
 8010ab4:	6a23      	ldr	r3, [r4, #32]
 8010ab6:	b11b      	cbz	r3, 8010ac0 <__sinit+0x14>
 8010ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010abc:	f7ff bff0 	b.w	8010aa0 <__sfp_lock_release>
 8010ac0:	4b04      	ldr	r3, [pc, #16]	@ (8010ad4 <__sinit+0x28>)
 8010ac2:	6223      	str	r3, [r4, #32]
 8010ac4:	4b04      	ldr	r3, [pc, #16]	@ (8010ad8 <__sinit+0x2c>)
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d1f5      	bne.n	8010ab8 <__sinit+0xc>
 8010acc:	f7ff ffc4 	bl	8010a58 <global_stdio_init.part.0>
 8010ad0:	e7f2      	b.n	8010ab8 <__sinit+0xc>
 8010ad2:	bf00      	nop
 8010ad4:	08010a19 	.word	0x08010a19
 8010ad8:	24000d74 	.word	0x24000d74

08010adc <_fwalk_sglue>:
 8010adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ae0:	4607      	mov	r7, r0
 8010ae2:	4688      	mov	r8, r1
 8010ae4:	4614      	mov	r4, r2
 8010ae6:	2600      	movs	r6, #0
 8010ae8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010aec:	f1b9 0901 	subs.w	r9, r9, #1
 8010af0:	d505      	bpl.n	8010afe <_fwalk_sglue+0x22>
 8010af2:	6824      	ldr	r4, [r4, #0]
 8010af4:	2c00      	cmp	r4, #0
 8010af6:	d1f7      	bne.n	8010ae8 <_fwalk_sglue+0xc>
 8010af8:	4630      	mov	r0, r6
 8010afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010afe:	89ab      	ldrh	r3, [r5, #12]
 8010b00:	2b01      	cmp	r3, #1
 8010b02:	d907      	bls.n	8010b14 <_fwalk_sglue+0x38>
 8010b04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010b08:	3301      	adds	r3, #1
 8010b0a:	d003      	beq.n	8010b14 <_fwalk_sglue+0x38>
 8010b0c:	4629      	mov	r1, r5
 8010b0e:	4638      	mov	r0, r7
 8010b10:	47c0      	blx	r8
 8010b12:	4306      	orrs	r6, r0
 8010b14:	3568      	adds	r5, #104	@ 0x68
 8010b16:	e7e9      	b.n	8010aec <_fwalk_sglue+0x10>

08010b18 <iprintf>:
 8010b18:	b40f      	push	{r0, r1, r2, r3}
 8010b1a:	b507      	push	{r0, r1, r2, lr}
 8010b1c:	4906      	ldr	r1, [pc, #24]	@ (8010b38 <iprintf+0x20>)
 8010b1e:	ab04      	add	r3, sp, #16
 8010b20:	6808      	ldr	r0, [r1, #0]
 8010b22:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b26:	6881      	ldr	r1, [r0, #8]
 8010b28:	9301      	str	r3, [sp, #4]
 8010b2a:	f000 fab1 	bl	8011090 <_vfiprintf_r>
 8010b2e:	b003      	add	sp, #12
 8010b30:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b34:	b004      	add	sp, #16
 8010b36:	4770      	bx	lr
 8010b38:	2400006c 	.word	0x2400006c

08010b3c <putchar>:
 8010b3c:	4b02      	ldr	r3, [pc, #8]	@ (8010b48 <putchar+0xc>)
 8010b3e:	4601      	mov	r1, r0
 8010b40:	6818      	ldr	r0, [r3, #0]
 8010b42:	6882      	ldr	r2, [r0, #8]
 8010b44:	f000 be58 	b.w	80117f8 <_putc_r>
 8010b48:	2400006c 	.word	0x2400006c

08010b4c <_puts_r>:
 8010b4c:	6a03      	ldr	r3, [r0, #32]
 8010b4e:	b570      	push	{r4, r5, r6, lr}
 8010b50:	6884      	ldr	r4, [r0, #8]
 8010b52:	4605      	mov	r5, r0
 8010b54:	460e      	mov	r6, r1
 8010b56:	b90b      	cbnz	r3, 8010b5c <_puts_r+0x10>
 8010b58:	f7ff ffa8 	bl	8010aac <__sinit>
 8010b5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010b5e:	07db      	lsls	r3, r3, #31
 8010b60:	d405      	bmi.n	8010b6e <_puts_r+0x22>
 8010b62:	89a3      	ldrh	r3, [r4, #12]
 8010b64:	0598      	lsls	r0, r3, #22
 8010b66:	d402      	bmi.n	8010b6e <_puts_r+0x22>
 8010b68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010b6a:	f000 fa0c 	bl	8010f86 <__retarget_lock_acquire_recursive>
 8010b6e:	89a3      	ldrh	r3, [r4, #12]
 8010b70:	0719      	lsls	r1, r3, #28
 8010b72:	d502      	bpl.n	8010b7a <_puts_r+0x2e>
 8010b74:	6923      	ldr	r3, [r4, #16]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d135      	bne.n	8010be6 <_puts_r+0x9a>
 8010b7a:	4621      	mov	r1, r4
 8010b7c:	4628      	mov	r0, r5
 8010b7e:	f000 f8c5 	bl	8010d0c <__swsetup_r>
 8010b82:	b380      	cbz	r0, 8010be6 <_puts_r+0x9a>
 8010b84:	f04f 35ff 	mov.w	r5, #4294967295
 8010b88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010b8a:	07da      	lsls	r2, r3, #31
 8010b8c:	d405      	bmi.n	8010b9a <_puts_r+0x4e>
 8010b8e:	89a3      	ldrh	r3, [r4, #12]
 8010b90:	059b      	lsls	r3, r3, #22
 8010b92:	d402      	bmi.n	8010b9a <_puts_r+0x4e>
 8010b94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010b96:	f000 f9f7 	bl	8010f88 <__retarget_lock_release_recursive>
 8010b9a:	4628      	mov	r0, r5
 8010b9c:	bd70      	pop	{r4, r5, r6, pc}
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	da04      	bge.n	8010bac <_puts_r+0x60>
 8010ba2:	69a2      	ldr	r2, [r4, #24]
 8010ba4:	429a      	cmp	r2, r3
 8010ba6:	dc17      	bgt.n	8010bd8 <_puts_r+0x8c>
 8010ba8:	290a      	cmp	r1, #10
 8010baa:	d015      	beq.n	8010bd8 <_puts_r+0x8c>
 8010bac:	6823      	ldr	r3, [r4, #0]
 8010bae:	1c5a      	adds	r2, r3, #1
 8010bb0:	6022      	str	r2, [r4, #0]
 8010bb2:	7019      	strb	r1, [r3, #0]
 8010bb4:	68a3      	ldr	r3, [r4, #8]
 8010bb6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010bba:	3b01      	subs	r3, #1
 8010bbc:	60a3      	str	r3, [r4, #8]
 8010bbe:	2900      	cmp	r1, #0
 8010bc0:	d1ed      	bne.n	8010b9e <_puts_r+0x52>
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	da11      	bge.n	8010bea <_puts_r+0x9e>
 8010bc6:	4622      	mov	r2, r4
 8010bc8:	210a      	movs	r1, #10
 8010bca:	4628      	mov	r0, r5
 8010bcc:	f000 f85f 	bl	8010c8e <__swbuf_r>
 8010bd0:	3001      	adds	r0, #1
 8010bd2:	d0d7      	beq.n	8010b84 <_puts_r+0x38>
 8010bd4:	250a      	movs	r5, #10
 8010bd6:	e7d7      	b.n	8010b88 <_puts_r+0x3c>
 8010bd8:	4622      	mov	r2, r4
 8010bda:	4628      	mov	r0, r5
 8010bdc:	f000 f857 	bl	8010c8e <__swbuf_r>
 8010be0:	3001      	adds	r0, #1
 8010be2:	d1e7      	bne.n	8010bb4 <_puts_r+0x68>
 8010be4:	e7ce      	b.n	8010b84 <_puts_r+0x38>
 8010be6:	3e01      	subs	r6, #1
 8010be8:	e7e4      	b.n	8010bb4 <_puts_r+0x68>
 8010bea:	6823      	ldr	r3, [r4, #0]
 8010bec:	1c5a      	adds	r2, r3, #1
 8010bee:	6022      	str	r2, [r4, #0]
 8010bf0:	220a      	movs	r2, #10
 8010bf2:	701a      	strb	r2, [r3, #0]
 8010bf4:	e7ee      	b.n	8010bd4 <_puts_r+0x88>
	...

08010bf8 <puts>:
 8010bf8:	4b02      	ldr	r3, [pc, #8]	@ (8010c04 <puts+0xc>)
 8010bfa:	4601      	mov	r1, r0
 8010bfc:	6818      	ldr	r0, [r3, #0]
 8010bfe:	f7ff bfa5 	b.w	8010b4c <_puts_r>
 8010c02:	bf00      	nop
 8010c04:	2400006c 	.word	0x2400006c

08010c08 <__sread>:
 8010c08:	b510      	push	{r4, lr}
 8010c0a:	460c      	mov	r4, r1
 8010c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c10:	f000 f946 	bl	8010ea0 <_read_r>
 8010c14:	2800      	cmp	r0, #0
 8010c16:	bfab      	itete	ge
 8010c18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010c1a:	89a3      	ldrhlt	r3, [r4, #12]
 8010c1c:	181b      	addge	r3, r3, r0
 8010c1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010c22:	bfac      	ite	ge
 8010c24:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010c26:	81a3      	strhlt	r3, [r4, #12]
 8010c28:	bd10      	pop	{r4, pc}

08010c2a <__swrite>:
 8010c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c2e:	461f      	mov	r7, r3
 8010c30:	898b      	ldrh	r3, [r1, #12]
 8010c32:	05db      	lsls	r3, r3, #23
 8010c34:	4605      	mov	r5, r0
 8010c36:	460c      	mov	r4, r1
 8010c38:	4616      	mov	r6, r2
 8010c3a:	d505      	bpl.n	8010c48 <__swrite+0x1e>
 8010c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c40:	2302      	movs	r3, #2
 8010c42:	2200      	movs	r2, #0
 8010c44:	f000 f91a 	bl	8010e7c <_lseek_r>
 8010c48:	89a3      	ldrh	r3, [r4, #12]
 8010c4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010c4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010c52:	81a3      	strh	r3, [r4, #12]
 8010c54:	4632      	mov	r2, r6
 8010c56:	463b      	mov	r3, r7
 8010c58:	4628      	mov	r0, r5
 8010c5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010c5e:	f000 b955 	b.w	8010f0c <_write_r>

08010c62 <__sseek>:
 8010c62:	b510      	push	{r4, lr}
 8010c64:	460c      	mov	r4, r1
 8010c66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c6a:	f000 f907 	bl	8010e7c <_lseek_r>
 8010c6e:	1c43      	adds	r3, r0, #1
 8010c70:	89a3      	ldrh	r3, [r4, #12]
 8010c72:	bf15      	itete	ne
 8010c74:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010c76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010c7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010c7e:	81a3      	strheq	r3, [r4, #12]
 8010c80:	bf18      	it	ne
 8010c82:	81a3      	strhne	r3, [r4, #12]
 8010c84:	bd10      	pop	{r4, pc}

08010c86 <__sclose>:
 8010c86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c8a:	f000 b8e7 	b.w	8010e5c <_close_r>

08010c8e <__swbuf_r>:
 8010c8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c90:	460e      	mov	r6, r1
 8010c92:	4614      	mov	r4, r2
 8010c94:	4605      	mov	r5, r0
 8010c96:	b118      	cbz	r0, 8010ca0 <__swbuf_r+0x12>
 8010c98:	6a03      	ldr	r3, [r0, #32]
 8010c9a:	b90b      	cbnz	r3, 8010ca0 <__swbuf_r+0x12>
 8010c9c:	f7ff ff06 	bl	8010aac <__sinit>
 8010ca0:	69a3      	ldr	r3, [r4, #24]
 8010ca2:	60a3      	str	r3, [r4, #8]
 8010ca4:	89a3      	ldrh	r3, [r4, #12]
 8010ca6:	071a      	lsls	r2, r3, #28
 8010ca8:	d501      	bpl.n	8010cae <__swbuf_r+0x20>
 8010caa:	6923      	ldr	r3, [r4, #16]
 8010cac:	b943      	cbnz	r3, 8010cc0 <__swbuf_r+0x32>
 8010cae:	4621      	mov	r1, r4
 8010cb0:	4628      	mov	r0, r5
 8010cb2:	f000 f82b 	bl	8010d0c <__swsetup_r>
 8010cb6:	b118      	cbz	r0, 8010cc0 <__swbuf_r+0x32>
 8010cb8:	f04f 37ff 	mov.w	r7, #4294967295
 8010cbc:	4638      	mov	r0, r7
 8010cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010cc0:	6823      	ldr	r3, [r4, #0]
 8010cc2:	6922      	ldr	r2, [r4, #16]
 8010cc4:	1a98      	subs	r0, r3, r2
 8010cc6:	6963      	ldr	r3, [r4, #20]
 8010cc8:	b2f6      	uxtb	r6, r6
 8010cca:	4283      	cmp	r3, r0
 8010ccc:	4637      	mov	r7, r6
 8010cce:	dc05      	bgt.n	8010cdc <__swbuf_r+0x4e>
 8010cd0:	4621      	mov	r1, r4
 8010cd2:	4628      	mov	r0, r5
 8010cd4:	f000 fd06 	bl	80116e4 <_fflush_r>
 8010cd8:	2800      	cmp	r0, #0
 8010cda:	d1ed      	bne.n	8010cb8 <__swbuf_r+0x2a>
 8010cdc:	68a3      	ldr	r3, [r4, #8]
 8010cde:	3b01      	subs	r3, #1
 8010ce0:	60a3      	str	r3, [r4, #8]
 8010ce2:	6823      	ldr	r3, [r4, #0]
 8010ce4:	1c5a      	adds	r2, r3, #1
 8010ce6:	6022      	str	r2, [r4, #0]
 8010ce8:	701e      	strb	r6, [r3, #0]
 8010cea:	6962      	ldr	r2, [r4, #20]
 8010cec:	1c43      	adds	r3, r0, #1
 8010cee:	429a      	cmp	r2, r3
 8010cf0:	d004      	beq.n	8010cfc <__swbuf_r+0x6e>
 8010cf2:	89a3      	ldrh	r3, [r4, #12]
 8010cf4:	07db      	lsls	r3, r3, #31
 8010cf6:	d5e1      	bpl.n	8010cbc <__swbuf_r+0x2e>
 8010cf8:	2e0a      	cmp	r6, #10
 8010cfa:	d1df      	bne.n	8010cbc <__swbuf_r+0x2e>
 8010cfc:	4621      	mov	r1, r4
 8010cfe:	4628      	mov	r0, r5
 8010d00:	f000 fcf0 	bl	80116e4 <_fflush_r>
 8010d04:	2800      	cmp	r0, #0
 8010d06:	d0d9      	beq.n	8010cbc <__swbuf_r+0x2e>
 8010d08:	e7d6      	b.n	8010cb8 <__swbuf_r+0x2a>
	...

08010d0c <__swsetup_r>:
 8010d0c:	b538      	push	{r3, r4, r5, lr}
 8010d0e:	4b29      	ldr	r3, [pc, #164]	@ (8010db4 <__swsetup_r+0xa8>)
 8010d10:	4605      	mov	r5, r0
 8010d12:	6818      	ldr	r0, [r3, #0]
 8010d14:	460c      	mov	r4, r1
 8010d16:	b118      	cbz	r0, 8010d20 <__swsetup_r+0x14>
 8010d18:	6a03      	ldr	r3, [r0, #32]
 8010d1a:	b90b      	cbnz	r3, 8010d20 <__swsetup_r+0x14>
 8010d1c:	f7ff fec6 	bl	8010aac <__sinit>
 8010d20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d24:	0719      	lsls	r1, r3, #28
 8010d26:	d422      	bmi.n	8010d6e <__swsetup_r+0x62>
 8010d28:	06da      	lsls	r2, r3, #27
 8010d2a:	d407      	bmi.n	8010d3c <__swsetup_r+0x30>
 8010d2c:	2209      	movs	r2, #9
 8010d2e:	602a      	str	r2, [r5, #0]
 8010d30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d34:	81a3      	strh	r3, [r4, #12]
 8010d36:	f04f 30ff 	mov.w	r0, #4294967295
 8010d3a:	e033      	b.n	8010da4 <__swsetup_r+0x98>
 8010d3c:	0758      	lsls	r0, r3, #29
 8010d3e:	d512      	bpl.n	8010d66 <__swsetup_r+0x5a>
 8010d40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010d42:	b141      	cbz	r1, 8010d56 <__swsetup_r+0x4a>
 8010d44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010d48:	4299      	cmp	r1, r3
 8010d4a:	d002      	beq.n	8010d52 <__swsetup_r+0x46>
 8010d4c:	4628      	mov	r0, r5
 8010d4e:	f000 f92b 	bl	8010fa8 <_free_r>
 8010d52:	2300      	movs	r3, #0
 8010d54:	6363      	str	r3, [r4, #52]	@ 0x34
 8010d56:	89a3      	ldrh	r3, [r4, #12]
 8010d58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010d5c:	81a3      	strh	r3, [r4, #12]
 8010d5e:	2300      	movs	r3, #0
 8010d60:	6063      	str	r3, [r4, #4]
 8010d62:	6923      	ldr	r3, [r4, #16]
 8010d64:	6023      	str	r3, [r4, #0]
 8010d66:	89a3      	ldrh	r3, [r4, #12]
 8010d68:	f043 0308 	orr.w	r3, r3, #8
 8010d6c:	81a3      	strh	r3, [r4, #12]
 8010d6e:	6923      	ldr	r3, [r4, #16]
 8010d70:	b94b      	cbnz	r3, 8010d86 <__swsetup_r+0x7a>
 8010d72:	89a3      	ldrh	r3, [r4, #12]
 8010d74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010d78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010d7c:	d003      	beq.n	8010d86 <__swsetup_r+0x7a>
 8010d7e:	4621      	mov	r1, r4
 8010d80:	4628      	mov	r0, r5
 8010d82:	f000 fcfd 	bl	8011780 <__smakebuf_r>
 8010d86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d8a:	f013 0201 	ands.w	r2, r3, #1
 8010d8e:	d00a      	beq.n	8010da6 <__swsetup_r+0x9a>
 8010d90:	2200      	movs	r2, #0
 8010d92:	60a2      	str	r2, [r4, #8]
 8010d94:	6962      	ldr	r2, [r4, #20]
 8010d96:	4252      	negs	r2, r2
 8010d98:	61a2      	str	r2, [r4, #24]
 8010d9a:	6922      	ldr	r2, [r4, #16]
 8010d9c:	b942      	cbnz	r2, 8010db0 <__swsetup_r+0xa4>
 8010d9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010da2:	d1c5      	bne.n	8010d30 <__swsetup_r+0x24>
 8010da4:	bd38      	pop	{r3, r4, r5, pc}
 8010da6:	0799      	lsls	r1, r3, #30
 8010da8:	bf58      	it	pl
 8010daa:	6962      	ldrpl	r2, [r4, #20]
 8010dac:	60a2      	str	r2, [r4, #8]
 8010dae:	e7f4      	b.n	8010d9a <__swsetup_r+0x8e>
 8010db0:	2000      	movs	r0, #0
 8010db2:	e7f7      	b.n	8010da4 <__swsetup_r+0x98>
 8010db4:	2400006c 	.word	0x2400006c

08010db8 <memmove>:
 8010db8:	4288      	cmp	r0, r1
 8010dba:	b510      	push	{r4, lr}
 8010dbc:	eb01 0402 	add.w	r4, r1, r2
 8010dc0:	d902      	bls.n	8010dc8 <memmove+0x10>
 8010dc2:	4284      	cmp	r4, r0
 8010dc4:	4623      	mov	r3, r4
 8010dc6:	d807      	bhi.n	8010dd8 <memmove+0x20>
 8010dc8:	1e43      	subs	r3, r0, #1
 8010dca:	42a1      	cmp	r1, r4
 8010dcc:	d008      	beq.n	8010de0 <memmove+0x28>
 8010dce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010dd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010dd6:	e7f8      	b.n	8010dca <memmove+0x12>
 8010dd8:	4402      	add	r2, r0
 8010dda:	4601      	mov	r1, r0
 8010ddc:	428a      	cmp	r2, r1
 8010dde:	d100      	bne.n	8010de2 <memmove+0x2a>
 8010de0:	bd10      	pop	{r4, pc}
 8010de2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010de6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010dea:	e7f7      	b.n	8010ddc <memmove+0x24>

08010dec <memset>:
 8010dec:	4402      	add	r2, r0
 8010dee:	4603      	mov	r3, r0
 8010df0:	4293      	cmp	r3, r2
 8010df2:	d100      	bne.n	8010df6 <memset+0xa>
 8010df4:	4770      	bx	lr
 8010df6:	f803 1b01 	strb.w	r1, [r3], #1
 8010dfa:	e7f9      	b.n	8010df0 <memset+0x4>

08010dfc <_raise_r>:
 8010dfc:	291f      	cmp	r1, #31
 8010dfe:	b538      	push	{r3, r4, r5, lr}
 8010e00:	4605      	mov	r5, r0
 8010e02:	460c      	mov	r4, r1
 8010e04:	d904      	bls.n	8010e10 <_raise_r+0x14>
 8010e06:	2316      	movs	r3, #22
 8010e08:	6003      	str	r3, [r0, #0]
 8010e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8010e0e:	bd38      	pop	{r3, r4, r5, pc}
 8010e10:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010e12:	b112      	cbz	r2, 8010e1a <_raise_r+0x1e>
 8010e14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010e18:	b94b      	cbnz	r3, 8010e2e <_raise_r+0x32>
 8010e1a:	4628      	mov	r0, r5
 8010e1c:	f000 f864 	bl	8010ee8 <_getpid_r>
 8010e20:	4622      	mov	r2, r4
 8010e22:	4601      	mov	r1, r0
 8010e24:	4628      	mov	r0, r5
 8010e26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e2a:	f000 b84b 	b.w	8010ec4 <_kill_r>
 8010e2e:	2b01      	cmp	r3, #1
 8010e30:	d00a      	beq.n	8010e48 <_raise_r+0x4c>
 8010e32:	1c59      	adds	r1, r3, #1
 8010e34:	d103      	bne.n	8010e3e <_raise_r+0x42>
 8010e36:	2316      	movs	r3, #22
 8010e38:	6003      	str	r3, [r0, #0]
 8010e3a:	2001      	movs	r0, #1
 8010e3c:	e7e7      	b.n	8010e0e <_raise_r+0x12>
 8010e3e:	2100      	movs	r1, #0
 8010e40:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010e44:	4620      	mov	r0, r4
 8010e46:	4798      	blx	r3
 8010e48:	2000      	movs	r0, #0
 8010e4a:	e7e0      	b.n	8010e0e <_raise_r+0x12>

08010e4c <raise>:
 8010e4c:	4b02      	ldr	r3, [pc, #8]	@ (8010e58 <raise+0xc>)
 8010e4e:	4601      	mov	r1, r0
 8010e50:	6818      	ldr	r0, [r3, #0]
 8010e52:	f7ff bfd3 	b.w	8010dfc <_raise_r>
 8010e56:	bf00      	nop
 8010e58:	2400006c 	.word	0x2400006c

08010e5c <_close_r>:
 8010e5c:	b538      	push	{r3, r4, r5, lr}
 8010e5e:	4d06      	ldr	r5, [pc, #24]	@ (8010e78 <_close_r+0x1c>)
 8010e60:	2300      	movs	r3, #0
 8010e62:	4604      	mov	r4, r0
 8010e64:	4608      	mov	r0, r1
 8010e66:	602b      	str	r3, [r5, #0]
 8010e68:	f7f2 fcf2 	bl	8003850 <_close>
 8010e6c:	1c43      	adds	r3, r0, #1
 8010e6e:	d102      	bne.n	8010e76 <_close_r+0x1a>
 8010e70:	682b      	ldr	r3, [r5, #0]
 8010e72:	b103      	cbz	r3, 8010e76 <_close_r+0x1a>
 8010e74:	6023      	str	r3, [r4, #0]
 8010e76:	bd38      	pop	{r3, r4, r5, pc}
 8010e78:	24000d78 	.word	0x24000d78

08010e7c <_lseek_r>:
 8010e7c:	b538      	push	{r3, r4, r5, lr}
 8010e7e:	4d07      	ldr	r5, [pc, #28]	@ (8010e9c <_lseek_r+0x20>)
 8010e80:	4604      	mov	r4, r0
 8010e82:	4608      	mov	r0, r1
 8010e84:	4611      	mov	r1, r2
 8010e86:	2200      	movs	r2, #0
 8010e88:	602a      	str	r2, [r5, #0]
 8010e8a:	461a      	mov	r2, r3
 8010e8c:	f7f2 fd07 	bl	800389e <_lseek>
 8010e90:	1c43      	adds	r3, r0, #1
 8010e92:	d102      	bne.n	8010e9a <_lseek_r+0x1e>
 8010e94:	682b      	ldr	r3, [r5, #0]
 8010e96:	b103      	cbz	r3, 8010e9a <_lseek_r+0x1e>
 8010e98:	6023      	str	r3, [r4, #0]
 8010e9a:	bd38      	pop	{r3, r4, r5, pc}
 8010e9c:	24000d78 	.word	0x24000d78

08010ea0 <_read_r>:
 8010ea0:	b538      	push	{r3, r4, r5, lr}
 8010ea2:	4d07      	ldr	r5, [pc, #28]	@ (8010ec0 <_read_r+0x20>)
 8010ea4:	4604      	mov	r4, r0
 8010ea6:	4608      	mov	r0, r1
 8010ea8:	4611      	mov	r1, r2
 8010eaa:	2200      	movs	r2, #0
 8010eac:	602a      	str	r2, [r5, #0]
 8010eae:	461a      	mov	r2, r3
 8010eb0:	f7f2 fc95 	bl	80037de <_read>
 8010eb4:	1c43      	adds	r3, r0, #1
 8010eb6:	d102      	bne.n	8010ebe <_read_r+0x1e>
 8010eb8:	682b      	ldr	r3, [r5, #0]
 8010eba:	b103      	cbz	r3, 8010ebe <_read_r+0x1e>
 8010ebc:	6023      	str	r3, [r4, #0]
 8010ebe:	bd38      	pop	{r3, r4, r5, pc}
 8010ec0:	24000d78 	.word	0x24000d78

08010ec4 <_kill_r>:
 8010ec4:	b538      	push	{r3, r4, r5, lr}
 8010ec6:	4d07      	ldr	r5, [pc, #28]	@ (8010ee4 <_kill_r+0x20>)
 8010ec8:	2300      	movs	r3, #0
 8010eca:	4604      	mov	r4, r0
 8010ecc:	4608      	mov	r0, r1
 8010ece:	4611      	mov	r1, r2
 8010ed0:	602b      	str	r3, [r5, #0]
 8010ed2:	f7f2 fc69 	bl	80037a8 <_kill>
 8010ed6:	1c43      	adds	r3, r0, #1
 8010ed8:	d102      	bne.n	8010ee0 <_kill_r+0x1c>
 8010eda:	682b      	ldr	r3, [r5, #0]
 8010edc:	b103      	cbz	r3, 8010ee0 <_kill_r+0x1c>
 8010ede:	6023      	str	r3, [r4, #0]
 8010ee0:	bd38      	pop	{r3, r4, r5, pc}
 8010ee2:	bf00      	nop
 8010ee4:	24000d78 	.word	0x24000d78

08010ee8 <_getpid_r>:
 8010ee8:	f7f2 bc56 	b.w	8003798 <_getpid>

08010eec <_sbrk_r>:
 8010eec:	b538      	push	{r3, r4, r5, lr}
 8010eee:	4d06      	ldr	r5, [pc, #24]	@ (8010f08 <_sbrk_r+0x1c>)
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	4604      	mov	r4, r0
 8010ef4:	4608      	mov	r0, r1
 8010ef6:	602b      	str	r3, [r5, #0]
 8010ef8:	f7f2 fcde 	bl	80038b8 <_sbrk>
 8010efc:	1c43      	adds	r3, r0, #1
 8010efe:	d102      	bne.n	8010f06 <_sbrk_r+0x1a>
 8010f00:	682b      	ldr	r3, [r5, #0]
 8010f02:	b103      	cbz	r3, 8010f06 <_sbrk_r+0x1a>
 8010f04:	6023      	str	r3, [r4, #0]
 8010f06:	bd38      	pop	{r3, r4, r5, pc}
 8010f08:	24000d78 	.word	0x24000d78

08010f0c <_write_r>:
 8010f0c:	b538      	push	{r3, r4, r5, lr}
 8010f0e:	4d07      	ldr	r5, [pc, #28]	@ (8010f2c <_write_r+0x20>)
 8010f10:	4604      	mov	r4, r0
 8010f12:	4608      	mov	r0, r1
 8010f14:	4611      	mov	r1, r2
 8010f16:	2200      	movs	r2, #0
 8010f18:	602a      	str	r2, [r5, #0]
 8010f1a:	461a      	mov	r2, r3
 8010f1c:	f7f2 fc7c 	bl	8003818 <_write>
 8010f20:	1c43      	adds	r3, r0, #1
 8010f22:	d102      	bne.n	8010f2a <_write_r+0x1e>
 8010f24:	682b      	ldr	r3, [r5, #0]
 8010f26:	b103      	cbz	r3, 8010f2a <_write_r+0x1e>
 8010f28:	6023      	str	r3, [r4, #0]
 8010f2a:	bd38      	pop	{r3, r4, r5, pc}
 8010f2c:	24000d78 	.word	0x24000d78

08010f30 <__errno>:
 8010f30:	4b01      	ldr	r3, [pc, #4]	@ (8010f38 <__errno+0x8>)
 8010f32:	6818      	ldr	r0, [r3, #0]
 8010f34:	4770      	bx	lr
 8010f36:	bf00      	nop
 8010f38:	2400006c 	.word	0x2400006c

08010f3c <__libc_init_array>:
 8010f3c:	b570      	push	{r4, r5, r6, lr}
 8010f3e:	4d0d      	ldr	r5, [pc, #52]	@ (8010f74 <__libc_init_array+0x38>)
 8010f40:	4c0d      	ldr	r4, [pc, #52]	@ (8010f78 <__libc_init_array+0x3c>)
 8010f42:	1b64      	subs	r4, r4, r5
 8010f44:	10a4      	asrs	r4, r4, #2
 8010f46:	2600      	movs	r6, #0
 8010f48:	42a6      	cmp	r6, r4
 8010f4a:	d109      	bne.n	8010f60 <__libc_init_array+0x24>
 8010f4c:	4d0b      	ldr	r5, [pc, #44]	@ (8010f7c <__libc_init_array+0x40>)
 8010f4e:	4c0c      	ldr	r4, [pc, #48]	@ (8010f80 <__libc_init_array+0x44>)
 8010f50:	f000 fca8 	bl	80118a4 <_init>
 8010f54:	1b64      	subs	r4, r4, r5
 8010f56:	10a4      	asrs	r4, r4, #2
 8010f58:	2600      	movs	r6, #0
 8010f5a:	42a6      	cmp	r6, r4
 8010f5c:	d105      	bne.n	8010f6a <__libc_init_array+0x2e>
 8010f5e:	bd70      	pop	{r4, r5, r6, pc}
 8010f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f64:	4798      	blx	r3
 8010f66:	3601      	adds	r6, #1
 8010f68:	e7ee      	b.n	8010f48 <__libc_init_array+0xc>
 8010f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f6e:	4798      	blx	r3
 8010f70:	3601      	adds	r6, #1
 8010f72:	e7f2      	b.n	8010f5a <__libc_init_array+0x1e>
 8010f74:	08011de8 	.word	0x08011de8
 8010f78:	08011de8 	.word	0x08011de8
 8010f7c:	08011de8 	.word	0x08011de8
 8010f80:	08011df0 	.word	0x08011df0

08010f84 <__retarget_lock_init_recursive>:
 8010f84:	4770      	bx	lr

08010f86 <__retarget_lock_acquire_recursive>:
 8010f86:	4770      	bx	lr

08010f88 <__retarget_lock_release_recursive>:
 8010f88:	4770      	bx	lr

08010f8a <memcpy>:
 8010f8a:	440a      	add	r2, r1
 8010f8c:	4291      	cmp	r1, r2
 8010f8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8010f92:	d100      	bne.n	8010f96 <memcpy+0xc>
 8010f94:	4770      	bx	lr
 8010f96:	b510      	push	{r4, lr}
 8010f98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010fa0:	4291      	cmp	r1, r2
 8010fa2:	d1f9      	bne.n	8010f98 <memcpy+0xe>
 8010fa4:	bd10      	pop	{r4, pc}
	...

08010fa8 <_free_r>:
 8010fa8:	b538      	push	{r3, r4, r5, lr}
 8010faa:	4605      	mov	r5, r0
 8010fac:	2900      	cmp	r1, #0
 8010fae:	d041      	beq.n	8011034 <_free_r+0x8c>
 8010fb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010fb4:	1f0c      	subs	r4, r1, #4
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	bfb8      	it	lt
 8010fba:	18e4      	addlt	r4, r4, r3
 8010fbc:	f7ff fcde 	bl	801097c <__malloc_lock>
 8010fc0:	4a1d      	ldr	r2, [pc, #116]	@ (8011038 <_free_r+0x90>)
 8010fc2:	6813      	ldr	r3, [r2, #0]
 8010fc4:	b933      	cbnz	r3, 8010fd4 <_free_r+0x2c>
 8010fc6:	6063      	str	r3, [r4, #4]
 8010fc8:	6014      	str	r4, [r2, #0]
 8010fca:	4628      	mov	r0, r5
 8010fcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010fd0:	f7ff bcda 	b.w	8010988 <__malloc_unlock>
 8010fd4:	42a3      	cmp	r3, r4
 8010fd6:	d908      	bls.n	8010fea <_free_r+0x42>
 8010fd8:	6820      	ldr	r0, [r4, #0]
 8010fda:	1821      	adds	r1, r4, r0
 8010fdc:	428b      	cmp	r3, r1
 8010fde:	bf01      	itttt	eq
 8010fe0:	6819      	ldreq	r1, [r3, #0]
 8010fe2:	685b      	ldreq	r3, [r3, #4]
 8010fe4:	1809      	addeq	r1, r1, r0
 8010fe6:	6021      	streq	r1, [r4, #0]
 8010fe8:	e7ed      	b.n	8010fc6 <_free_r+0x1e>
 8010fea:	461a      	mov	r2, r3
 8010fec:	685b      	ldr	r3, [r3, #4]
 8010fee:	b10b      	cbz	r3, 8010ff4 <_free_r+0x4c>
 8010ff0:	42a3      	cmp	r3, r4
 8010ff2:	d9fa      	bls.n	8010fea <_free_r+0x42>
 8010ff4:	6811      	ldr	r1, [r2, #0]
 8010ff6:	1850      	adds	r0, r2, r1
 8010ff8:	42a0      	cmp	r0, r4
 8010ffa:	d10b      	bne.n	8011014 <_free_r+0x6c>
 8010ffc:	6820      	ldr	r0, [r4, #0]
 8010ffe:	4401      	add	r1, r0
 8011000:	1850      	adds	r0, r2, r1
 8011002:	4283      	cmp	r3, r0
 8011004:	6011      	str	r1, [r2, #0]
 8011006:	d1e0      	bne.n	8010fca <_free_r+0x22>
 8011008:	6818      	ldr	r0, [r3, #0]
 801100a:	685b      	ldr	r3, [r3, #4]
 801100c:	6053      	str	r3, [r2, #4]
 801100e:	4408      	add	r0, r1
 8011010:	6010      	str	r0, [r2, #0]
 8011012:	e7da      	b.n	8010fca <_free_r+0x22>
 8011014:	d902      	bls.n	801101c <_free_r+0x74>
 8011016:	230c      	movs	r3, #12
 8011018:	602b      	str	r3, [r5, #0]
 801101a:	e7d6      	b.n	8010fca <_free_r+0x22>
 801101c:	6820      	ldr	r0, [r4, #0]
 801101e:	1821      	adds	r1, r4, r0
 8011020:	428b      	cmp	r3, r1
 8011022:	bf04      	itt	eq
 8011024:	6819      	ldreq	r1, [r3, #0]
 8011026:	685b      	ldreq	r3, [r3, #4]
 8011028:	6063      	str	r3, [r4, #4]
 801102a:	bf04      	itt	eq
 801102c:	1809      	addeq	r1, r1, r0
 801102e:	6021      	streq	r1, [r4, #0]
 8011030:	6054      	str	r4, [r2, #4]
 8011032:	e7ca      	b.n	8010fca <_free_r+0x22>
 8011034:	bd38      	pop	{r3, r4, r5, pc}
 8011036:	bf00      	nop
 8011038:	24000c38 	.word	0x24000c38

0801103c <__sfputc_r>:
 801103c:	6893      	ldr	r3, [r2, #8]
 801103e:	3b01      	subs	r3, #1
 8011040:	2b00      	cmp	r3, #0
 8011042:	b410      	push	{r4}
 8011044:	6093      	str	r3, [r2, #8]
 8011046:	da08      	bge.n	801105a <__sfputc_r+0x1e>
 8011048:	6994      	ldr	r4, [r2, #24]
 801104a:	42a3      	cmp	r3, r4
 801104c:	db01      	blt.n	8011052 <__sfputc_r+0x16>
 801104e:	290a      	cmp	r1, #10
 8011050:	d103      	bne.n	801105a <__sfputc_r+0x1e>
 8011052:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011056:	f7ff be1a 	b.w	8010c8e <__swbuf_r>
 801105a:	6813      	ldr	r3, [r2, #0]
 801105c:	1c58      	adds	r0, r3, #1
 801105e:	6010      	str	r0, [r2, #0]
 8011060:	7019      	strb	r1, [r3, #0]
 8011062:	4608      	mov	r0, r1
 8011064:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011068:	4770      	bx	lr

0801106a <__sfputs_r>:
 801106a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801106c:	4606      	mov	r6, r0
 801106e:	460f      	mov	r7, r1
 8011070:	4614      	mov	r4, r2
 8011072:	18d5      	adds	r5, r2, r3
 8011074:	42ac      	cmp	r4, r5
 8011076:	d101      	bne.n	801107c <__sfputs_r+0x12>
 8011078:	2000      	movs	r0, #0
 801107a:	e007      	b.n	801108c <__sfputs_r+0x22>
 801107c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011080:	463a      	mov	r2, r7
 8011082:	4630      	mov	r0, r6
 8011084:	f7ff ffda 	bl	801103c <__sfputc_r>
 8011088:	1c43      	adds	r3, r0, #1
 801108a:	d1f3      	bne.n	8011074 <__sfputs_r+0xa>
 801108c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011090 <_vfiprintf_r>:
 8011090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011094:	460d      	mov	r5, r1
 8011096:	b09d      	sub	sp, #116	@ 0x74
 8011098:	4614      	mov	r4, r2
 801109a:	4698      	mov	r8, r3
 801109c:	4606      	mov	r6, r0
 801109e:	b118      	cbz	r0, 80110a8 <_vfiprintf_r+0x18>
 80110a0:	6a03      	ldr	r3, [r0, #32]
 80110a2:	b90b      	cbnz	r3, 80110a8 <_vfiprintf_r+0x18>
 80110a4:	f7ff fd02 	bl	8010aac <__sinit>
 80110a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80110aa:	07d9      	lsls	r1, r3, #31
 80110ac:	d405      	bmi.n	80110ba <_vfiprintf_r+0x2a>
 80110ae:	89ab      	ldrh	r3, [r5, #12]
 80110b0:	059a      	lsls	r2, r3, #22
 80110b2:	d402      	bmi.n	80110ba <_vfiprintf_r+0x2a>
 80110b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80110b6:	f7ff ff66 	bl	8010f86 <__retarget_lock_acquire_recursive>
 80110ba:	89ab      	ldrh	r3, [r5, #12]
 80110bc:	071b      	lsls	r3, r3, #28
 80110be:	d501      	bpl.n	80110c4 <_vfiprintf_r+0x34>
 80110c0:	692b      	ldr	r3, [r5, #16]
 80110c2:	b99b      	cbnz	r3, 80110ec <_vfiprintf_r+0x5c>
 80110c4:	4629      	mov	r1, r5
 80110c6:	4630      	mov	r0, r6
 80110c8:	f7ff fe20 	bl	8010d0c <__swsetup_r>
 80110cc:	b170      	cbz	r0, 80110ec <_vfiprintf_r+0x5c>
 80110ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80110d0:	07dc      	lsls	r4, r3, #31
 80110d2:	d504      	bpl.n	80110de <_vfiprintf_r+0x4e>
 80110d4:	f04f 30ff 	mov.w	r0, #4294967295
 80110d8:	b01d      	add	sp, #116	@ 0x74
 80110da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110de:	89ab      	ldrh	r3, [r5, #12]
 80110e0:	0598      	lsls	r0, r3, #22
 80110e2:	d4f7      	bmi.n	80110d4 <_vfiprintf_r+0x44>
 80110e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80110e6:	f7ff ff4f 	bl	8010f88 <__retarget_lock_release_recursive>
 80110ea:	e7f3      	b.n	80110d4 <_vfiprintf_r+0x44>
 80110ec:	2300      	movs	r3, #0
 80110ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80110f0:	2320      	movs	r3, #32
 80110f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80110f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80110fa:	2330      	movs	r3, #48	@ 0x30
 80110fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80112ac <_vfiprintf_r+0x21c>
 8011100:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011104:	f04f 0901 	mov.w	r9, #1
 8011108:	4623      	mov	r3, r4
 801110a:	469a      	mov	sl, r3
 801110c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011110:	b10a      	cbz	r2, 8011116 <_vfiprintf_r+0x86>
 8011112:	2a25      	cmp	r2, #37	@ 0x25
 8011114:	d1f9      	bne.n	801110a <_vfiprintf_r+0x7a>
 8011116:	ebba 0b04 	subs.w	fp, sl, r4
 801111a:	d00b      	beq.n	8011134 <_vfiprintf_r+0xa4>
 801111c:	465b      	mov	r3, fp
 801111e:	4622      	mov	r2, r4
 8011120:	4629      	mov	r1, r5
 8011122:	4630      	mov	r0, r6
 8011124:	f7ff ffa1 	bl	801106a <__sfputs_r>
 8011128:	3001      	adds	r0, #1
 801112a:	f000 80a7 	beq.w	801127c <_vfiprintf_r+0x1ec>
 801112e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011130:	445a      	add	r2, fp
 8011132:	9209      	str	r2, [sp, #36]	@ 0x24
 8011134:	f89a 3000 	ldrb.w	r3, [sl]
 8011138:	2b00      	cmp	r3, #0
 801113a:	f000 809f 	beq.w	801127c <_vfiprintf_r+0x1ec>
 801113e:	2300      	movs	r3, #0
 8011140:	f04f 32ff 	mov.w	r2, #4294967295
 8011144:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011148:	f10a 0a01 	add.w	sl, sl, #1
 801114c:	9304      	str	r3, [sp, #16]
 801114e:	9307      	str	r3, [sp, #28]
 8011150:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011154:	931a      	str	r3, [sp, #104]	@ 0x68
 8011156:	4654      	mov	r4, sl
 8011158:	2205      	movs	r2, #5
 801115a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801115e:	4853      	ldr	r0, [pc, #332]	@ (80112ac <_vfiprintf_r+0x21c>)
 8011160:	f7ef f8be 	bl	80002e0 <memchr>
 8011164:	9a04      	ldr	r2, [sp, #16]
 8011166:	b9d8      	cbnz	r0, 80111a0 <_vfiprintf_r+0x110>
 8011168:	06d1      	lsls	r1, r2, #27
 801116a:	bf44      	itt	mi
 801116c:	2320      	movmi	r3, #32
 801116e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011172:	0713      	lsls	r3, r2, #28
 8011174:	bf44      	itt	mi
 8011176:	232b      	movmi	r3, #43	@ 0x2b
 8011178:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801117c:	f89a 3000 	ldrb.w	r3, [sl]
 8011180:	2b2a      	cmp	r3, #42	@ 0x2a
 8011182:	d015      	beq.n	80111b0 <_vfiprintf_r+0x120>
 8011184:	9a07      	ldr	r2, [sp, #28]
 8011186:	4654      	mov	r4, sl
 8011188:	2000      	movs	r0, #0
 801118a:	f04f 0c0a 	mov.w	ip, #10
 801118e:	4621      	mov	r1, r4
 8011190:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011194:	3b30      	subs	r3, #48	@ 0x30
 8011196:	2b09      	cmp	r3, #9
 8011198:	d94b      	bls.n	8011232 <_vfiprintf_r+0x1a2>
 801119a:	b1b0      	cbz	r0, 80111ca <_vfiprintf_r+0x13a>
 801119c:	9207      	str	r2, [sp, #28]
 801119e:	e014      	b.n	80111ca <_vfiprintf_r+0x13a>
 80111a0:	eba0 0308 	sub.w	r3, r0, r8
 80111a4:	fa09 f303 	lsl.w	r3, r9, r3
 80111a8:	4313      	orrs	r3, r2
 80111aa:	9304      	str	r3, [sp, #16]
 80111ac:	46a2      	mov	sl, r4
 80111ae:	e7d2      	b.n	8011156 <_vfiprintf_r+0xc6>
 80111b0:	9b03      	ldr	r3, [sp, #12]
 80111b2:	1d19      	adds	r1, r3, #4
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	9103      	str	r1, [sp, #12]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	bfbb      	ittet	lt
 80111bc:	425b      	neglt	r3, r3
 80111be:	f042 0202 	orrlt.w	r2, r2, #2
 80111c2:	9307      	strge	r3, [sp, #28]
 80111c4:	9307      	strlt	r3, [sp, #28]
 80111c6:	bfb8      	it	lt
 80111c8:	9204      	strlt	r2, [sp, #16]
 80111ca:	7823      	ldrb	r3, [r4, #0]
 80111cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80111ce:	d10a      	bne.n	80111e6 <_vfiprintf_r+0x156>
 80111d0:	7863      	ldrb	r3, [r4, #1]
 80111d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80111d4:	d132      	bne.n	801123c <_vfiprintf_r+0x1ac>
 80111d6:	9b03      	ldr	r3, [sp, #12]
 80111d8:	1d1a      	adds	r2, r3, #4
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	9203      	str	r2, [sp, #12]
 80111de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80111e2:	3402      	adds	r4, #2
 80111e4:	9305      	str	r3, [sp, #20]
 80111e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80112bc <_vfiprintf_r+0x22c>
 80111ea:	7821      	ldrb	r1, [r4, #0]
 80111ec:	2203      	movs	r2, #3
 80111ee:	4650      	mov	r0, sl
 80111f0:	f7ef f876 	bl	80002e0 <memchr>
 80111f4:	b138      	cbz	r0, 8011206 <_vfiprintf_r+0x176>
 80111f6:	9b04      	ldr	r3, [sp, #16]
 80111f8:	eba0 000a 	sub.w	r0, r0, sl
 80111fc:	2240      	movs	r2, #64	@ 0x40
 80111fe:	4082      	lsls	r2, r0
 8011200:	4313      	orrs	r3, r2
 8011202:	3401      	adds	r4, #1
 8011204:	9304      	str	r3, [sp, #16]
 8011206:	f814 1b01 	ldrb.w	r1, [r4], #1
 801120a:	4829      	ldr	r0, [pc, #164]	@ (80112b0 <_vfiprintf_r+0x220>)
 801120c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011210:	2206      	movs	r2, #6
 8011212:	f7ef f865 	bl	80002e0 <memchr>
 8011216:	2800      	cmp	r0, #0
 8011218:	d03f      	beq.n	801129a <_vfiprintf_r+0x20a>
 801121a:	4b26      	ldr	r3, [pc, #152]	@ (80112b4 <_vfiprintf_r+0x224>)
 801121c:	bb1b      	cbnz	r3, 8011266 <_vfiprintf_r+0x1d6>
 801121e:	9b03      	ldr	r3, [sp, #12]
 8011220:	3307      	adds	r3, #7
 8011222:	f023 0307 	bic.w	r3, r3, #7
 8011226:	3308      	adds	r3, #8
 8011228:	9303      	str	r3, [sp, #12]
 801122a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801122c:	443b      	add	r3, r7
 801122e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011230:	e76a      	b.n	8011108 <_vfiprintf_r+0x78>
 8011232:	fb0c 3202 	mla	r2, ip, r2, r3
 8011236:	460c      	mov	r4, r1
 8011238:	2001      	movs	r0, #1
 801123a:	e7a8      	b.n	801118e <_vfiprintf_r+0xfe>
 801123c:	2300      	movs	r3, #0
 801123e:	3401      	adds	r4, #1
 8011240:	9305      	str	r3, [sp, #20]
 8011242:	4619      	mov	r1, r3
 8011244:	f04f 0c0a 	mov.w	ip, #10
 8011248:	4620      	mov	r0, r4
 801124a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801124e:	3a30      	subs	r2, #48	@ 0x30
 8011250:	2a09      	cmp	r2, #9
 8011252:	d903      	bls.n	801125c <_vfiprintf_r+0x1cc>
 8011254:	2b00      	cmp	r3, #0
 8011256:	d0c6      	beq.n	80111e6 <_vfiprintf_r+0x156>
 8011258:	9105      	str	r1, [sp, #20]
 801125a:	e7c4      	b.n	80111e6 <_vfiprintf_r+0x156>
 801125c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011260:	4604      	mov	r4, r0
 8011262:	2301      	movs	r3, #1
 8011264:	e7f0      	b.n	8011248 <_vfiprintf_r+0x1b8>
 8011266:	ab03      	add	r3, sp, #12
 8011268:	9300      	str	r3, [sp, #0]
 801126a:	462a      	mov	r2, r5
 801126c:	4b12      	ldr	r3, [pc, #72]	@ (80112b8 <_vfiprintf_r+0x228>)
 801126e:	a904      	add	r1, sp, #16
 8011270:	4630      	mov	r0, r6
 8011272:	f3af 8000 	nop.w
 8011276:	4607      	mov	r7, r0
 8011278:	1c78      	adds	r0, r7, #1
 801127a:	d1d6      	bne.n	801122a <_vfiprintf_r+0x19a>
 801127c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801127e:	07d9      	lsls	r1, r3, #31
 8011280:	d405      	bmi.n	801128e <_vfiprintf_r+0x1fe>
 8011282:	89ab      	ldrh	r3, [r5, #12]
 8011284:	059a      	lsls	r2, r3, #22
 8011286:	d402      	bmi.n	801128e <_vfiprintf_r+0x1fe>
 8011288:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801128a:	f7ff fe7d 	bl	8010f88 <__retarget_lock_release_recursive>
 801128e:	89ab      	ldrh	r3, [r5, #12]
 8011290:	065b      	lsls	r3, r3, #25
 8011292:	f53f af1f 	bmi.w	80110d4 <_vfiprintf_r+0x44>
 8011296:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011298:	e71e      	b.n	80110d8 <_vfiprintf_r+0x48>
 801129a:	ab03      	add	r3, sp, #12
 801129c:	9300      	str	r3, [sp, #0]
 801129e:	462a      	mov	r2, r5
 80112a0:	4b05      	ldr	r3, [pc, #20]	@ (80112b8 <_vfiprintf_r+0x228>)
 80112a2:	a904      	add	r1, sp, #16
 80112a4:	4630      	mov	r0, r6
 80112a6:	f000 f879 	bl	801139c <_printf_i>
 80112aa:	e7e4      	b.n	8011276 <_vfiprintf_r+0x1e6>
 80112ac:	08011dad 	.word	0x08011dad
 80112b0:	08011db7 	.word	0x08011db7
 80112b4:	00000000 	.word	0x00000000
 80112b8:	0801106b 	.word	0x0801106b
 80112bc:	08011db3 	.word	0x08011db3

080112c0 <_printf_common>:
 80112c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112c4:	4616      	mov	r6, r2
 80112c6:	4698      	mov	r8, r3
 80112c8:	688a      	ldr	r2, [r1, #8]
 80112ca:	690b      	ldr	r3, [r1, #16]
 80112cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80112d0:	4293      	cmp	r3, r2
 80112d2:	bfb8      	it	lt
 80112d4:	4613      	movlt	r3, r2
 80112d6:	6033      	str	r3, [r6, #0]
 80112d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80112dc:	4607      	mov	r7, r0
 80112de:	460c      	mov	r4, r1
 80112e0:	b10a      	cbz	r2, 80112e6 <_printf_common+0x26>
 80112e2:	3301      	adds	r3, #1
 80112e4:	6033      	str	r3, [r6, #0]
 80112e6:	6823      	ldr	r3, [r4, #0]
 80112e8:	0699      	lsls	r1, r3, #26
 80112ea:	bf42      	ittt	mi
 80112ec:	6833      	ldrmi	r3, [r6, #0]
 80112ee:	3302      	addmi	r3, #2
 80112f0:	6033      	strmi	r3, [r6, #0]
 80112f2:	6825      	ldr	r5, [r4, #0]
 80112f4:	f015 0506 	ands.w	r5, r5, #6
 80112f8:	d106      	bne.n	8011308 <_printf_common+0x48>
 80112fa:	f104 0a19 	add.w	sl, r4, #25
 80112fe:	68e3      	ldr	r3, [r4, #12]
 8011300:	6832      	ldr	r2, [r6, #0]
 8011302:	1a9b      	subs	r3, r3, r2
 8011304:	42ab      	cmp	r3, r5
 8011306:	dc26      	bgt.n	8011356 <_printf_common+0x96>
 8011308:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801130c:	6822      	ldr	r2, [r4, #0]
 801130e:	3b00      	subs	r3, #0
 8011310:	bf18      	it	ne
 8011312:	2301      	movne	r3, #1
 8011314:	0692      	lsls	r2, r2, #26
 8011316:	d42b      	bmi.n	8011370 <_printf_common+0xb0>
 8011318:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801131c:	4641      	mov	r1, r8
 801131e:	4638      	mov	r0, r7
 8011320:	47c8      	blx	r9
 8011322:	3001      	adds	r0, #1
 8011324:	d01e      	beq.n	8011364 <_printf_common+0xa4>
 8011326:	6823      	ldr	r3, [r4, #0]
 8011328:	6922      	ldr	r2, [r4, #16]
 801132a:	f003 0306 	and.w	r3, r3, #6
 801132e:	2b04      	cmp	r3, #4
 8011330:	bf02      	ittt	eq
 8011332:	68e5      	ldreq	r5, [r4, #12]
 8011334:	6833      	ldreq	r3, [r6, #0]
 8011336:	1aed      	subeq	r5, r5, r3
 8011338:	68a3      	ldr	r3, [r4, #8]
 801133a:	bf0c      	ite	eq
 801133c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011340:	2500      	movne	r5, #0
 8011342:	4293      	cmp	r3, r2
 8011344:	bfc4      	itt	gt
 8011346:	1a9b      	subgt	r3, r3, r2
 8011348:	18ed      	addgt	r5, r5, r3
 801134a:	2600      	movs	r6, #0
 801134c:	341a      	adds	r4, #26
 801134e:	42b5      	cmp	r5, r6
 8011350:	d11a      	bne.n	8011388 <_printf_common+0xc8>
 8011352:	2000      	movs	r0, #0
 8011354:	e008      	b.n	8011368 <_printf_common+0xa8>
 8011356:	2301      	movs	r3, #1
 8011358:	4652      	mov	r2, sl
 801135a:	4641      	mov	r1, r8
 801135c:	4638      	mov	r0, r7
 801135e:	47c8      	blx	r9
 8011360:	3001      	adds	r0, #1
 8011362:	d103      	bne.n	801136c <_printf_common+0xac>
 8011364:	f04f 30ff 	mov.w	r0, #4294967295
 8011368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801136c:	3501      	adds	r5, #1
 801136e:	e7c6      	b.n	80112fe <_printf_common+0x3e>
 8011370:	18e1      	adds	r1, r4, r3
 8011372:	1c5a      	adds	r2, r3, #1
 8011374:	2030      	movs	r0, #48	@ 0x30
 8011376:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801137a:	4422      	add	r2, r4
 801137c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011380:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011384:	3302      	adds	r3, #2
 8011386:	e7c7      	b.n	8011318 <_printf_common+0x58>
 8011388:	2301      	movs	r3, #1
 801138a:	4622      	mov	r2, r4
 801138c:	4641      	mov	r1, r8
 801138e:	4638      	mov	r0, r7
 8011390:	47c8      	blx	r9
 8011392:	3001      	adds	r0, #1
 8011394:	d0e6      	beq.n	8011364 <_printf_common+0xa4>
 8011396:	3601      	adds	r6, #1
 8011398:	e7d9      	b.n	801134e <_printf_common+0x8e>
	...

0801139c <_printf_i>:
 801139c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80113a0:	7e0f      	ldrb	r7, [r1, #24]
 80113a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80113a4:	2f78      	cmp	r7, #120	@ 0x78
 80113a6:	4691      	mov	r9, r2
 80113a8:	4680      	mov	r8, r0
 80113aa:	460c      	mov	r4, r1
 80113ac:	469a      	mov	sl, r3
 80113ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80113b2:	d807      	bhi.n	80113c4 <_printf_i+0x28>
 80113b4:	2f62      	cmp	r7, #98	@ 0x62
 80113b6:	d80a      	bhi.n	80113ce <_printf_i+0x32>
 80113b8:	2f00      	cmp	r7, #0
 80113ba:	f000 80d2 	beq.w	8011562 <_printf_i+0x1c6>
 80113be:	2f58      	cmp	r7, #88	@ 0x58
 80113c0:	f000 80b9 	beq.w	8011536 <_printf_i+0x19a>
 80113c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80113c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80113cc:	e03a      	b.n	8011444 <_printf_i+0xa8>
 80113ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80113d2:	2b15      	cmp	r3, #21
 80113d4:	d8f6      	bhi.n	80113c4 <_printf_i+0x28>
 80113d6:	a101      	add	r1, pc, #4	@ (adr r1, 80113dc <_printf_i+0x40>)
 80113d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80113dc:	08011435 	.word	0x08011435
 80113e0:	08011449 	.word	0x08011449
 80113e4:	080113c5 	.word	0x080113c5
 80113e8:	080113c5 	.word	0x080113c5
 80113ec:	080113c5 	.word	0x080113c5
 80113f0:	080113c5 	.word	0x080113c5
 80113f4:	08011449 	.word	0x08011449
 80113f8:	080113c5 	.word	0x080113c5
 80113fc:	080113c5 	.word	0x080113c5
 8011400:	080113c5 	.word	0x080113c5
 8011404:	080113c5 	.word	0x080113c5
 8011408:	08011549 	.word	0x08011549
 801140c:	08011473 	.word	0x08011473
 8011410:	08011503 	.word	0x08011503
 8011414:	080113c5 	.word	0x080113c5
 8011418:	080113c5 	.word	0x080113c5
 801141c:	0801156b 	.word	0x0801156b
 8011420:	080113c5 	.word	0x080113c5
 8011424:	08011473 	.word	0x08011473
 8011428:	080113c5 	.word	0x080113c5
 801142c:	080113c5 	.word	0x080113c5
 8011430:	0801150b 	.word	0x0801150b
 8011434:	6833      	ldr	r3, [r6, #0]
 8011436:	1d1a      	adds	r2, r3, #4
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	6032      	str	r2, [r6, #0]
 801143c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011440:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011444:	2301      	movs	r3, #1
 8011446:	e09d      	b.n	8011584 <_printf_i+0x1e8>
 8011448:	6833      	ldr	r3, [r6, #0]
 801144a:	6820      	ldr	r0, [r4, #0]
 801144c:	1d19      	adds	r1, r3, #4
 801144e:	6031      	str	r1, [r6, #0]
 8011450:	0606      	lsls	r6, r0, #24
 8011452:	d501      	bpl.n	8011458 <_printf_i+0xbc>
 8011454:	681d      	ldr	r5, [r3, #0]
 8011456:	e003      	b.n	8011460 <_printf_i+0xc4>
 8011458:	0645      	lsls	r5, r0, #25
 801145a:	d5fb      	bpl.n	8011454 <_printf_i+0xb8>
 801145c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011460:	2d00      	cmp	r5, #0
 8011462:	da03      	bge.n	801146c <_printf_i+0xd0>
 8011464:	232d      	movs	r3, #45	@ 0x2d
 8011466:	426d      	negs	r5, r5
 8011468:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801146c:	4859      	ldr	r0, [pc, #356]	@ (80115d4 <_printf_i+0x238>)
 801146e:	230a      	movs	r3, #10
 8011470:	e011      	b.n	8011496 <_printf_i+0xfa>
 8011472:	6821      	ldr	r1, [r4, #0]
 8011474:	6833      	ldr	r3, [r6, #0]
 8011476:	0608      	lsls	r0, r1, #24
 8011478:	f853 5b04 	ldr.w	r5, [r3], #4
 801147c:	d402      	bmi.n	8011484 <_printf_i+0xe8>
 801147e:	0649      	lsls	r1, r1, #25
 8011480:	bf48      	it	mi
 8011482:	b2ad      	uxthmi	r5, r5
 8011484:	2f6f      	cmp	r7, #111	@ 0x6f
 8011486:	4853      	ldr	r0, [pc, #332]	@ (80115d4 <_printf_i+0x238>)
 8011488:	6033      	str	r3, [r6, #0]
 801148a:	bf14      	ite	ne
 801148c:	230a      	movne	r3, #10
 801148e:	2308      	moveq	r3, #8
 8011490:	2100      	movs	r1, #0
 8011492:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011496:	6866      	ldr	r6, [r4, #4]
 8011498:	60a6      	str	r6, [r4, #8]
 801149a:	2e00      	cmp	r6, #0
 801149c:	bfa2      	ittt	ge
 801149e:	6821      	ldrge	r1, [r4, #0]
 80114a0:	f021 0104 	bicge.w	r1, r1, #4
 80114a4:	6021      	strge	r1, [r4, #0]
 80114a6:	b90d      	cbnz	r5, 80114ac <_printf_i+0x110>
 80114a8:	2e00      	cmp	r6, #0
 80114aa:	d04b      	beq.n	8011544 <_printf_i+0x1a8>
 80114ac:	4616      	mov	r6, r2
 80114ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80114b2:	fb03 5711 	mls	r7, r3, r1, r5
 80114b6:	5dc7      	ldrb	r7, [r0, r7]
 80114b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80114bc:	462f      	mov	r7, r5
 80114be:	42bb      	cmp	r3, r7
 80114c0:	460d      	mov	r5, r1
 80114c2:	d9f4      	bls.n	80114ae <_printf_i+0x112>
 80114c4:	2b08      	cmp	r3, #8
 80114c6:	d10b      	bne.n	80114e0 <_printf_i+0x144>
 80114c8:	6823      	ldr	r3, [r4, #0]
 80114ca:	07df      	lsls	r7, r3, #31
 80114cc:	d508      	bpl.n	80114e0 <_printf_i+0x144>
 80114ce:	6923      	ldr	r3, [r4, #16]
 80114d0:	6861      	ldr	r1, [r4, #4]
 80114d2:	4299      	cmp	r1, r3
 80114d4:	bfde      	ittt	le
 80114d6:	2330      	movle	r3, #48	@ 0x30
 80114d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80114dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80114e0:	1b92      	subs	r2, r2, r6
 80114e2:	6122      	str	r2, [r4, #16]
 80114e4:	f8cd a000 	str.w	sl, [sp]
 80114e8:	464b      	mov	r3, r9
 80114ea:	aa03      	add	r2, sp, #12
 80114ec:	4621      	mov	r1, r4
 80114ee:	4640      	mov	r0, r8
 80114f0:	f7ff fee6 	bl	80112c0 <_printf_common>
 80114f4:	3001      	adds	r0, #1
 80114f6:	d14a      	bne.n	801158e <_printf_i+0x1f2>
 80114f8:	f04f 30ff 	mov.w	r0, #4294967295
 80114fc:	b004      	add	sp, #16
 80114fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011502:	6823      	ldr	r3, [r4, #0]
 8011504:	f043 0320 	orr.w	r3, r3, #32
 8011508:	6023      	str	r3, [r4, #0]
 801150a:	4833      	ldr	r0, [pc, #204]	@ (80115d8 <_printf_i+0x23c>)
 801150c:	2778      	movs	r7, #120	@ 0x78
 801150e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011512:	6823      	ldr	r3, [r4, #0]
 8011514:	6831      	ldr	r1, [r6, #0]
 8011516:	061f      	lsls	r7, r3, #24
 8011518:	f851 5b04 	ldr.w	r5, [r1], #4
 801151c:	d402      	bmi.n	8011524 <_printf_i+0x188>
 801151e:	065f      	lsls	r7, r3, #25
 8011520:	bf48      	it	mi
 8011522:	b2ad      	uxthmi	r5, r5
 8011524:	6031      	str	r1, [r6, #0]
 8011526:	07d9      	lsls	r1, r3, #31
 8011528:	bf44      	itt	mi
 801152a:	f043 0320 	orrmi.w	r3, r3, #32
 801152e:	6023      	strmi	r3, [r4, #0]
 8011530:	b11d      	cbz	r5, 801153a <_printf_i+0x19e>
 8011532:	2310      	movs	r3, #16
 8011534:	e7ac      	b.n	8011490 <_printf_i+0xf4>
 8011536:	4827      	ldr	r0, [pc, #156]	@ (80115d4 <_printf_i+0x238>)
 8011538:	e7e9      	b.n	801150e <_printf_i+0x172>
 801153a:	6823      	ldr	r3, [r4, #0]
 801153c:	f023 0320 	bic.w	r3, r3, #32
 8011540:	6023      	str	r3, [r4, #0]
 8011542:	e7f6      	b.n	8011532 <_printf_i+0x196>
 8011544:	4616      	mov	r6, r2
 8011546:	e7bd      	b.n	80114c4 <_printf_i+0x128>
 8011548:	6833      	ldr	r3, [r6, #0]
 801154a:	6825      	ldr	r5, [r4, #0]
 801154c:	6961      	ldr	r1, [r4, #20]
 801154e:	1d18      	adds	r0, r3, #4
 8011550:	6030      	str	r0, [r6, #0]
 8011552:	062e      	lsls	r6, r5, #24
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	d501      	bpl.n	801155c <_printf_i+0x1c0>
 8011558:	6019      	str	r1, [r3, #0]
 801155a:	e002      	b.n	8011562 <_printf_i+0x1c6>
 801155c:	0668      	lsls	r0, r5, #25
 801155e:	d5fb      	bpl.n	8011558 <_printf_i+0x1bc>
 8011560:	8019      	strh	r1, [r3, #0]
 8011562:	2300      	movs	r3, #0
 8011564:	6123      	str	r3, [r4, #16]
 8011566:	4616      	mov	r6, r2
 8011568:	e7bc      	b.n	80114e4 <_printf_i+0x148>
 801156a:	6833      	ldr	r3, [r6, #0]
 801156c:	1d1a      	adds	r2, r3, #4
 801156e:	6032      	str	r2, [r6, #0]
 8011570:	681e      	ldr	r6, [r3, #0]
 8011572:	6862      	ldr	r2, [r4, #4]
 8011574:	2100      	movs	r1, #0
 8011576:	4630      	mov	r0, r6
 8011578:	f7ee feb2 	bl	80002e0 <memchr>
 801157c:	b108      	cbz	r0, 8011582 <_printf_i+0x1e6>
 801157e:	1b80      	subs	r0, r0, r6
 8011580:	6060      	str	r0, [r4, #4]
 8011582:	6863      	ldr	r3, [r4, #4]
 8011584:	6123      	str	r3, [r4, #16]
 8011586:	2300      	movs	r3, #0
 8011588:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801158c:	e7aa      	b.n	80114e4 <_printf_i+0x148>
 801158e:	6923      	ldr	r3, [r4, #16]
 8011590:	4632      	mov	r2, r6
 8011592:	4649      	mov	r1, r9
 8011594:	4640      	mov	r0, r8
 8011596:	47d0      	blx	sl
 8011598:	3001      	adds	r0, #1
 801159a:	d0ad      	beq.n	80114f8 <_printf_i+0x15c>
 801159c:	6823      	ldr	r3, [r4, #0]
 801159e:	079b      	lsls	r3, r3, #30
 80115a0:	d413      	bmi.n	80115ca <_printf_i+0x22e>
 80115a2:	68e0      	ldr	r0, [r4, #12]
 80115a4:	9b03      	ldr	r3, [sp, #12]
 80115a6:	4298      	cmp	r0, r3
 80115a8:	bfb8      	it	lt
 80115aa:	4618      	movlt	r0, r3
 80115ac:	e7a6      	b.n	80114fc <_printf_i+0x160>
 80115ae:	2301      	movs	r3, #1
 80115b0:	4632      	mov	r2, r6
 80115b2:	4649      	mov	r1, r9
 80115b4:	4640      	mov	r0, r8
 80115b6:	47d0      	blx	sl
 80115b8:	3001      	adds	r0, #1
 80115ba:	d09d      	beq.n	80114f8 <_printf_i+0x15c>
 80115bc:	3501      	adds	r5, #1
 80115be:	68e3      	ldr	r3, [r4, #12]
 80115c0:	9903      	ldr	r1, [sp, #12]
 80115c2:	1a5b      	subs	r3, r3, r1
 80115c4:	42ab      	cmp	r3, r5
 80115c6:	dcf2      	bgt.n	80115ae <_printf_i+0x212>
 80115c8:	e7eb      	b.n	80115a2 <_printf_i+0x206>
 80115ca:	2500      	movs	r5, #0
 80115cc:	f104 0619 	add.w	r6, r4, #25
 80115d0:	e7f5      	b.n	80115be <_printf_i+0x222>
 80115d2:	bf00      	nop
 80115d4:	08011dbe 	.word	0x08011dbe
 80115d8:	08011dcf 	.word	0x08011dcf

080115dc <__sflush_r>:
 80115dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80115e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115e4:	0716      	lsls	r6, r2, #28
 80115e6:	4605      	mov	r5, r0
 80115e8:	460c      	mov	r4, r1
 80115ea:	d454      	bmi.n	8011696 <__sflush_r+0xba>
 80115ec:	684b      	ldr	r3, [r1, #4]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	dc02      	bgt.n	80115f8 <__sflush_r+0x1c>
 80115f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	dd48      	ble.n	801168a <__sflush_r+0xae>
 80115f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80115fa:	2e00      	cmp	r6, #0
 80115fc:	d045      	beq.n	801168a <__sflush_r+0xae>
 80115fe:	2300      	movs	r3, #0
 8011600:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011604:	682f      	ldr	r7, [r5, #0]
 8011606:	6a21      	ldr	r1, [r4, #32]
 8011608:	602b      	str	r3, [r5, #0]
 801160a:	d030      	beq.n	801166e <__sflush_r+0x92>
 801160c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801160e:	89a3      	ldrh	r3, [r4, #12]
 8011610:	0759      	lsls	r1, r3, #29
 8011612:	d505      	bpl.n	8011620 <__sflush_r+0x44>
 8011614:	6863      	ldr	r3, [r4, #4]
 8011616:	1ad2      	subs	r2, r2, r3
 8011618:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801161a:	b10b      	cbz	r3, 8011620 <__sflush_r+0x44>
 801161c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801161e:	1ad2      	subs	r2, r2, r3
 8011620:	2300      	movs	r3, #0
 8011622:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011624:	6a21      	ldr	r1, [r4, #32]
 8011626:	4628      	mov	r0, r5
 8011628:	47b0      	blx	r6
 801162a:	1c43      	adds	r3, r0, #1
 801162c:	89a3      	ldrh	r3, [r4, #12]
 801162e:	d106      	bne.n	801163e <__sflush_r+0x62>
 8011630:	6829      	ldr	r1, [r5, #0]
 8011632:	291d      	cmp	r1, #29
 8011634:	d82b      	bhi.n	801168e <__sflush_r+0xb2>
 8011636:	4a2a      	ldr	r2, [pc, #168]	@ (80116e0 <__sflush_r+0x104>)
 8011638:	410a      	asrs	r2, r1
 801163a:	07d6      	lsls	r6, r2, #31
 801163c:	d427      	bmi.n	801168e <__sflush_r+0xb2>
 801163e:	2200      	movs	r2, #0
 8011640:	6062      	str	r2, [r4, #4]
 8011642:	04d9      	lsls	r1, r3, #19
 8011644:	6922      	ldr	r2, [r4, #16]
 8011646:	6022      	str	r2, [r4, #0]
 8011648:	d504      	bpl.n	8011654 <__sflush_r+0x78>
 801164a:	1c42      	adds	r2, r0, #1
 801164c:	d101      	bne.n	8011652 <__sflush_r+0x76>
 801164e:	682b      	ldr	r3, [r5, #0]
 8011650:	b903      	cbnz	r3, 8011654 <__sflush_r+0x78>
 8011652:	6560      	str	r0, [r4, #84]	@ 0x54
 8011654:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011656:	602f      	str	r7, [r5, #0]
 8011658:	b1b9      	cbz	r1, 801168a <__sflush_r+0xae>
 801165a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801165e:	4299      	cmp	r1, r3
 8011660:	d002      	beq.n	8011668 <__sflush_r+0x8c>
 8011662:	4628      	mov	r0, r5
 8011664:	f7ff fca0 	bl	8010fa8 <_free_r>
 8011668:	2300      	movs	r3, #0
 801166a:	6363      	str	r3, [r4, #52]	@ 0x34
 801166c:	e00d      	b.n	801168a <__sflush_r+0xae>
 801166e:	2301      	movs	r3, #1
 8011670:	4628      	mov	r0, r5
 8011672:	47b0      	blx	r6
 8011674:	4602      	mov	r2, r0
 8011676:	1c50      	adds	r0, r2, #1
 8011678:	d1c9      	bne.n	801160e <__sflush_r+0x32>
 801167a:	682b      	ldr	r3, [r5, #0]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d0c6      	beq.n	801160e <__sflush_r+0x32>
 8011680:	2b1d      	cmp	r3, #29
 8011682:	d001      	beq.n	8011688 <__sflush_r+0xac>
 8011684:	2b16      	cmp	r3, #22
 8011686:	d11e      	bne.n	80116c6 <__sflush_r+0xea>
 8011688:	602f      	str	r7, [r5, #0]
 801168a:	2000      	movs	r0, #0
 801168c:	e022      	b.n	80116d4 <__sflush_r+0xf8>
 801168e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011692:	b21b      	sxth	r3, r3
 8011694:	e01b      	b.n	80116ce <__sflush_r+0xf2>
 8011696:	690f      	ldr	r7, [r1, #16]
 8011698:	2f00      	cmp	r7, #0
 801169a:	d0f6      	beq.n	801168a <__sflush_r+0xae>
 801169c:	0793      	lsls	r3, r2, #30
 801169e:	680e      	ldr	r6, [r1, #0]
 80116a0:	bf08      	it	eq
 80116a2:	694b      	ldreq	r3, [r1, #20]
 80116a4:	600f      	str	r7, [r1, #0]
 80116a6:	bf18      	it	ne
 80116a8:	2300      	movne	r3, #0
 80116aa:	eba6 0807 	sub.w	r8, r6, r7
 80116ae:	608b      	str	r3, [r1, #8]
 80116b0:	f1b8 0f00 	cmp.w	r8, #0
 80116b4:	dde9      	ble.n	801168a <__sflush_r+0xae>
 80116b6:	6a21      	ldr	r1, [r4, #32]
 80116b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80116ba:	4643      	mov	r3, r8
 80116bc:	463a      	mov	r2, r7
 80116be:	4628      	mov	r0, r5
 80116c0:	47b0      	blx	r6
 80116c2:	2800      	cmp	r0, #0
 80116c4:	dc08      	bgt.n	80116d8 <__sflush_r+0xfc>
 80116c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80116ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80116ce:	81a3      	strh	r3, [r4, #12]
 80116d0:	f04f 30ff 	mov.w	r0, #4294967295
 80116d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116d8:	4407      	add	r7, r0
 80116da:	eba8 0800 	sub.w	r8, r8, r0
 80116de:	e7e7      	b.n	80116b0 <__sflush_r+0xd4>
 80116e0:	dfbffffe 	.word	0xdfbffffe

080116e4 <_fflush_r>:
 80116e4:	b538      	push	{r3, r4, r5, lr}
 80116e6:	690b      	ldr	r3, [r1, #16]
 80116e8:	4605      	mov	r5, r0
 80116ea:	460c      	mov	r4, r1
 80116ec:	b913      	cbnz	r3, 80116f4 <_fflush_r+0x10>
 80116ee:	2500      	movs	r5, #0
 80116f0:	4628      	mov	r0, r5
 80116f2:	bd38      	pop	{r3, r4, r5, pc}
 80116f4:	b118      	cbz	r0, 80116fe <_fflush_r+0x1a>
 80116f6:	6a03      	ldr	r3, [r0, #32]
 80116f8:	b90b      	cbnz	r3, 80116fe <_fflush_r+0x1a>
 80116fa:	f7ff f9d7 	bl	8010aac <__sinit>
 80116fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d0f3      	beq.n	80116ee <_fflush_r+0xa>
 8011706:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011708:	07d0      	lsls	r0, r2, #31
 801170a:	d404      	bmi.n	8011716 <_fflush_r+0x32>
 801170c:	0599      	lsls	r1, r3, #22
 801170e:	d402      	bmi.n	8011716 <_fflush_r+0x32>
 8011710:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011712:	f7ff fc38 	bl	8010f86 <__retarget_lock_acquire_recursive>
 8011716:	4628      	mov	r0, r5
 8011718:	4621      	mov	r1, r4
 801171a:	f7ff ff5f 	bl	80115dc <__sflush_r>
 801171e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011720:	07da      	lsls	r2, r3, #31
 8011722:	4605      	mov	r5, r0
 8011724:	d4e4      	bmi.n	80116f0 <_fflush_r+0xc>
 8011726:	89a3      	ldrh	r3, [r4, #12]
 8011728:	059b      	lsls	r3, r3, #22
 801172a:	d4e1      	bmi.n	80116f0 <_fflush_r+0xc>
 801172c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801172e:	f7ff fc2b 	bl	8010f88 <__retarget_lock_release_recursive>
 8011732:	e7dd      	b.n	80116f0 <_fflush_r+0xc>

08011734 <__swhatbuf_r>:
 8011734:	b570      	push	{r4, r5, r6, lr}
 8011736:	460c      	mov	r4, r1
 8011738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801173c:	2900      	cmp	r1, #0
 801173e:	b096      	sub	sp, #88	@ 0x58
 8011740:	4615      	mov	r5, r2
 8011742:	461e      	mov	r6, r3
 8011744:	da0d      	bge.n	8011762 <__swhatbuf_r+0x2e>
 8011746:	89a3      	ldrh	r3, [r4, #12]
 8011748:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801174c:	f04f 0100 	mov.w	r1, #0
 8011750:	bf14      	ite	ne
 8011752:	2340      	movne	r3, #64	@ 0x40
 8011754:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011758:	2000      	movs	r0, #0
 801175a:	6031      	str	r1, [r6, #0]
 801175c:	602b      	str	r3, [r5, #0]
 801175e:	b016      	add	sp, #88	@ 0x58
 8011760:	bd70      	pop	{r4, r5, r6, pc}
 8011762:	466a      	mov	r2, sp
 8011764:	f000 f87c 	bl	8011860 <_fstat_r>
 8011768:	2800      	cmp	r0, #0
 801176a:	dbec      	blt.n	8011746 <__swhatbuf_r+0x12>
 801176c:	9901      	ldr	r1, [sp, #4]
 801176e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011772:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011776:	4259      	negs	r1, r3
 8011778:	4159      	adcs	r1, r3
 801177a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801177e:	e7eb      	b.n	8011758 <__swhatbuf_r+0x24>

08011780 <__smakebuf_r>:
 8011780:	898b      	ldrh	r3, [r1, #12]
 8011782:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011784:	079d      	lsls	r5, r3, #30
 8011786:	4606      	mov	r6, r0
 8011788:	460c      	mov	r4, r1
 801178a:	d507      	bpl.n	801179c <__smakebuf_r+0x1c>
 801178c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011790:	6023      	str	r3, [r4, #0]
 8011792:	6123      	str	r3, [r4, #16]
 8011794:	2301      	movs	r3, #1
 8011796:	6163      	str	r3, [r4, #20]
 8011798:	b003      	add	sp, #12
 801179a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801179c:	ab01      	add	r3, sp, #4
 801179e:	466a      	mov	r2, sp
 80117a0:	f7ff ffc8 	bl	8011734 <__swhatbuf_r>
 80117a4:	9f00      	ldr	r7, [sp, #0]
 80117a6:	4605      	mov	r5, r0
 80117a8:	4639      	mov	r1, r7
 80117aa:	4630      	mov	r0, r6
 80117ac:	f7ff f866 	bl	801087c <_malloc_r>
 80117b0:	b948      	cbnz	r0, 80117c6 <__smakebuf_r+0x46>
 80117b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117b6:	059a      	lsls	r2, r3, #22
 80117b8:	d4ee      	bmi.n	8011798 <__smakebuf_r+0x18>
 80117ba:	f023 0303 	bic.w	r3, r3, #3
 80117be:	f043 0302 	orr.w	r3, r3, #2
 80117c2:	81a3      	strh	r3, [r4, #12]
 80117c4:	e7e2      	b.n	801178c <__smakebuf_r+0xc>
 80117c6:	89a3      	ldrh	r3, [r4, #12]
 80117c8:	6020      	str	r0, [r4, #0]
 80117ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80117ce:	81a3      	strh	r3, [r4, #12]
 80117d0:	9b01      	ldr	r3, [sp, #4]
 80117d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80117d6:	b15b      	cbz	r3, 80117f0 <__smakebuf_r+0x70>
 80117d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80117dc:	4630      	mov	r0, r6
 80117de:	f000 f851 	bl	8011884 <_isatty_r>
 80117e2:	b128      	cbz	r0, 80117f0 <__smakebuf_r+0x70>
 80117e4:	89a3      	ldrh	r3, [r4, #12]
 80117e6:	f023 0303 	bic.w	r3, r3, #3
 80117ea:	f043 0301 	orr.w	r3, r3, #1
 80117ee:	81a3      	strh	r3, [r4, #12]
 80117f0:	89a3      	ldrh	r3, [r4, #12]
 80117f2:	431d      	orrs	r5, r3
 80117f4:	81a5      	strh	r5, [r4, #12]
 80117f6:	e7cf      	b.n	8011798 <__smakebuf_r+0x18>

080117f8 <_putc_r>:
 80117f8:	b570      	push	{r4, r5, r6, lr}
 80117fa:	460d      	mov	r5, r1
 80117fc:	4614      	mov	r4, r2
 80117fe:	4606      	mov	r6, r0
 8011800:	b118      	cbz	r0, 801180a <_putc_r+0x12>
 8011802:	6a03      	ldr	r3, [r0, #32]
 8011804:	b90b      	cbnz	r3, 801180a <_putc_r+0x12>
 8011806:	f7ff f951 	bl	8010aac <__sinit>
 801180a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801180c:	07d8      	lsls	r0, r3, #31
 801180e:	d405      	bmi.n	801181c <_putc_r+0x24>
 8011810:	89a3      	ldrh	r3, [r4, #12]
 8011812:	0599      	lsls	r1, r3, #22
 8011814:	d402      	bmi.n	801181c <_putc_r+0x24>
 8011816:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011818:	f7ff fbb5 	bl	8010f86 <__retarget_lock_acquire_recursive>
 801181c:	68a3      	ldr	r3, [r4, #8]
 801181e:	3b01      	subs	r3, #1
 8011820:	2b00      	cmp	r3, #0
 8011822:	60a3      	str	r3, [r4, #8]
 8011824:	da05      	bge.n	8011832 <_putc_r+0x3a>
 8011826:	69a2      	ldr	r2, [r4, #24]
 8011828:	4293      	cmp	r3, r2
 801182a:	db12      	blt.n	8011852 <_putc_r+0x5a>
 801182c:	b2eb      	uxtb	r3, r5
 801182e:	2b0a      	cmp	r3, #10
 8011830:	d00f      	beq.n	8011852 <_putc_r+0x5a>
 8011832:	6823      	ldr	r3, [r4, #0]
 8011834:	1c5a      	adds	r2, r3, #1
 8011836:	6022      	str	r2, [r4, #0]
 8011838:	701d      	strb	r5, [r3, #0]
 801183a:	b2ed      	uxtb	r5, r5
 801183c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801183e:	07da      	lsls	r2, r3, #31
 8011840:	d405      	bmi.n	801184e <_putc_r+0x56>
 8011842:	89a3      	ldrh	r3, [r4, #12]
 8011844:	059b      	lsls	r3, r3, #22
 8011846:	d402      	bmi.n	801184e <_putc_r+0x56>
 8011848:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801184a:	f7ff fb9d 	bl	8010f88 <__retarget_lock_release_recursive>
 801184e:	4628      	mov	r0, r5
 8011850:	bd70      	pop	{r4, r5, r6, pc}
 8011852:	4629      	mov	r1, r5
 8011854:	4622      	mov	r2, r4
 8011856:	4630      	mov	r0, r6
 8011858:	f7ff fa19 	bl	8010c8e <__swbuf_r>
 801185c:	4605      	mov	r5, r0
 801185e:	e7ed      	b.n	801183c <_putc_r+0x44>

08011860 <_fstat_r>:
 8011860:	b538      	push	{r3, r4, r5, lr}
 8011862:	4d07      	ldr	r5, [pc, #28]	@ (8011880 <_fstat_r+0x20>)
 8011864:	2300      	movs	r3, #0
 8011866:	4604      	mov	r4, r0
 8011868:	4608      	mov	r0, r1
 801186a:	4611      	mov	r1, r2
 801186c:	602b      	str	r3, [r5, #0]
 801186e:	f7f1 fffb 	bl	8003868 <_fstat>
 8011872:	1c43      	adds	r3, r0, #1
 8011874:	d102      	bne.n	801187c <_fstat_r+0x1c>
 8011876:	682b      	ldr	r3, [r5, #0]
 8011878:	b103      	cbz	r3, 801187c <_fstat_r+0x1c>
 801187a:	6023      	str	r3, [r4, #0]
 801187c:	bd38      	pop	{r3, r4, r5, pc}
 801187e:	bf00      	nop
 8011880:	24000d78 	.word	0x24000d78

08011884 <_isatty_r>:
 8011884:	b538      	push	{r3, r4, r5, lr}
 8011886:	4d06      	ldr	r5, [pc, #24]	@ (80118a0 <_isatty_r+0x1c>)
 8011888:	2300      	movs	r3, #0
 801188a:	4604      	mov	r4, r0
 801188c:	4608      	mov	r0, r1
 801188e:	602b      	str	r3, [r5, #0]
 8011890:	f7f1 fffa 	bl	8003888 <_isatty>
 8011894:	1c43      	adds	r3, r0, #1
 8011896:	d102      	bne.n	801189e <_isatty_r+0x1a>
 8011898:	682b      	ldr	r3, [r5, #0]
 801189a:	b103      	cbz	r3, 801189e <_isatty_r+0x1a>
 801189c:	6023      	str	r3, [r4, #0]
 801189e:	bd38      	pop	{r3, r4, r5, pc}
 80118a0:	24000d78 	.word	0x24000d78

080118a4 <_init>:
 80118a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118a6:	bf00      	nop
 80118a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118aa:	bc08      	pop	{r3}
 80118ac:	469e      	mov	lr, r3
 80118ae:	4770      	bx	lr

080118b0 <_fini>:
 80118b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118b2:	bf00      	nop
 80118b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118b6:	bc08      	pop	{r3}
 80118b8:	469e      	mov	lr, r3
 80118ba:	4770      	bx	lr
